
switcherator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  000064a6  0000653a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000064a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f6  008002a4  008002a4  000066de  2**0
                  ALLOC
  3 .stab         00002d9c  00000000  00000000  000066e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ea9  00000000  00000000  0000947c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  0000a325  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  0000a347  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006d3d  00000000  00000000  0000a3af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000077d  00000000  00000000  000110ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001395  00000000  00000000  00011869  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f3c  00000000  00000000  00012c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000cc8  00000000  00000000  00013b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006404  00000000  00000000  00014804  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0001ac08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 d9 27 	jmp	0x4fb2	; 0x4fb2 <__vector_11>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__c.2119>:
      68:	63 64 69 6e 6f 70 73 75 78 58 00 00                 cdinopsuxX..

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	12 e0       	ldi	r17, 0x02	; 2
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	e6 ea       	ldi	r30, 0xA6	; 166
      88:	f4 e6       	ldi	r31, 0x64	; 100
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a4 3a       	cpi	r26, 0xA4	; 164
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	14 e0       	ldi	r17, 0x04	; 4
      98:	a4 ea       	ldi	r26, 0xA4	; 164
      9a:	b2 e0       	ldi	r27, 0x02	; 2
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	aa 39       	cpi	r26, 0x9A	; 154
      a2:	b1 07       	cpc	r27, r17
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <main>
      aa:	0c 94 51 32 	jmp	0x64a2	; 0x64a2 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <drawInterface>:
        default:
            break;
    }
}

void drawInterface(void) {
      b2:	08 95       	ret

000000b4 <getSwitchNumber>:
// Helper function to get the switch number from char 3 and 4 of an array

int getSwitchNumber(char * commandReceived) {
    int switchNumber = 0;
    // get switch number
    tempIntString[0] = commandReceived[3];
      b4:	fc 01       	movw	r30, r24
      b6:	23 81       	ldd	r18, Z+3	; 0x03
      b8:	20 93 09 01 	sts	0x0109, r18
    tempIntString[1] = commandReceived[4];
      bc:	84 81       	ldd	r24, Z+4	; 0x04
      be:	80 93 0a 01 	sts	0x010A, r24
    switchNumber = atoi(tempIntString);
      c2:	89 e0       	ldi	r24, 0x09	; 9
      c4:	91 e0       	ldi	r25, 0x01	; 1
      c6:	0c 94 82 30 	jmp	0x6104	; 0x6104 <atoi>

000000ca <getPort>:
    }
    ok();
}
// Takes in a switch number and returns the port (as a letter), pin, direction 0,1, and actual PORT address

void getPort(int switchNumber, char * port, char * pin, char * direction) {
      ca:	fb 01       	movw	r30, r22
    char switchInfo = switchStuff[switchNumber];
      cc:	80 5c       	subi	r24, 0xC0	; 192
      ce:	9c 4f       	sbci	r25, 0xFC	; 252
      d0:	dc 01       	movw	r26, r24
      d2:	8c 91       	ld	r24, X
    if ((switchInfo >= 16 && switchInfo < 32)) {
      d4:	98 2f       	mov	r25, r24
      d6:	90 51       	subi	r25, 0x10	; 16
      d8:	90 31       	cpi	r25, 0x10	; 16
      da:	18 f4       	brcc	.+6      	; 0xe2 <getPort+0x18>
        port[0] = 'B';
      dc:	82 e4       	ldi	r24, 0x42	; 66
      de:	80 83       	st	Z, r24
      e0:	3e c0       	rjmp	.+124    	; 0x15e <getPort+0x94>
        switchInfo -= 16;
    } else if (switchInfo < 16) {
      e2:	80 31       	cpi	r24, 0x10	; 16
      e4:	20 f4       	brcc	.+8      	; 0xee <getPort+0x24>
        port[0] = 'A';
      e6:	91 e4       	ldi	r25, 0x41	; 65
      e8:	90 83       	st	Z, r25
      ea:	98 2f       	mov	r25, r24
      ec:	38 c0       	rjmp	.+112    	; 0x15e <getPort+0x94>
        switchInfo -= 0;
    } else if (switchInfo < 48) {
      ee:	80 33       	cpi	r24, 0x30	; 48
      f0:	28 f4       	brcc	.+10     	; 0xfc <getPort+0x32>
        port[0] = 'C';
      f2:	93 e4       	ldi	r25, 0x43	; 67
      f4:	90 83       	st	Z, r25
        switchInfo -= 32;
      f6:	98 2f       	mov	r25, r24
      f8:	90 52       	subi	r25, 0x20	; 32
      fa:	31 c0       	rjmp	.+98     	; 0x15e <getPort+0x94>
    } else if (switchInfo < 64) {
      fc:	80 34       	cpi	r24, 0x40	; 64
      fe:	28 f4       	brcc	.+10     	; 0x10a <getPort+0x40>
        port[0] = 'D';
     100:	94 e4       	ldi	r25, 0x44	; 68
     102:	90 83       	st	Z, r25
        switchInfo -= 48;
     104:	98 2f       	mov	r25, r24
     106:	90 53       	subi	r25, 0x30	; 48
     108:	2a c0       	rjmp	.+84     	; 0x15e <getPort+0x94>
    } else if (switchInfo < 80) {
     10a:	80 35       	cpi	r24, 0x50	; 80
     10c:	28 f4       	brcc	.+10     	; 0x118 <getPort+0x4e>
        port[0] = 'E';
     10e:	95 e4       	ldi	r25, 0x45	; 69
     110:	90 83       	st	Z, r25
        switchInfo -= 64;
     112:	98 2f       	mov	r25, r24
     114:	90 54       	subi	r25, 0x40	; 64
     116:	23 c0       	rjmp	.+70     	; 0x15e <getPort+0x94>
    } else if (switchInfo < 96) {
     118:	80 36       	cpi	r24, 0x60	; 96
     11a:	28 f4       	brcc	.+10     	; 0x126 <getPort+0x5c>
        port[0] = 'F';
     11c:	96 e4       	ldi	r25, 0x46	; 70
     11e:	90 83       	st	Z, r25
        switchInfo -= 80;
     120:	98 2f       	mov	r25, r24
     122:	90 55       	subi	r25, 0x50	; 80
     124:	1c c0       	rjmp	.+56     	; 0x15e <getPort+0x94>
    } else if (switchInfo < 112) {
     126:	80 37       	cpi	r24, 0x70	; 112
     128:	28 f4       	brcc	.+10     	; 0x134 <getPort+0x6a>
        port[0] = 'G';
     12a:	97 e4       	ldi	r25, 0x47	; 71
     12c:	90 83       	st	Z, r25
        switchInfo -= 96;
     12e:	98 2f       	mov	r25, r24
     130:	90 56       	subi	r25, 0x60	; 96
     132:	15 c0       	rjmp	.+42     	; 0x15e <getPort+0x94>
    } else if (switchInfo < 128) {
     134:	87 fd       	sbrc	r24, 7
     136:	05 c0       	rjmp	.+10     	; 0x142 <getPort+0x78>
        port[0] = 'H';
     138:	98 e4       	ldi	r25, 0x48	; 72
     13a:	90 83       	st	Z, r25
        switchInfo -= 112;
     13c:	98 2f       	mov	r25, r24
     13e:	90 57       	subi	r25, 0x70	; 112
     140:	0e c0       	rjmp	.+28     	; 0x15e <getPort+0x94>
    } else if (switchInfo < 144) {
     142:	80 39       	cpi	r24, 0x90	; 144
     144:	28 f4       	brcc	.+10     	; 0x150 <getPort+0x86>
        port[0] = 'I';
     146:	99 e4       	ldi	r25, 0x49	; 73
     148:	90 83       	st	Z, r25
        switchInfo -= 128;
     14a:	98 2f       	mov	r25, r24
     14c:	90 58       	subi	r25, 0x80	; 128
     14e:	07 c0       	rjmp	.+14     	; 0x15e <getPort+0x94>
    } else {
        port[0] = '?';
     150:	8f e3       	ldi	r24, 0x3F	; 63
     152:	80 83       	st	Z, r24
        pin[0] = 0;
     154:	fa 01       	movw	r30, r20
     156:	10 82       	st	Z, r1
        direction[0] = 0;
     158:	d9 01       	movw	r26, r18
     15a:	1c 92       	st	X, r1
        return;
     15c:	08 95       	ret
    }
    pin[0] = switchInfo / 2;
     15e:	89 2f       	mov	r24, r25
     160:	86 95       	lsr	r24
     162:	fa 01       	movw	r30, r20
     164:	80 83       	st	Z, r24
    direction[0] = switchInfo % 2;
     166:	91 70       	andi	r25, 0x01	; 1
     168:	d9 01       	movw	r26, r18
     16a:	9c 93       	st	X, r25
     16c:	08 95       	ret

0000016e <pwmClear>:
}

// Turn off the PWM - called by clearing the switch

void pwmClear(int switchNumber) {
    if (switchStuff[switchNumber] == 212) {
     16e:	80 5c       	subi	r24, 0xC0	; 192
     170:	9c 4f       	sbci	r25, 0xFC	; 252
     172:	fc 01       	movw	r30, r24
     174:	80 81       	ld	r24, Z
     176:	84 3d       	cpi	r24, 0xD4	; 212
     178:	39 f4       	brne	.+14     	; 0x188 <pwmClear+0x1a>
        bright = oldBright;
     17a:	80 91 15 01 	lds	r24, 0x0115
     17e:	80 93 13 01 	sts	0x0113, r24
     182:	10 92 14 01 	sts	0x0114, r1
     186:	08 95       	ret
    } else {
        TCCR0A = 0;
     188:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
     18a:	15 bc       	out	0x25, r1	; 37
        TCCR2A = 0;
     18c:	10 92 b0 00 	sts	0x00B0, r1
        TCCR2B = 0;
     190:	10 92 b1 00 	sts	0x00B1, r1
        Red = 0;
     194:	10 92 b4 00 	sts	0x00B4, r1
        Green = 0;
     198:	18 bc       	out	0x28, r1	; 40
        Blue = 0;
     19a:	17 bc       	out	0x27, r1	; 39
        DDRD &= ~((1 << PIND3)&(1 << PIND5)&(1 << PIND6));
     19c:	8a b1       	in	r24, 0x0a	; 10
     19e:	8a b9       	out	0x0a, r24	; 10
        runHue = 0;
     1a0:	10 92 82 03 	sts	0x0382, r1
        runColorChanges = 0;
     1a4:	10 92 83 03 	sts	0x0383, r1
     1a8:	08 95       	ret

000001aa <clearTheSwitch>:
    ok();
}

// actual turning switch off (called with new switch as well)

void clearTheSwitch(int switchNumber) {
     1aa:	ef 92       	push	r14
     1ac:	ff 92       	push	r15
     1ae:	0f 93       	push	r16
     1b0:	1f 93       	push	r17
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <clearTheSwitch+0xe>
     1b8:	1f 92       	push	r1
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	8c 01       	movw	r16, r24
    char port[] = {0};
     1c0:	1b 82       	std	Y+3, r1	; 0x03
    char pin[] = {0};
     1c2:	1a 82       	std	Y+2, r1	; 0x02
    char direction[] = {0};
     1c4:	19 82       	std	Y+1, r1	; 0x01
    volatile unsigned char *thisPort = 0;
    volatile unsigned char *thisDDR = 0;
    int realPin = 0;
    // Figure out if it is pwm
    if (switchStuff[switchNumber] >= 200 && switchStuff[switchNumber] <= 220) {
     1c6:	80 e4       	ldi	r24, 0x40	; 64
     1c8:	e8 2e       	mov	r14, r24
     1ca:	83 e0       	ldi	r24, 0x03	; 3
     1cc:	f8 2e       	mov	r15, r24
     1ce:	e0 0e       	add	r14, r16
     1d0:	f1 1e       	adc	r15, r17
     1d2:	f7 01       	movw	r30, r14
     1d4:	80 81       	ld	r24, Z
     1d6:	88 5c       	subi	r24, 0xC8	; 200
     1d8:	85 31       	cpi	r24, 0x15	; 21
     1da:	30 f4       	brcc	.+12     	; 0x1e8 <clearTheSwitch+0x3e>
        // if it is something else
        pwmClear(switchNumber);
     1dc:	c8 01       	movw	r24, r16
     1de:	0e 94 b7 00 	call	0x16e	; 0x16e <pwmClear>
        switchStuff[switchNumber] = 255;
     1e2:	8f ef       	ldi	r24, 0xFF	; 255
     1e4:	f7 01       	movw	r30, r14
     1e6:	39 c0       	rjmp	.+114    	; 0x25a <clearTheSwitch+0xb0>
        return;
    }
    getPort(switchNumber, port, pin, direction);
     1e8:	9e 01       	movw	r18, r28
     1ea:	2f 5f       	subi	r18, 0xFF	; 255
     1ec:	3f 4f       	sbci	r19, 0xFF	; 255
     1ee:	ae 01       	movw	r20, r28
     1f0:	4e 5f       	subi	r20, 0xFE	; 254
     1f2:	5f 4f       	sbci	r21, 0xFF	; 255
     1f4:	be 01       	movw	r22, r28
     1f6:	6d 5f       	subi	r22, 0xFD	; 253
     1f8:	7f 4f       	sbci	r23, 0xFF	; 255
     1fa:	c8 01       	movw	r24, r16
     1fc:	0e 94 65 00 	call	0xca	; 0xca <getPort>
    if (port[0] == 'B') {
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	82 34       	cpi	r24, 0x42	; 66
     204:	49 f0       	breq	.+18     	; 0x218 <clearTheSwitch+0x6e>
    } else if (port[0] == 'A') {
        thisPort = &PORTA;
        thisDDR = &DDRA;
#endif        
#ifdef PORTC
    } else if (port[0] == 'C') {
     206:	83 34       	cpi	r24, 0x43	; 67
     208:	61 f0       	breq	.+24     	; 0x222 <clearTheSwitch+0x78>
        thisPort = &PORTC;
        thisDDR = &DDRC;
#endif        
#ifdef PORTD
    } else if (port[0] == 'D') {
     20a:	84 34       	cpi	r24, 0x44	; 68
     20c:	79 f0       	breq	.+30     	; 0x22c <clearTheSwitch+0x82>
void clearTheSwitch(int switchNumber) {
    char port[] = {0};
    char pin[] = {0};
    char direction[] = {0};
    volatile unsigned char *thisPort = 0;
    volatile unsigned char *thisDDR = 0;
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e0       	ldi	r27, 0x00	; 0

void clearTheSwitch(int switchNumber) {
    char port[] = {0};
    char pin[] = {0};
    char direction[] = {0};
    volatile unsigned char *thisPort = 0;
     212:	e0 e0       	ldi	r30, 0x00	; 0
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	0e c0       	rjmp	.+28     	; 0x234 <clearTheSwitch+0x8a>
        return;
    }
    getPort(switchNumber, port, pin, direction);
    if (port[0] == 'B') {
        thisPort = &PORTB;
        thisDDR = &DDRB;
     218:	a4 e2       	ldi	r26, 0x24	; 36
     21a:	b0 e0       	ldi	r27, 0x00	; 0
        switchStuff[switchNumber] = 255;
        return;
    }
    getPort(switchNumber, port, pin, direction);
    if (port[0] == 'B') {
        thisPort = &PORTB;
     21c:	e5 e2       	ldi	r30, 0x25	; 37
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	09 c0       	rjmp	.+18     	; 0x234 <clearTheSwitch+0x8a>
        thisDDR = &DDRA;
#endif        
#ifdef PORTC
    } else if (port[0] == 'C') {
        thisPort = &PORTC;
        thisDDR = &DDRC;
     222:	a7 e2       	ldi	r26, 0x27	; 39
     224:	b0 e0       	ldi	r27, 0x00	; 0
        thisPort = &PORTA;
        thisDDR = &DDRA;
#endif        
#ifdef PORTC
    } else if (port[0] == 'C') {
        thisPort = &PORTC;
     226:	e8 e2       	ldi	r30, 0x28	; 40
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	04 c0       	rjmp	.+8      	; 0x234 <clearTheSwitch+0x8a>
        thisDDR = &DDRC;
#endif        
#ifdef PORTD
    } else if (port[0] == 'D') {
        thisPort = &PORTD;
        thisDDR = &DDRD;
     22c:	aa e2       	ldi	r26, 0x2A	; 42
     22e:	b0 e0       	ldi	r27, 0x00	; 0
        thisPort = &PORTC;
        thisDDR = &DDRC;
#endif        
#ifdef PORTD
    } else if (port[0] == 'D') {
        thisPort = &PORTD;
     230:	eb e2       	ldi	r30, 0x2B	; 43
     232:	f0 e0       	ldi	r31, 0x00	; 0
        thisPort = &PORTI;
        thisDDR = &DDRI;
#endif        
    }
    realPin = pin[0];
    *thisDDR &= ~(1 << realPin);
     234:	2c 91       	ld	r18, X
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0a 80       	ldd	r0, Y+2	; 0x02
     23c:	02 c0       	rjmp	.+4      	; 0x242 <clearTheSwitch+0x98>
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <clearTheSwitch+0x94>
     246:	80 95       	com	r24
     248:	28 23       	and	r18, r24
     24a:	2c 93       	st	X, r18
    *thisPort &= ~(1 << realPin);
     24c:	90 81       	ld	r25, Z
     24e:	98 23       	and	r25, r24
     250:	90 83       	st	Z, r25
    switchStuff[switchNumber] = 255;
     252:	f8 01       	movw	r30, r16
     254:	e0 5c       	subi	r30, 0xC0	; 192
     256:	fc 4f       	sbci	r31, 0xFC	; 252
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	80 83       	st	Z, r24
}
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	ff 90       	pop	r15
     26c:	ef 90       	pop	r14
     26e:	08 95       	ret

00000270 <runColorFunction>:
// Run color function
// goes through the colors and switches them.

void runColorFunction(void) {
    // delay
    colorChangeCount++;
     270:	80 91 b8 03 	lds	r24, 0x03B8
     274:	90 91 b9 03 	lds	r25, 0x03B9
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	90 93 b9 03 	sts	0x03B9, r25
     27e:	80 93 b8 03 	sts	0x03B8, r24
    if (colorChangeCount < colorChangeSpeed)
     282:	20 91 1b 01 	lds	r18, 0x011B
     286:	30 91 1c 01 	lds	r19, 0x011C
     28a:	82 17       	cp	r24, r18
     28c:	93 07       	cpc	r25, r19
     28e:	08 f4       	brcc	.+2      	; 0x292 <runColorFunction+0x22>
     290:	66 c0       	rjmp	.+204    	; 0x35e <runColorFunction+0xee>
        return;
    colorChangeCount = 0;
     292:	10 92 b9 03 	sts	0x03B9, r1
     296:	10 92 b8 03 	sts	0x03B8, r1
    currentColor++;
     29a:	80 91 ba 03 	lds	r24, 0x03BA
     29e:	8f 5f       	subi	r24, 0xFF	; 255
    if (currentColor == NUM_COLOR_CHANGES)
     2a0:	86 30       	cpi	r24, 0x06	; 6
     2a2:	19 f0       	breq	.+6      	; 0x2aa <runColorFunction+0x3a>
    // delay
    colorChangeCount++;
    if (colorChangeCount < colorChangeSpeed)
        return;
    colorChangeCount = 0;
    currentColor++;
     2a4:	80 93 ba 03 	sts	0x03BA, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <runColorFunction+0x3e>
    if (currentColor == NUM_COLOR_CHANGES)
        currentColor = 0;
     2aa:	10 92 ba 03 	sts	0x03BA, r1
    if (colorChanges[currentColor][0] == 0 &&
     2ae:	20 91 ba 03 	lds	r18, 0x03BA
     2b2:	82 2f       	mov	r24, r18
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	fc 01       	movw	r30, r24
     2b8:	ee 0f       	add	r30, r30
     2ba:	ff 1f       	adc	r31, r31
     2bc:	e8 0f       	add	r30, r24
     2be:	f9 1f       	adc	r31, r25
     2c0:	e0 52       	subi	r30, 0x20	; 32
     2c2:	fd 4f       	sbci	r31, 0xFD	; 253
     2c4:	80 81       	ld	r24, Z
     2c6:	81 11       	cpse	r24, r1
     2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <runColorFunction+0x70>
     2ca:	81 81       	ldd	r24, Z+1	; 0x01
     2cc:	81 30       	cpi	r24, 0x01	; 1
     2ce:	41 f4       	brne	.+16     	; 0x2e0 <runColorFunction+0x70>
            colorChanges[currentColor][1] == 1 &&
     2d0:	82 81       	ldd	r24, Z+2	; 0x02
     2d2:	81 11       	cpse	r24, r1
     2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <runColorFunction+0x70>
            colorChanges[currentColor][2] == 0) {
        // this one is blank.
        if (currentColor == 0)
     2d6:	22 23       	and	r18, r18
     2d8:	09 f4       	brne	.+2      	; 0x2dc <runColorFunction+0x6c>
     2da:	41 c0       	rjmp	.+130    	; 0x35e <runColorFunction+0xee>
            return;
        currentColor = 0;
     2dc:	10 92 ba 03 	sts	0x03BA, r1
    }
    red = colorChanges[currentColor][0];
     2e0:	80 91 ba 03 	lds	r24, 0x03BA
     2e4:	90 e0       	ldi	r25, 0x00	; 0
    green = colorChanges[currentColor][1];
     2e6:	fc 01       	movw	r30, r24
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	e8 0f       	add	r30, r24
     2ee:	f9 1f       	adc	r31, r25
     2f0:	e0 52       	subi	r30, 0x20	; 32
     2f2:	fd 4f       	sbci	r31, 0xFD	; 253
     2f4:	81 81       	ldd	r24, Z+1	; 0x01
    blue = colorChanges[currentColor][2];
     2f6:	a2 81       	ldd	r26, Z+2	; 0x02
    red = red * bright / 16;
     2f8:	60 91 13 01 	lds	r22, 0x0113
     2fc:	70 91 14 01 	lds	r23, 0x0114
        // this one is blank.
        if (currentColor == 0)
            return;
        currentColor = 0;
    }
    red = colorChanges[currentColor][0];
     300:	90 81       	ld	r25, Z
    green = colorChanges[currentColor][1];
    blue = colorChanges[currentColor][2];
    red = red * bright / 16;
     302:	96 9f       	mul	r25, r22
     304:	a0 01       	movw	r20, r0
     306:	97 9f       	mul	r25, r23
     308:	50 0d       	add	r21, r0
     30a:	11 24       	eor	r1, r1
     30c:	34 e0       	ldi	r19, 0x04	; 4
     30e:	56 95       	lsr	r21
     310:	47 95       	ror	r20
     312:	3a 95       	dec	r19
     314:	e1 f7       	brne	.-8      	; 0x30e <runColorFunction+0x9e>
     316:	50 93 b2 03 	sts	0x03B2, r21
     31a:	40 93 b1 03 	sts	0x03B1, r20
    green = green * bright / 16;
     31e:	86 9f       	mul	r24, r22
     320:	90 01       	movw	r18, r0
     322:	87 9f       	mul	r24, r23
     324:	30 0d       	add	r19, r0
     326:	11 24       	eor	r1, r1
     328:	54 e0       	ldi	r21, 0x04	; 4
     32a:	36 95       	lsr	r19
     32c:	27 95       	ror	r18
     32e:	5a 95       	dec	r21
     330:	e1 f7       	brne	.-8      	; 0x32a <runColorFunction+0xba>
     332:	30 93 b4 03 	sts	0x03B4, r19
     336:	20 93 b3 03 	sts	0x03B3, r18
    blue = blue * bright / 16;
     33a:	a6 9f       	mul	r26, r22
     33c:	c0 01       	movw	r24, r0
     33e:	a7 9f       	mul	r26, r23
     340:	90 0d       	add	r25, r0
     342:	11 24       	eor	r1, r1
     344:	64 e0       	ldi	r22, 0x04	; 4
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	6a 95       	dec	r22
     34c:	e1 f7       	brne	.-8      	; 0x346 <runColorFunction+0xd6>
     34e:	90 93 b6 03 	sts	0x03B6, r25
     352:	80 93 b5 03 	sts	0x03B5, r24
    Red = red;
     356:	40 93 b4 00 	sts	0x00B4, r20
    Green = green;
     35a:	28 bd       	out	0x28, r18	; 40
    Blue = blue;
     35c:	87 bd       	out	0x27, r24	; 39
     35e:	08 95       	ret

00000360 <runHueFunction>:
// static char hueSpeed = 0;
// static char hueCount = 0;

void runHueFunction(void) {
    // extra fixed delay
    littleCount++;
     360:	80 91 bb 03 	lds	r24, 0x03BB
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	80 93 bb 03 	sts	0x03BB, r24
    if (littleCount != 2)
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	09 f0       	breq	.+2      	; 0x370 <runHueFunction+0x10>
     36e:	e9 c0       	rjmp	.+466    	; 0x542 <runHueFunction+0x1e2>
        return;
    littleCount = 0;
     370:	10 92 bb 03 	sts	0x03BB, r1
    hueCount++;
     374:	80 91 bc 03 	lds	r24, 0x03BC
     378:	90 91 bd 03 	lds	r25, 0x03BD
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	90 93 bd 03 	sts	0x03BD, r25
     382:	80 93 bc 03 	sts	0x03BC, r24
    // only run if the count is higher than the "speed"
    if (hueCount < hueSpeed) {
     386:	20 91 1d 01 	lds	r18, 0x011D
     38a:	30 91 1e 01 	lds	r19, 0x011E
     38e:	82 17       	cp	r24, r18
     390:	93 07       	cpc	r25, r19
     392:	08 f4       	brcc	.+2      	; 0x396 <runHueFunction+0x36>
     394:	d6 c0       	rjmp	.+428    	; 0x542 <runHueFunction+0x1e2>
        return;
    }
    hueCount = 0;
     396:	10 92 bd 03 	sts	0x03BD, r1
     39a:	10 92 bc 03 	sts	0x03BC, r1
    if (currentHue < 0x00ff) {
     39e:	80 91 be 03 	lds	r24, 0x03BE
     3a2:	90 91 bf 03 	lds	r25, 0x03BF
     3a6:	8f 3f       	cpi	r24, 0xFF	; 255
     3a8:	91 05       	cpc	r25, r1
     3aa:	38 f4       	brcc	.+14     	; 0x3ba <runHueFunction+0x5a>
        red = 255;
     3ac:	2f ef       	ldi	r18, 0xFF	; 255
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	30 93 b2 03 	sts	0x03B2, r19
     3b4:	20 93 b1 03 	sts	0x03B1, r18
     3b8:	0e c0       	rjmp	.+28     	; 0x3d6 <runHueFunction+0x76>
        green = currentHue;
        blue = 0;
    } else if (currentHue < 0x01ff) {
     3ba:	8f 3f       	cpi	r24, 0xFF	; 255
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	92 07       	cpc	r25, r18
     3c0:	98 f4       	brcc	.+38     	; 0x3e8 <runHueFunction+0x88>
        red = 255 - (currentHue - 0xff);
     3c2:	2e ef       	ldi	r18, 0xFE	; 254
     3c4:	31 e0       	ldi	r19, 0x01	; 1
     3c6:	28 1b       	sub	r18, r24
     3c8:	39 0b       	sbc	r19, r25
     3ca:	30 93 b2 03 	sts	0x03B2, r19
     3ce:	20 93 b1 03 	sts	0x03B1, r18
        green = 255;
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	90 93 b4 03 	sts	0x03B4, r25
     3da:	80 93 b3 03 	sts	0x03B3, r24
        blue = 0;
     3de:	10 92 b6 03 	sts	0x03B6, r1
     3e2:	10 92 b5 03 	sts	0x03B5, r1
     3e6:	60 c0       	rjmp	.+192    	; 0x4a8 <runHueFunction+0x148>
    } else if (currentHue < 0x02ff) {
     3e8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ea:	22 e0       	ldi	r18, 0x02	; 2
     3ec:	92 07       	cpc	r25, r18
     3ee:	68 f4       	brcc	.+26     	; 0x40a <runHueFunction+0xaa>
        red = 0;
     3f0:	10 92 b2 03 	sts	0x03B2, r1
     3f4:	10 92 b1 03 	sts	0x03B1, r1
        green = 255;
     3f8:	2f ef       	ldi	r18, 0xFF	; 255
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	30 93 b4 03 	sts	0x03B4, r19
     400:	20 93 b3 03 	sts	0x03B3, r18
        blue = (currentHue - 0x1ff);
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	91 40       	sbci	r25, 0x01	; 1
     408:	12 c0       	rjmp	.+36     	; 0x42e <runHueFunction+0xce>
    } else if (currentHue < 0x03ff) {
     40a:	8f 3f       	cpi	r24, 0xFF	; 255
     40c:	23 e0       	ldi	r18, 0x03	; 3
     40e:	92 07       	cpc	r25, r18
     410:	98 f4       	brcc	.+38     	; 0x438 <runHueFunction+0xd8>
        red = 0;
     412:	10 92 b2 03 	sts	0x03B2, r1
     416:	10 92 b1 03 	sts	0x03B1, r1
        green = 255 - (currentHue - 0x2ff);
     41a:	2e ef       	ldi	r18, 0xFE	; 254
     41c:	33 e0       	ldi	r19, 0x03	; 3
     41e:	28 1b       	sub	r18, r24
     420:	39 0b       	sbc	r19, r25
     422:	30 93 b4 03 	sts	0x03B4, r19
     426:	20 93 b3 03 	sts	0x03B3, r18
        blue = 255;
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	90 93 b6 03 	sts	0x03B6, r25
     432:	80 93 b5 03 	sts	0x03B5, r24
     436:	38 c0       	rjmp	.+112    	; 0x4a8 <runHueFunction+0x148>
    } else if (currentHue < 0x04ff) {
     438:	8f 3f       	cpi	r24, 0xFF	; 255
     43a:	24 e0       	ldi	r18, 0x04	; 4
     43c:	92 07       	cpc	r25, r18
     43e:	58 f4       	brcc	.+22     	; 0x456 <runHueFunction+0xf6>
        red = (currentHue - 0x3ff);
     440:	8f 5f       	subi	r24, 0xFF	; 255
     442:	93 40       	sbci	r25, 0x03	; 3
     444:	90 93 b2 03 	sts	0x03B2, r25
     448:	80 93 b1 03 	sts	0x03B1, r24
        green = 0;
     44c:	10 92 b4 03 	sts	0x03B4, r1
     450:	10 92 b3 03 	sts	0x03B3, r1
     454:	ea cf       	rjmp	.-44     	; 0x42a <runHueFunction+0xca>
        blue = 255;
    } else if (currentHue < 0x05ff) {
     456:	8f 3f       	cpi	r24, 0xFF	; 255
     458:	25 e0       	ldi	r18, 0x05	; 5
     45a:	92 07       	cpc	r25, r18
     45c:	98 f4       	brcc	.+38     	; 0x484 <runHueFunction+0x124>
        red = 255;
     45e:	2f ef       	ldi	r18, 0xFF	; 255
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	30 93 b2 03 	sts	0x03B2, r19
     466:	20 93 b1 03 	sts	0x03B1, r18
        green = 0;
     46a:	10 92 b4 03 	sts	0x03B4, r1
     46e:	10 92 b3 03 	sts	0x03B3, r1
        blue = 255 - (currentHue - 0x4ff);
     472:	2e ef       	ldi	r18, 0xFE	; 254
     474:	35 e0       	ldi	r19, 0x05	; 5
     476:	28 1b       	sub	r18, r24
     478:	39 0b       	sbc	r19, r25
     47a:	30 93 b6 03 	sts	0x03B6, r19
     47e:	20 93 b5 03 	sts	0x03B5, r18
     482:	12 c0       	rjmp	.+36     	; 0x4a8 <runHueFunction+0x148>
    } else {
        red = 255;
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	90 93 b2 03 	sts	0x03B2, r25
     48c:	80 93 b1 03 	sts	0x03B1, r24
        green = 0;
     490:	10 92 b4 03 	sts	0x03B4, r1
     494:	10 92 b3 03 	sts	0x03B3, r1
        blue = 0;
     498:	10 92 b6 03 	sts	0x03B6, r1
     49c:	10 92 b5 03 	sts	0x03B5, r1
        currentHue = 0;
     4a0:	10 92 bf 03 	sts	0x03BF, r1
     4a4:	10 92 be 03 	sts	0x03BE, r1
    }
    red = red * bright / 16;
     4a8:	60 91 13 01 	lds	r22, 0x0113
     4ac:	70 91 14 01 	lds	r23, 0x0114
     4b0:	80 91 b1 03 	lds	r24, 0x03B1
     4b4:	90 91 b2 03 	lds	r25, 0x03B2
     4b8:	68 9f       	mul	r22, r24
     4ba:	a0 01       	movw	r20, r0
     4bc:	69 9f       	mul	r22, r25
     4be:	50 0d       	add	r21, r0
     4c0:	78 9f       	mul	r23, r24
     4c2:	50 0d       	add	r21, r0
     4c4:	11 24       	eor	r1, r1
     4c6:	e4 e0       	ldi	r30, 0x04	; 4
     4c8:	56 95       	lsr	r21
     4ca:	47 95       	ror	r20
     4cc:	ea 95       	dec	r30
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <runHueFunction+0x168>
     4d0:	50 93 b2 03 	sts	0x03B2, r21
     4d4:	40 93 b1 03 	sts	0x03B1, r20
    green = green * bright / 16;
     4d8:	80 91 b3 03 	lds	r24, 0x03B3
     4dc:	90 91 b4 03 	lds	r25, 0x03B4
     4e0:	68 9f       	mul	r22, r24
     4e2:	90 01       	movw	r18, r0
     4e4:	69 9f       	mul	r22, r25
     4e6:	30 0d       	add	r19, r0
     4e8:	78 9f       	mul	r23, r24
     4ea:	30 0d       	add	r19, r0
     4ec:	11 24       	eor	r1, r1
     4ee:	f4 e0       	ldi	r31, 0x04	; 4
     4f0:	36 95       	lsr	r19
     4f2:	27 95       	ror	r18
     4f4:	fa 95       	dec	r31
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <runHueFunction+0x190>
     4f8:	30 93 b4 03 	sts	0x03B4, r19
     4fc:	20 93 b3 03 	sts	0x03B3, r18
    blue = blue * bright / 16;
     500:	e0 91 b5 03 	lds	r30, 0x03B5
     504:	f0 91 b6 03 	lds	r31, 0x03B6
     508:	6e 9f       	mul	r22, r30
     50a:	c0 01       	movw	r24, r0
     50c:	6f 9f       	mul	r22, r31
     50e:	90 0d       	add	r25, r0
     510:	7e 9f       	mul	r23, r30
     512:	90 0d       	add	r25, r0
     514:	11 24       	eor	r1, r1
     516:	a4 e0       	ldi	r26, 0x04	; 4
     518:	96 95       	lsr	r25
     51a:	87 95       	ror	r24
     51c:	aa 95       	dec	r26
     51e:	e1 f7       	brne	.-8      	; 0x518 <runHueFunction+0x1b8>
     520:	90 93 b6 03 	sts	0x03B6, r25
     524:	80 93 b5 03 	sts	0x03B5, r24
    Red = red;
     528:	40 93 b4 00 	sts	0x00B4, r20
    Green = green;
     52c:	28 bd       	out	0x28, r18	; 40
    Blue = blue;
     52e:	87 bd       	out	0x27, r24	; 39
    currentHue++;
     530:	80 91 be 03 	lds	r24, 0x03BE
     534:	90 91 bf 03 	lds	r25, 0x03BF
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	90 93 bf 03 	sts	0x03BF, r25
     53e:	80 93 be 03 	sts	0x03BE, r24
     542:	08 95       	ret

00000544 <clearTheProgram>:
    }
}

// zeros out the program

void clearTheProgram(int programNumber) {
     544:	2a e0       	ldi	r18, 0x0A	; 10
     546:	ac 01       	movw	r20, r24
     548:	24 9f       	mul	r18, r20
     54a:	c0 01       	movw	r24, r0
     54c:	25 9f       	mul	r18, r21
     54e:	90 0d       	add	r25, r0
     550:	11 24       	eor	r1, r1
     552:	80 54       	subi	r24, 0x40	; 64
     554:	9c 4f       	sbci	r25, 0xFC	; 252
    int x = 0;
    // some of these "0" is a valid option so make it 255
    for (x = 0; x < 10; x++) {
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 e0       	ldi	r19, 0x00	; 0
        weeklyProgram[programNumber][x] = 255;
     55a:	4f ef       	ldi	r20, 0xFF	; 255
    }
}

// zeros out the program

void clearTheProgram(int programNumber) {
     55c:	fc 01       	movw	r30, r24
     55e:	e2 0f       	add	r30, r18
     560:	f3 1f       	adc	r31, r19
    int x = 0;
    // some of these "0" is a valid option so make it 255
    for (x = 0; x < 10; x++) {
        weeklyProgram[programNumber][x] = 255;
     562:	40 83       	st	Z, r20
// zeros out the program

void clearTheProgram(int programNumber) {
    int x = 0;
    // some of these "0" is a valid option so make it 255
    for (x = 0; x < 10; x++) {
     564:	2f 5f       	subi	r18, 0xFF	; 255
     566:	3f 4f       	sbci	r19, 0xFF	; 255
     568:	2a 30       	cpi	r18, 0x0A	; 10
     56a:	31 05       	cpc	r19, r1
     56c:	b9 f7       	brne	.-18     	; 0x55c <clearTheProgram+0x18>
        weeklyProgram[programNumber][x] = 255;
    }
}
     56e:	08 95       	ret

00000570 <findOpenSwitch>:
    ok();
}

// iterates through a program and returns the index of an open switch or 0 if none

int findOpenSwitch(int programNumber) {
     570:	2a e0       	ldi	r18, 0x0A	; 10
     572:	ac 01       	movw	r20, r24
     574:	24 9f       	mul	r18, r20
     576:	c0 01       	movw	r24, r0
     578:	25 9f       	mul	r18, r21
     57a:	90 0d       	add	r25, r0
     57c:	11 24       	eor	r1, r1
     57e:	80 54       	subi	r24, 0x40	; 64
     580:	9c 4f       	sbci	r25, 0xFC	; 252
    int switchIndex = 0;
    int x = 0;
    for (x = 5; x < 9; x++) {
     582:	25 e0       	ldi	r18, 0x05	; 5
     584:	30 e0       	ldi	r19, 0x00	; 0
    ok();
}

// iterates through a program and returns the index of an open switch or 0 if none

int findOpenSwitch(int programNumber) {
     586:	fc 01       	movw	r30, r24
     588:	e2 0f       	add	r30, r18
     58a:	f3 1f       	adc	r31, r19
    int switchIndex = 0;
    int x = 0;
    for (x = 5; x < 9; x++) {
        if (weeklyProgram[programNumber][x] == 255) {
     58c:	40 81       	ld	r20, Z
     58e:	4f 3f       	cpi	r20, 0xFF	; 255
     590:	39 f0       	breq	.+14     	; 0x5a0 <findOpenSwitch+0x30>
// iterates through a program and returns the index of an open switch or 0 if none

int findOpenSwitch(int programNumber) {
    int switchIndex = 0;
    int x = 0;
    for (x = 5; x < 9; x++) {
     592:	2f 5f       	subi	r18, 0xFF	; 255
     594:	3f 4f       	sbci	r19, 0xFF	; 255
     596:	29 30       	cpi	r18, 0x09	; 9
     598:	31 05       	cpc	r19, r1
     59a:	a9 f7       	brne	.-22     	; 0x586 <findOpenSwitch+0x16>
            // blank switch
            switchIndex = x;
            return switchIndex;
        }
    }
    return 0;
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
}
     5a0:	c9 01       	movw	r24, r18
     5a2:	08 95       	ret

000005a4 <programGetSwitches>:

// get the switches for a program
// char * switches should be set as large as NUM_SWITCHES
// so you don't overflow

int programGetSwitches(int programNumber, char * switches) {
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
    int element = 0;
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0

// get the switches for a program
// char * switches should be set as large as NUM_SWITCHES
// so you don't overflow

int programGetSwitches(int programNumber, char * switches) {
     5ac:	ca e0       	ldi	r28, 0x0A	; 10
     5ae:	f9 01       	movw	r30, r18
     5b0:	34 96       	adiw	r30, 0x04	; 4
     5b2:	c8 9f       	mul	r28, r24
     5b4:	a0 01       	movw	r20, r0
     5b6:	c9 9f       	mul	r28, r25
     5b8:	50 0d       	add	r21, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	42 1b       	sub	r20, r18
     5be:	53 0b       	sbc	r21, r19
     5c0:	40 54       	subi	r20, 0x40	; 64
     5c2:	5c 4f       	sbci	r21, 0xFC	; 252
     5c4:	da 01       	movw	r26, r20
     5c6:	a2 0f       	add	r26, r18
     5c8:	b3 1f       	adc	r27, r19
    int element = 0;
    int x = 0;
    // start loading the switch array
    while (1) {
        for (x = 5; x < 9; x++) {
            if (weeklyProgram[programNumber][x] == 255) {
     5ca:	15 96       	adiw	r26, 0x05	; 5
     5cc:	dc 91       	ld	r29, X
     5ce:	df 3f       	cpi	r29, 0xFF	; 255
     5d0:	a9 f0       	breq	.+42     	; 0x5fc <programGetSwitches+0x58>

// get the switches for a program
// char * switches should be set as large as NUM_SWITCHES
// so you don't overflow

int programGetSwitches(int programNumber, char * switches) {
     5d2:	db 01       	movw	r26, r22
     5d4:	a2 0f       	add	r26, r18
     5d6:	b3 1f       	adc	r27, r19
        for (x = 5; x < 9; x++) {
            if (weeklyProgram[programNumber][x] == 255) {
                // blank switch we are done
                return element;
            } else {
                switches[element] = weeklyProgram[programNumber][x];
     5d8:	dc 93       	st	X, r29
                element++;
     5da:	2f 5f       	subi	r18, 0xFF	; 255
     5dc:	3f 4f       	sbci	r19, 0xFF	; 255
int programGetSwitches(int programNumber, char * switches) {
    int element = 0;
    int x = 0;
    // start loading the switch array
    while (1) {
        for (x = 5; x < 9; x++) {
     5de:	2e 17       	cp	r18, r30
     5e0:	3f 07       	cpc	r19, r31
     5e2:	81 f7       	brne	.-32     	; 0x5c4 <programGetSwitches+0x20>
                switches[element] = weeklyProgram[programNumber][x];
                element++;
            }
        } // for x=5-9
        // see if this program iterates around
        if (weeklyProgram[programNumber][9] == 255) {
     5e4:	c8 9f       	mul	r28, r24
     5e6:	f0 01       	movw	r30, r0
     5e8:	c9 9f       	mul	r28, r25
     5ea:	f0 0d       	add	r31, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	e0 54       	subi	r30, 0x40	; 64
     5f0:	fc 4f       	sbci	r31, 0xFC	; 252
     5f2:	81 85       	ldd	r24, Z+9	; 0x09
     5f4:	8f 3f       	cpi	r24, 0xFF	; 255
     5f6:	11 f0       	breq	.+4      	; 0x5fc <programGetSwitches+0x58>
            // we are done;
            return element;
        } else {
            // move to the next programNumber and continue
            programNumber = weeklyProgram[programNumber][9];
     5f8:	90 e0       	ldi	r25, 0x00	; 0
        }
    }
     5fa:	d9 cf       	rjmp	.-78     	; 0x5ae <programGetSwitches+0xa>
}
     5fc:	c9 01       	movw	r24, r18
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <startTheProgram>:
    duration = atol(tempHugeString);
    startTheProgram(programNumber, duration, 0);
    ok();
}

void startTheProgram(int programNumber, int duration, long time) {
     604:	8f 92       	push	r8
     606:	9f 92       	push	r9
     608:	af 92       	push	r10
     60a:	bf 92       	push	r11
     60c:	cf 92       	push	r12
     60e:	df 92       	push	r13
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	64 97       	sbiw	r28, 0x14	; 20
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	4b 01       	movw	r8, r22
    char switches[NUM_SWITCHES];
    int switchCount = 0;
    int thisSwitch = 0;
    int x = 0;

    if (duration == 0) {
     62c:	61 15       	cp	r22, r1
     62e:	71 05       	cpc	r23, r1
     630:	51 f4       	brne	.+20     	; 0x646 <startTheProgram+0x42>
        // get the duration since we weren't fed it
        duration = weeklyProgram[programNumber][3];
        duration <<= 8;
        duration = weeklyProgram[programNumber][4];
     632:	6a e0       	ldi	r22, 0x0A	; 10
     634:	68 9f       	mul	r22, r24
     636:	f0 01       	movw	r30, r0
     638:	69 9f       	mul	r22, r25
     63a:	f0 0d       	add	r31, r0
     63c:	11 24       	eor	r1, r1
     63e:	e0 54       	subi	r30, 0x40	; 64
     640:	fc 4f       	sbci	r31, 0xFC	; 252
     642:	84 80       	ldd	r8, Z+4	; 0x04
     644:	91 2c       	mov	r9, r1
    }
    switchCount = programGetSwitches(programNumber, switches);
     646:	be 01       	movw	r22, r28
     648:	6f 5f       	subi	r22, 0xFF	; 255
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	29 8b       	std	Y+17, r18	; 0x11
     64e:	3a 8b       	std	Y+18, r19	; 0x12
     650:	4b 8b       	std	Y+19, r20	; 0x13
     652:	5c 8b       	std	Y+20, r21	; 0x14
     654:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <programGetSwitches>
     658:	aa 24       	eor	r10, r10
     65a:	97 fc       	sbrc	r9, 7
     65c:	a0 94       	com	r10
     65e:	ba 2c       	mov	r11, r10
     660:	c0 90 aa 03 	lds	r12, 0x03AA
     664:	d0 90 ab 03 	lds	r13, 0x03AB
     668:	e0 90 ac 03 	lds	r14, 0x03AC
     66c:	f0 90 ad 03 	lds	r15, 0x03AD
    // see if we were fed the start time so we don't go too long
    // this may run multiple times
    if (time == 0) {
     670:	29 89       	ldd	r18, Y+17	; 0x11
     672:	3a 89       	ldd	r19, Y+18	; 0x12
     674:	4b 89       	ldd	r20, Y+19	; 0x13
     676:	5c 89       	ldd	r21, Y+20	; 0x14
     678:	21 15       	cp	r18, r1
     67a:	31 05       	cpc	r19, r1
     67c:	41 05       	cpc	r20, r1
     67e:	51 05       	cpc	r21, r1
     680:	31 f4       	brne	.+12     	; 0x68e <startTheProgram+0x8a>
        time = weeklySeconds + duration;
     682:	a5 01       	movw	r20, r10
     684:	94 01       	movw	r18, r8
     686:	2c 0d       	add	r18, r12
     688:	3d 1d       	adc	r19, r13
     68a:	4e 1d       	adc	r20, r14
     68c:	5f 1d       	adc	r21, r15
    }
    for (x = 0; x < switchCount; x++) {
        thisSwitch = switches[x];
        // only update the time if it is longer than what the switch is already turned on to
        if ((weeklySeconds + duration) > switchStatus[thisSwitch])
     68e:	c8 0c       	add	r12, r8
     690:	d9 1c       	adc	r13, r9
     692:	ea 1c       	adc	r14, r10
     694:	fb 1c       	adc	r15, r11
     696:	fe 01       	movw	r30, r28
     698:	31 96       	adiw	r30, 0x01	; 1
    duration = atol(tempHugeString);
    startTheProgram(programNumber, duration, 0);
    ok();
}

void startTheProgram(int programNumber, int duration, long time) {
     69a:	bf 01       	movw	r22, r30
    // see if we were fed the start time so we don't go too long
    // this may run multiple times
    if (time == 0) {
        time = weeklySeconds + duration;
    }
    for (x = 0; x < switchCount; x++) {
     69c:	16 c0       	rjmp	.+44     	; 0x6ca <startTheProgram+0xc6>
        thisSwitch = switches[x];
     69e:	a1 91       	ld	r26, Z+
        // only update the time if it is longer than what the switch is already turned on to
        if ((weeklySeconds + duration) > switchStatus[thisSwitch])
     6a0:	14 e0       	ldi	r17, 0x04	; 4
     6a2:	a1 9f       	mul	r26, r17
     6a4:	d0 01       	movw	r26, r0
     6a6:	11 24       	eor	r1, r1
     6a8:	a0 50       	subi	r26, 0x00	; 0
     6aa:	bd 4f       	sbci	r27, 0xFD	; 253
     6ac:	8d 90       	ld	r8, X+
     6ae:	9d 90       	ld	r9, X+
     6b0:	ad 90       	ld	r10, X+
     6b2:	bc 90       	ld	r11, X
     6b4:	13 97       	sbiw	r26, 0x03	; 3
     6b6:	8c 14       	cp	r8, r12
     6b8:	9d 04       	cpc	r9, r13
     6ba:	ae 04       	cpc	r10, r14
     6bc:	bf 04       	cpc	r11, r15
     6be:	28 f4       	brcc	.+10     	; 0x6ca <startTheProgram+0xc6>
            switchStatus[thisSwitch] = time;
     6c0:	2d 93       	st	X+, r18
     6c2:	3d 93       	st	X+, r19
     6c4:	4d 93       	st	X+, r20
     6c6:	5c 93       	st	X, r21
     6c8:	13 97       	sbiw	r26, 0x03	; 3
    duration = atol(tempHugeString);
    startTheProgram(programNumber, duration, 0);
    ok();
}

void startTheProgram(int programNumber, int duration, long time) {
     6ca:	df 01       	movw	r26, r30
     6cc:	a6 1b       	sub	r26, r22
     6ce:	b7 0b       	sbc	r27, r23
    // see if we were fed the start time so we don't go too long
    // this may run multiple times
    if (time == 0) {
        time = weeklySeconds + duration;
    }
    for (x = 0; x < switchCount; x++) {
     6d0:	a8 17       	cp	r26, r24
     6d2:	b9 07       	cpc	r27, r25
     6d4:	24 f3       	brlt	.-56     	; 0x69e <startTheProgram+0x9a>
        thisSwitch = switches[x];
        // only update the time if it is longer than what the switch is already turned on to
        if ((weeklySeconds + duration) > switchStatus[thisSwitch])
            switchStatus[thisSwitch] = time;
    }
    switchChanged = 1;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 81 03 	sts	0x0381, r24
}
     6dc:	64 96       	adiw	r28, 0x14	; 20
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	bf 90       	pop	r11
     6f8:	af 90       	pop	r10
     6fa:	9f 90       	pop	r9
     6fc:	8f 90       	pop	r8
     6fe:	08 95       	ret

00000700 <readEEPROM>:
            }
        }
    }
}

int readEEPROM(char * data, int memLocation, int memBytes) {
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	7c 01       	movw	r14, r24
     70e:	eb 01       	movw	r28, r22
     710:	8a 01       	movw	r16, r20
     712:	fc 01       	movw	r30, r24
    uint16_t checkProgram;
    int x = 0;
    for (x = 0; x < 14; x++) {
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
        data[x] = 0;
     718:	11 92       	st	Z+, r1
}

int readEEPROM(char * data, int memLocation, int memBytes) {
    uint16_t checkProgram;
    int x = 0;
    for (x = 0; x < 14; x++) {
     71a:	2f 5f       	subi	r18, 0xFF	; 255
     71c:	3f 4f       	sbci	r19, 0xFF	; 255
     71e:	2e 30       	cpi	r18, 0x0E	; 14
     720:	31 05       	cpc	r19, r1
     722:	d1 f7       	brne	.-12     	; 0x718 <readEEPROM+0x18>
        data[x] = 0;
    }
    // see if it has been programmed
    checkProgram = eeprom_read_word((uint16_t*) memLocation);
     724:	ce 01       	movw	r24, r28
     726:	0e 94 d9 31 	call	0x63b2	; 0x63b2 <__eerd_word_m328>
    // "DW" = 68,87 = 0x4457
    if (checkProgram == 0x4457) {
     72a:	87 35       	cpi	r24, 0x57	; 87
     72c:	94 44       	sbci	r25, 0x44	; 68
     72e:	61 f4       	brne	.+24     	; 0x748 <readEEPROM+0x48>
        // we've written here before. now get the data (except marker)
        eeprom_read_block((void*) data, (const void*) (memLocation + 2), (memBytes - 2));
     730:	a8 01       	movw	r20, r16
     732:	42 50       	subi	r20, 0x02	; 2
     734:	51 09       	sbc	r21, r1
     736:	be 01       	movw	r22, r28
     738:	6e 5f       	subi	r22, 0xFE	; 254
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	c7 01       	movw	r24, r14
     73e:	0e 94 c9 31 	call	0x6392	; 0x6392 <__eerd_block_m328>
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	02 c0       	rjmp	.+4      	; 0x74c <readEEPROM+0x4c>
        return 1;
    } else {
        return 0;
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
    }
}
     74c:	c9 01       	movw	r24, r18
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	08 95       	ret

0000075c <writeEEPROM>:

void writeEEPROM(char * data, int memLocation, int memBytes) {
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	eb 01       	movw	r28, r22
    uint16_t marker = 0x4457; // "DW" in ascii
    eeprom_update_block((const void*) data, (void*) (memLocation + 2), (memBytes - 2));
     762:	42 50       	subi	r20, 0x02	; 2
     764:	51 09       	sbc	r21, r1
     766:	6e 5f       	subi	r22, 0xFE	; 254
     768:	7f 4f       	sbci	r23, 0xFF	; 255
     76a:	0e 94 df 31 	call	0x63be	; 0x63be <__eeupd_block_m328>
    eeprom_update_word((uint16_t*) memLocation, marker);
     76e:	67 e5       	ldi	r22, 0x57	; 87
     770:	74 e4       	ldi	r23, 0x44	; 68
     772:	ce 01       	movw	r24, r28
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
}

void writeEEPROM(char * data, int memLocation, int memBytes) {
    uint16_t marker = 0x4457; // "DW" in ascii
    eeprom_update_block((const void*) data, (void*) (memLocation + 2), (memBytes - 2));
    eeprom_update_word((uint16_t*) memLocation, marker);
     778:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__eeupd_word_m328>

0000077c <clearEEPROM>:
}

void clearEEPROM(int memLocation) {
    uint16_t marker = 0x0000; // blank it out
    eeprom_update_word((uint16_t*) memLocation, marker);
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__eeupd_word_m328>

00000784 <clockInit>:

// initialize the clock

void clockInit(void) {
    // Set CTC mode (clear timer on compare)
    TCCR1A = 0;
     784:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = (1 << WGM12);
     788:	88 e0       	ldi	r24, 0x08	; 8
     78a:	80 93 81 00 	sts	0x0081, r24
    OCR1A = TIMER_RESET;
     78e:	10 92 89 00 	sts	0x0089, r1
     792:	10 92 88 00 	sts	0x0088, r1
    TIMSK1 = (1 << OCIE1A); // set interrupt
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	80 93 6f 00 	sts	0x006F, r24
     79c:	08 95       	ret

0000079e <startClock>:
}

// start the clock

void startClock(void) {
    TCNT1 = 65535;
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	9f ef       	ldi	r25, 0xFF	; 255
     7a2:	90 93 85 00 	sts	0x0085, r25
     7a6:	80 93 84 00 	sts	0x0084, r24
    TCCR1B |= TIMER_CLOCK_SEL;
     7aa:	e1 e8       	ldi	r30, 0x81	; 129
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	85 60       	ori	r24, 0x05	; 5
     7b2:	80 83       	st	Z, r24
     7b4:	08 95       	ret

000007b6 <stopClock>:
}

void stopClock(void) {
    TCCR1B &= ~(TIMER_CLOCK_SEL);
     7b6:	e1 e8       	ldi	r30, 0x81	; 129
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	8a 7f       	andi	r24, 0xFA	; 250
     7be:	80 83       	st	Z, r24
     7c0:	08 95       	ret

000007c2 <getWeekday>:
}

// returns the weekday - sunday = 0

int getWeekday(int year, int month, int day) {
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	fb 01       	movw	r30, r22
     7c8:	ea 01       	movw	r28, r20
    int adjustment, mm, yy;

    adjustment = (14 - month) / 12; // Jan is 13, feb is 14 in calculation
     7ca:	8e e0       	ldi	r24, 0x0E	; 14
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	86 1b       	sub	r24, r22
     7d0:	97 0b       	sbc	r25, r23
     7d2:	6c e0       	ldi	r22, 0x0C	; 12
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <__divmodhi4>
    mm = month + 12 * adjustment - 2;
    yy = globalYear - adjustment;
     7da:	20 91 fe 02 	lds	r18, 0x02FE
     7de:	30 91 ff 02 	lds	r19, 0x02FF
     7e2:	26 1b       	sub	r18, r22
     7e4:	37 0b       	sbc	r19, r23

int getWeekday(int year, int month, int day) {
    int adjustment, mm, yy;

    adjustment = (14 - month) / 12; // Jan is 13, feb is 14 in calculation
    mm = month + 12 * adjustment - 2;
     7e6:	8c e0       	ldi	r24, 0x0C	; 12
     7e8:	86 9f       	mul	r24, r22
     7ea:	a0 01       	movw	r20, r0
     7ec:	87 9f       	mul	r24, r23
     7ee:	50 0d       	add	r21, r0
     7f0:	11 24       	eor	r1, r1
     7f2:	4e 0f       	add	r20, r30
     7f4:	5f 1f       	adc	r21, r31
     7f6:	42 50       	subi	r20, 0x02	; 2
     7f8:	51 09       	sbc	r21, r1
    yy = globalYear - adjustment;
    return ((day + (13 * mm - 1) / 5 + yy + yy / 4 - yy / 100 + yy / 400) % 7);
     7fa:	6d e0       	ldi	r22, 0x0D	; 13
     7fc:	64 9f       	mul	r22, r20
     7fe:	c0 01       	movw	r24, r0
     800:	65 9f       	mul	r22, r21
     802:	90 0d       	add	r25, r0
     804:	11 24       	eor	r1, r1
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	65 e0       	ldi	r22, 0x05	; 5
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <__divmodhi4>
     810:	c6 0f       	add	r28, r22
     812:	d7 1f       	adc	r29, r23
     814:	c2 0f       	add	r28, r18
     816:	d3 1f       	adc	r29, r19
     818:	f9 01       	movw	r30, r18
     81a:	37 fd       	sbrc	r19, 7
     81c:	33 96       	adiw	r30, 0x03	; 3
     81e:	f5 95       	asr	r31
     820:	e7 95       	ror	r30
     822:	f5 95       	asr	r31
     824:	e7 95       	ror	r30
     826:	ec 0f       	add	r30, r28
     828:	fd 1f       	adc	r31, r29
     82a:	c9 01       	movw	r24, r18
     82c:	6c e9       	ldi	r22, 0x9C	; 156
     82e:	7f ef       	ldi	r23, 0xFF	; 255
     830:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <__divmodhi4>
     834:	e6 0f       	add	r30, r22
     836:	f7 1f       	adc	r31, r23
     838:	c9 01       	movw	r24, r18
     83a:	60 e9       	ldi	r22, 0x90	; 144
     83c:	71 e0       	ldi	r23, 0x01	; 1
     83e:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <__divmodhi4>
     842:	e6 0f       	add	r30, r22
     844:	f7 1f       	adc	r31, r23
     846:	cf 01       	movw	r24, r30
     848:	67 e0       	ldi	r22, 0x07	; 7
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <__divmodhi4>
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <getDayofYear>:

// returns the day of the year (1 - 365 or 366)

int getDayofYear(int year, int month, int day) {
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	68 97       	sbiw	r28, 0x18	; 24
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
    int months[12] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30};
     86a:	28 e1       	ldi	r18, 0x18	; 24
     86c:	e3 e2       	ldi	r30, 0x23	; 35
     86e:	f1 e0       	ldi	r31, 0x01	; 1
     870:	de 01       	movw	r26, r28
     872:	11 96       	adiw	r26, 0x01	; 1
     874:	01 90       	ld	r0, Z+
     876:	0d 92       	st	X+, r0
     878:	2a 95       	dec	r18
     87a:	e1 f7       	brne	.-8      	; 0x874 <getDayofYear+0x1e>
    int x = 0;
    // adjust feb for leap year
    if ((year % 4) == 0)
     87c:	83 70       	andi	r24, 0x03	; 3
     87e:	99 27       	eor	r25, r25
     880:	89 2b       	or	r24, r25
     882:	21 f4       	brne	.+8      	; 0x88c <getDayofYear+0x36>
        months[3] = 29;
     884:	8d e1       	ldi	r24, 0x1D	; 29
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	98 87       	std	Y+8, r25	; 0x08
     88a:	8f 83       	std	Y+7, r24	; 0x07
     88c:	fe 01       	movw	r30, r28
     88e:	31 96       	adiw	r30, 0x01	; 1
    // start with the day of the month, then add amounts for each month
    int doy = day;
     890:	9a 01       	movw	r18, r20
    for (x = 0; x < month; x++) {
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	05 c0       	rjmp	.+10     	; 0x8a2 <getDayofYear+0x4c>
        doy += months[x];
     898:	41 91       	ld	r20, Z+
     89a:	51 91       	ld	r21, Z+
     89c:	24 0f       	add	r18, r20
     89e:	35 1f       	adc	r19, r21
    // adjust feb for leap year
    if ((year % 4) == 0)
        months[3] = 29;
    // start with the day of the month, then add amounts for each month
    int doy = day;
    for (x = 0; x < month; x++) {
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	86 17       	cp	r24, r22
     8a4:	97 07       	cpc	r25, r23
     8a6:	c4 f3       	brlt	.-16     	; 0x898 <getDayofYear+0x42>
        doy += months[x];
    }
    return doy;
}
     8a8:	c9 01       	movw	r24, r18
     8aa:	68 96       	adiw	r28, 0x18	; 24
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <checkDaylightSavings>:

// Decide if this 3:00am is daylight savings and adjust accordingly

void checkDaylightSavings(void) {
    // have we adjusted for daylight savings?
    if (wasDaylightSavings == 1)
     8bc:	80 91 94 04 	lds	r24, 0x0494
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	e9 f1       	breq	.+122    	; 0x93e <__stack+0x3f>
        return;
    if (globalMonth == daylightSavings[0][0] && globalDay == daylightSavings[0][1]) {
     8c4:	80 91 fc 02 	lds	r24, 0x02FC
     8c8:	90 91 fd 02 	lds	r25, 0x02FD
     8cc:	20 91 5c 04 	lds	r18, 0x045C
     8d0:	30 91 5d 04 	lds	r19, 0x045D
     8d4:	82 17       	cp	r24, r18
     8d6:	93 07       	cpc	r25, r19
     8d8:	a1 f4       	brne	.+40     	; 0x902 <__stack+0x3>
     8da:	40 91 fa 02 	lds	r20, 0x02FA
     8de:	50 91 fb 02 	lds	r21, 0x02FB
     8e2:	20 91 5e 04 	lds	r18, 0x045E
     8e6:	30 91 5f 04 	lds	r19, 0x045F
     8ea:	42 17       	cp	r20, r18
     8ec:	53 07       	cpc	r21, r19
     8ee:	49 f4       	brne	.+18     	; 0x902 <__stack+0x3>
        wasDaylightSavings = 1;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 94 04 	sts	0x0494, r24
        globalHour++;
     8f6:	80 91 f8 02 	lds	r24, 0x02F8
     8fa:	90 91 f9 02 	lds	r25, 0x02F9
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	1a c0       	rjmp	.+52     	; 0x936 <__stack+0x37>
    } else if (globalMonth == daylightSavings[1][0] && globalDay == daylightSavings[1][1]) {
     902:	20 91 60 04 	lds	r18, 0x0460
     906:	30 91 61 04 	lds	r19, 0x0461
     90a:	82 17       	cp	r24, r18
     90c:	93 07       	cpc	r25, r19
     90e:	b9 f4       	brne	.+46     	; 0x93e <__stack+0x3f>
     910:	20 91 fa 02 	lds	r18, 0x02FA
     914:	30 91 fb 02 	lds	r19, 0x02FB
     918:	80 91 62 04 	lds	r24, 0x0462
     91c:	90 91 63 04 	lds	r25, 0x0463
     920:	28 17       	cp	r18, r24
     922:	39 07       	cpc	r19, r25
     924:	61 f4       	brne	.+24     	; 0x93e <__stack+0x3f>
        wasDaylightSavings = 1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 94 04 	sts	0x0494, r24
        globalHour--;
     92c:	80 91 f8 02 	lds	r24, 0x02F8
     930:	90 91 f9 02 	lds	r25, 0x02F9
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	90 93 f9 02 	sts	0x02F9, r25
     93a:	80 93 f8 02 	sts	0x02F8, r24
     93e:	08 95       	ret

00000940 <advanceDay>:
// Advance a day in the calendar. 

void advanceDay(void) {
    int x = 0;
    // Reset the daylight savings for next time
    wasDaylightSavings = 0;
     940:	10 92 94 04 	sts	0x0494, r1
    // start with dow
    dow++;
     944:	80 91 f2 02 	lds	r24, 0x02F2
     948:	90 91 f3 02 	lds	r25, 0x02F3
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	90 93 f3 02 	sts	0x02F3, r25
     952:	80 93 f2 02 	sts	0x02F2, r24
    if (dow == 7) {
     956:	07 97       	sbiw	r24, 0x07	; 7
     958:	71 f0       	breq	.+28     	; 0x976 <advanceDay+0x36>
            if (switchStatus[x] >= 604800)
                switchStatus[x] -= 604800;
        }
    }
    // then the day
    globalDay++;
     95a:	20 91 fa 02 	lds	r18, 0x02FA
     95e:	30 91 fb 02 	lds	r19, 0x02FB
     962:	2f 5f       	subi	r18, 0xFF	; 255
     964:	3f 4f       	sbci	r19, 0xFF	; 255
     966:	30 93 fb 02 	sts	0x02FB, r19
     96a:	20 93 fa 02 	sts	0x02FA, r18
    // If we aren't advancing a month just move on
    if (globalDay <= 28) {
     96e:	2d 31       	cpi	r18, 0x1D	; 29
     970:	31 05       	cpc	r19, r1
     972:	40 f5       	brcc	.+80     	; 0x9c4 <advanceDay+0x84>
     974:	08 95       	ret
    wasDaylightSavings = 0;
    // start with dow
    dow++;
    if (dow == 7) {
        // reset it to Sunday
        dow = 0;
     976:	10 92 f3 02 	sts	0x02F3, r1
     97a:	10 92 f2 02 	sts	0x02F2, r1
        weeklySeconds = 0;
     97e:	10 92 aa 03 	sts	0x03AA, r1
     982:	10 92 ab 03 	sts	0x03AB, r1
     986:	10 92 ac 03 	sts	0x03AC, r1
     98a:	10 92 ad 03 	sts	0x03AD, r1
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f3 e0       	ldi	r31, 0x03	; 3
        // switchStatus might be more than a week (604,800 seconds)
        for (x = 0; x < NUM_SWITCHES; x++) {
            if (switchStatus[x] >= 604800)
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	a2 81       	ldd	r26, Z+2	; 0x02
     998:	b3 81       	ldd	r27, Z+3	; 0x03
     99a:	80 38       	cpi	r24, 0x80	; 128
     99c:	2a e3       	ldi	r18, 0x3A	; 58
     99e:	92 07       	cpc	r25, r18
     9a0:	29 e0       	ldi	r18, 0x09	; 9
     9a2:	a2 07       	cpc	r26, r18
     9a4:	b1 05       	cpc	r27, r1
     9a6:	40 f0       	brcs	.+16     	; 0x9b8 <advanceDay+0x78>
                switchStatus[x] -= 604800;
     9a8:	80 58       	subi	r24, 0x80	; 128
     9aa:	9a 43       	sbci	r25, 0x3A	; 58
     9ac:	a9 40       	sbci	r26, 0x09	; 9
     9ae:	b1 09       	sbc	r27, r1
     9b0:	80 83       	st	Z, r24
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	a2 83       	std	Z+2, r26	; 0x02
     9b6:	b3 83       	std	Z+3, r27	; 0x03
     9b8:	34 96       	adiw	r30, 0x04	; 4
    if (dow == 7) {
        // reset it to Sunday
        dow = 0;
        weeklySeconds = 0;
        // switchStatus might be more than a week (604,800 seconds)
        for (x = 0; x < NUM_SWITCHES; x++) {
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	e0 34       	cpi	r30, 0x40	; 64
     9be:	f8 07       	cpc	r31, r24
     9c0:	41 f7       	brne	.-48     	; 0x992 <advanceDay+0x52>
     9c2:	cb cf       	rjmp	.-106    	; 0x95a <advanceDay+0x1a>
    // If we aren't advancing a month just move on
    if (globalDay <= 28) {
        return;
    }
    // possibly advancing a month
    switch (globalMonth) {
     9c4:	80 91 fc 02 	lds	r24, 0x02FC
     9c8:	90 91 fd 02 	lds	r25, 0x02FD
     9cc:	86 30       	cpi	r24, 0x06	; 6
     9ce:	91 05       	cpc	r25, r1
     9d0:	f9 f0       	breq	.+62     	; 0xa10 <advanceDay+0xd0>
     9d2:	98 f4       	brcc	.+38     	; 0x9fa <advanceDay+0xba>
     9d4:	83 30       	cpi	r24, 0x03	; 3
     9d6:	91 05       	cpc	r25, r1
     9d8:	f9 f0       	breq	.+62     	; 0xa18 <advanceDay+0xd8>
     9da:	38 f4       	brcc	.+14     	; 0x9ea <advanceDay+0xaa>
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	91 05       	cpc	r25, r1
     9e0:	d9 f0       	breq	.+54     	; 0xa18 <advanceDay+0xd8>
     9e2:	02 97       	sbiw	r24, 0x02	; 2
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <advanceDay+0xa8>
     9e6:	51 c0       	rjmp	.+162    	; 0xa8a <advanceDay+0x14a>
     9e8:	39 c0       	rjmp	.+114    	; 0xa5c <advanceDay+0x11c>
     9ea:	84 30       	cpi	r24, 0x04	; 4
     9ec:	91 05       	cpc	r25, r1
     9ee:	81 f0       	breq	.+32     	; 0xa10 <advanceDay+0xd0>
     9f0:	85 30       	cpi	r24, 0x05	; 5
     9f2:	91 05       	cpc	r25, r1
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <advanceDay+0xb8>
     9f6:	49 c0       	rjmp	.+146    	; 0xa8a <advanceDay+0x14a>
     9f8:	0f c0       	rjmp	.+30     	; 0xa18 <advanceDay+0xd8>
     9fa:	89 30       	cpi	r24, 0x09	; 9
     9fc:	91 05       	cpc	r25, r1
     9fe:	41 f0       	breq	.+16     	; 0xa10 <advanceDay+0xd0>
     a00:	58 f0       	brcs	.+22     	; 0xa18 <advanceDay+0xd8>
     a02:	8b 30       	cpi	r24, 0x0B	; 11
     a04:	91 05       	cpc	r25, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <advanceDay+0xd0>
     a08:	38 f0       	brcs	.+14     	; 0xa18 <advanceDay+0xd8>
     a0a:	0c 97       	sbiw	r24, 0x0c	; 12
     a0c:	f1 f5       	brne	.+124    	; 0xa8a <advanceDay+0x14a>
     a0e:	0f c0       	rjmp	.+30     	; 0xa2e <advanceDay+0xee>
            // 30 days have september, april, june and november
        case 4:
        case 6:
        case 9:
        case 11:
            if (globalDay > 30) {
     a10:	2f 31       	cpi	r18, 0x1F	; 31
     a12:	31 05       	cpc	r19, r1
     a14:	d0 f1       	brcs	.+116    	; 0xa8a <advanceDay+0x14a>
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <advanceDay+0xde>
        case 3:
        case 5:
        case 7:
        case 8:
        case 10:
            if (globalDay > 31) {
     a18:	20 32       	cpi	r18, 0x20	; 32
     a1a:	31 05       	cpc	r19, r1
     a1c:	b0 f1       	brcs	.+108    	; 0xa8a <advanceDay+0x14a>
                globalDay = 1;
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	30 93 fb 02 	sts	0x02FB, r19
     a26:	20 93 fa 02 	sts	0x02FA, r18
                globalMonth++;
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	2a c0       	rjmp	.+84     	; 0xa82 <advanceDay+0x142>
            } else {
                return;
            }
            break;
        case 12:
            if (globalDay > 31) {
     a2e:	20 32       	cpi	r18, 0x20	; 32
     a30:	31 05       	cpc	r19, r1
     a32:	58 f1       	brcs	.+86     	; 0xa8a <advanceDay+0x14a>
                // happy new year
                globalDay = 1;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	90 93 fb 02 	sts	0x02FB, r25
     a3c:	80 93 fa 02 	sts	0x02FA, r24
                globalMonth = 1;
     a40:	90 93 fd 02 	sts	0x02FD, r25
     a44:	80 93 fc 02 	sts	0x02FC, r24
                globalYear++;
     a48:	80 91 fe 02 	lds	r24, 0x02FE
     a4c:	90 91 ff 02 	lds	r25, 0x02FF
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	90 93 ff 02 	sts	0x02FF, r25
     a56:	80 93 fe 02 	sts	0x02FE, r24
            } else {
                return;
            }
            break;
     a5a:	08 95       	ret
        case 2:
            // leap year?
            if (globalYear % 4 == 0) {
     a5c:	80 91 fe 02 	lds	r24, 0x02FE
     a60:	90 91 ff 02 	lds	r25, 0x02FF
     a64:	83 70       	andi	r24, 0x03	; 3
     a66:	99 27       	eor	r25, r25
     a68:	89 2b       	or	r24, r25
     a6a:	19 f4       	brne	.+6      	; 0xa72 <advanceDay+0x132>
                // yes
                if (globalDay > 29) {
     a6c:	2d 31       	cpi	r18, 0x1D	; 29
     a6e:	31 05       	cpc	r19, r1
     a70:	61 f0       	breq	.+24     	; 0xa8a <advanceDay+0x14a>
                } else {
                    return;
                }
            } else {
                if (globalDay > 28) {
                    globalDay = 1;
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 fb 02 	sts	0x02FB, r25
     a7a:	80 93 fa 02 	sts	0x02FA, r24
                    globalMonth++;
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	90 93 fd 02 	sts	0x02FD, r25
     a86:	80 93 fc 02 	sts	0x02FC, r24
     a8a:	08 95       	ret

00000a8c <timerCheck>:
    return;
}

// runs every second.  Checks to see if we need to turn something on or off

void timerCheck(void) {
     a8c:	6f 92       	push	r6
     a8e:	7f 92       	push	r7
     a90:	8f 92       	push	r8
     a92:	9f 92       	push	r9
     a94:	af 92       	push	r10
     a96:	bf 92       	push	r11
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
    int x = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
        // see if something should turn off
        if ((switchStatus[x] > 0) && (switchStatus[x] < weeklySeconds)) {
     aa8:	40 91 aa 03 	lds	r20, 0x03AA
     aac:	50 91 ab 03 	lds	r21, 0x03AB
     ab0:	60 91 ac 03 	lds	r22, 0x03AC
     ab4:	70 91 ad 03 	lds	r23, 0x03AD
     ab8:	20 91 81 03 	lds	r18, 0x0381
     abc:	e0 e0       	ldi	r30, 0x00	; 0
     abe:	f3 e0       	ldi	r31, 0x03	; 3
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	a2 81       	ldd	r26, Z+2	; 0x02
     ac6:	b3 81       	ldd	r27, Z+3	; 0x03
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	a1 05       	cpc	r26, r1
     acc:	b1 05       	cpc	r27, r1
     ace:	51 f0       	breq	.+20     	; 0xae4 <timerCheck+0x58>
     ad0:	84 17       	cp	r24, r20
     ad2:	95 07       	cpc	r25, r21
     ad4:	a6 07       	cpc	r26, r22
     ad6:	b7 07       	cpc	r27, r23
     ad8:	28 f4       	brcc	.+10     	; 0xae4 <timerCheck+0x58>
            switchChanged = 1;
            switchStatus[x] = 0;
     ada:	10 82       	st	Z, r1
     adc:	11 82       	std	Z+1, r1	; 0x01
     ade:	12 82       	std	Z+2, r1	; 0x02
     ae0:	13 82       	std	Z+3, r1	; 0x03
void timerCheck(void) {
    int x = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
        // see if something should turn off
        if ((switchStatus[x] > 0) && (switchStatus[x] < weeklySeconds)) {
            switchChanged = 1;
     ae2:	21 e0       	ldi	r18, 0x01	; 1
     ae4:	34 96       	adiw	r30, 0x04	; 4

// runs every second.  Checks to see if we need to turn something on or off

void timerCheck(void) {
    int x = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	e0 34       	cpi	r30, 0x40	; 64
     aea:	f8 07       	cpc	r31, r24
     aec:	49 f7       	brne	.-46     	; 0xac0 <timerCheck+0x34>
     aee:	20 93 81 03 	sts	0x0381, r18
     af2:	c4 ec       	ldi	r28, 0xC4	; 196
     af4:	d3 e0       	ldi	r29, 0x03	; 3
     af6:	00 e0       	ldi	r16, 0x00	; 0
     af8:	10 e0       	ldi	r17, 0x00	; 0
    for (x = 0; x < MAX_PROGRAM; x++) {
        // check if there is a valid program
        if (weeklyProgram[x][0] != 255 && weeklyProgram[x][1] != 255) { // yes
            // see if it goes today
            // if dow = 0 (sunday) the program stores this as 0x40 then down from there
            today = (0x40 >> dow);
     afa:	30 e4       	ldi	r19, 0x40	; 64
     afc:	c3 2e       	mov	r12, r19
     afe:	d1 2c       	mov	r13, r1
    return;
}

// runs every second.  Checks to see if we need to turn something on or off

void timerCheck(void) {
     b00:	fe 01       	movw	r30, r28
     b02:	34 97       	sbiw	r30, 0x04	; 4
    long time;
    int today = 0;
    int duration = 0;
    for (x = 0; x < MAX_PROGRAM; x++) {
        // check if there is a valid program
        if (weeklyProgram[x][0] != 255 && weeklyProgram[x][1] != 255) { // yes
     b04:	80 81       	ld	r24, Z
     b06:	8f 3f       	cpi	r24, 0xFF	; 255
     b08:	09 f4       	brne	.+2      	; 0xb0c <timerCheck+0x80>
     b0a:	5e c0       	rjmp	.+188    	; 0xbc8 <timerCheck+0x13c>
    return;
}

// runs every second.  Checks to see if we need to turn something on or off

void timerCheck(void) {
     b0c:	fe 01       	movw	r30, r28
     b0e:	33 97       	sbiw	r30, 0x03	; 3
    long time;
    int today = 0;
    int duration = 0;
    for (x = 0; x < MAX_PROGRAM; x++) {
        // check if there is a valid program
        if (weeklyProgram[x][0] != 255 && weeklyProgram[x][1] != 255) { // yes
     b10:	20 81       	ld	r18, Z
     b12:	2f 3f       	cpi	r18, 0xFF	; 255
     b14:	09 f4       	brne	.+2      	; 0xb18 <timerCheck+0x8c>
     b16:	58 c0       	rjmp	.+176    	; 0xbc8 <timerCheck+0x13c>
            // see if it goes today
            // if dow = 0 (sunday) the program stores this as 0x40 then down from there
            today = (0x40 >> dow);
     b18:	70 90 f2 02 	lds	r7, 0x02F2
     b1c:	60 90 f3 02 	lds	r6, 0x02F3
            // k is today the day?
            if (weeklyProgram[x][0] & today) {
     b20:	90 e0       	ldi	r25, 0x00	; 0
    for (x = 0; x < MAX_PROGRAM; x++) {
        // check if there is a valid program
        if (weeklyProgram[x][0] != 255 && weeklyProgram[x][1] != 255) { // yes
            // see if it goes today
            // if dow = 0 (sunday) the program stores this as 0x40 then down from there
            today = (0x40 >> dow);
     b22:	a6 01       	movw	r20, r12
     b24:	07 2c       	mov	r0, r7
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <timerCheck+0xa0>
     b28:	55 95       	asr	r21
     b2a:	47 95       	ror	r20
     b2c:	0a 94       	dec	r0
     b2e:	e2 f7       	brpl	.-8      	; 0xb28 <timerCheck+0x9c>
            // k is today the day?
            if (weeklyProgram[x][0] & today) {
     b30:	84 23       	and	r24, r20
     b32:	95 23       	and	r25, r21
     b34:	89 2b       	or	r24, r25
     b36:	09 f4       	brne	.+2      	; 0xb3a <timerCheck+0xae>
     b38:	47 c0       	rjmp	.+142    	; 0xbc8 <timerCheck+0x13c>

                // yes we run today
                time = weeklyProgram[x][1];
     b3a:	82 2f       	mov	r24, r18
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
                time <<= 8;
     b42:	22 27       	eor	r18, r18
     b44:	38 2f       	mov	r19, r24
     b46:	49 2f       	mov	r20, r25
     b48:	5a 2f       	mov	r21, r26
    return;
}

// runs every second.  Checks to see if we need to turn something on or off

void timerCheck(void) {
     b4a:	fe 01       	movw	r30, r28
     b4c:	32 97       	sbiw	r30, 0x02	; 2
            if (weeklyProgram[x][0] & today) {

                // yes we run today
                time = weeklyProgram[x][1];
                time <<= 8;
                time |= weeklyProgram[x][2];
     b4e:	80 81       	ld	r24, Z
     b50:	28 2b       	or	r18, r24
                // weeklyProgram is stored in minutes
                time *= 60;
     b52:	ac e3       	ldi	r26, 0x3C	; 60
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <__muluhisi3>
     b5a:	4b 01       	movw	r8, r22
     b5c:	5c 01       	movw	r10, r24
    return;
}

// runs every second.  Checks to see if we need to turn something on or off

void timerCheck(void) {
     b5e:	fe 01       	movw	r30, r28
     b60:	31 97       	sbiw	r30, 0x01	; 1
                time = weeklyProgram[x][1];
                time <<= 8;
                time |= weeklyProgram[x][2];
                // weeklyProgram is stored in minutes
                time *= 60;
                duration = weeklyProgram[x][3];
     b62:	f0 81       	ld	r31, Z
                duration <<= 8;
                duration |= weeklyProgram[x][4];
     b64:	e8 81       	ld	r30, Y
                time += (dow * 86400); //seconds in day
     b66:	a7 2d       	mov	r26, r7
     b68:	b6 2d       	mov	r27, r6
     b6a:	20 e8       	ldi	r18, 0x80	; 128
     b6c:	31 e5       	ldi	r19, 0x51	; 81
     b6e:	41 e0       	ldi	r20, 0x01	; 1
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <__muluhisi3>
     b76:	86 0e       	add	r8, r22
     b78:	97 1e       	adc	r9, r23
     b7a:	a8 1e       	adc	r10, r24
     b7c:	b9 1e       	adc	r11, r25
                // check if we are between start & stop time
                if ((weeklySeconds >= time) && (weeklySeconds < (time + duration))) {
     b7e:	40 91 aa 03 	lds	r20, 0x03AA
     b82:	50 91 ab 03 	lds	r21, 0x03AB
     b86:	60 91 ac 03 	lds	r22, 0x03AC
     b8a:	70 91 ad 03 	lds	r23, 0x03AD
     b8e:	48 15       	cp	r20, r8
     b90:	59 05       	cpc	r21, r9
     b92:	6a 05       	cpc	r22, r10
     b94:	7b 05       	cpc	r23, r11
     b96:	c0 f0       	brcs	.+48     	; 0xbc8 <timerCheck+0x13c>
                time <<= 8;
                time |= weeklyProgram[x][2];
                // weeklyProgram is stored in minutes
                time *= 60;
                duration = weeklyProgram[x][3];
                duration <<= 8;
     b98:	ff 2e       	mov	r15, r31
     b9a:	e1 2c       	mov	r14, r1
                duration |= weeklyProgram[x][4];
     b9c:	c7 01       	movw	r24, r14
     b9e:	8e 2b       	or	r24, r30
                time += (dow * 86400); //seconds in day
                // check if we are between start & stop time
                if ((weeklySeconds >= time) && (weeklySeconds < (time + duration))) {
     ba0:	aa 27       	eor	r26, r26
     ba2:	97 fd       	sbrc	r25, 7
     ba4:	a0 95       	com	r26
     ba6:	ba 2f       	mov	r27, r26
     ba8:	88 0d       	add	r24, r8
     baa:	99 1d       	adc	r25, r9
     bac:	aa 1d       	adc	r26, r10
     bae:	bb 1d       	adc	r27, r11
     bb0:	48 17       	cp	r20, r24
     bb2:	59 07       	cpc	r21, r25
     bb4:	6a 07       	cpc	r22, r26
     bb6:	7b 07       	cpc	r23, r27
     bb8:	38 f4       	brcc	.+14     	; 0xbc8 <timerCheck+0x13c>
                    // feed time to it so the end time won't change
                    startTheProgram(x, 0, time);
     bba:	a5 01       	movw	r20, r10
     bbc:	94 01       	movw	r18, r8
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	c8 01       	movw	r24, r16
     bc4:	0e 94 02 03 	call	0x604	; 0x604 <startTheProgram>
    // DssddSSSSP
    // 0123456789
    long time;
    int today = 0;
    int duration = 0;
    for (x = 0; x < MAX_PROGRAM; x++) {
     bc8:	0f 5f       	subi	r16, 0xFF	; 255
     bca:	1f 4f       	sbci	r17, 0xFF	; 255
     bcc:	2a 96       	adiw	r28, 0x0a	; 10
     bce:	0a 30       	cpi	r16, 0x0A	; 10
     bd0:	11 05       	cpc	r17, r1
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <timerCheck+0x14a>
     bd4:	95 cf       	rjmp	.-214    	; 0xb00 <timerCheck+0x74>
                    startTheProgram(x, 0, time);
                }
            }
        }
    }
}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	bf 90       	pop	r11
     be8:	af 90       	pop	r10
     bea:	9f 90       	pop	r9
     bec:	8f 90       	pop	r8
     bee:	7f 90       	pop	r7
     bf0:	6f 90       	pop	r6
     bf2:	08 95       	ret

00000bf4 <switchOnOff>:

// iterate through the switches and turn them on or off

void switchOnOff(void) {
     bf4:	7f 92       	push	r7
     bf6:	8f 92       	push	r8
     bf8:	9f 92       	push	r9
     bfa:	af 92       	push	r10
     bfc:	bf 92       	push	r11
     bfe:	cf 92       	push	r12
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <switchOnOff+0x1c>
     c10:	1f 92       	push	r1
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	10 e4       	ldi	r17, 0x40	; 64
     c18:	81 2e       	mov	r8, r17
     c1a:	13 e0       	ldi	r17, 0x03	; 3
     c1c:	91 2e       	mov	r9, r17
     c1e:	00 e0       	ldi	r16, 0x00	; 0
     c20:	c0 2e       	mov	r12, r16
     c22:	03 e0       	ldi	r16, 0x03	; 3
     c24:	d0 2e       	mov	r13, r16
    char port[1];
    char pin[1];
    int realPin = 0;
    int x = 0;
    char direction[1];
    volatile unsigned char *thisPort = 0;
     c26:	00 e0       	ldi	r16, 0x00	; 0
     c28:	10 e0       	ldi	r17, 0x00	; 0
    for (x = 0; x < NUM_SWITCHES; x++) {
     c2a:	e1 2c       	mov	r14, r1
     c2c:	f1 2c       	mov	r15, r1
            } else {
                // turning it on
                if (direction[0] == 0) {
                    *thisPort &= ~(1 << realPin);
                } else {
                    *thisPort |= (1 << realPin);
     c2e:	aa 24       	eor	r10, r10
     c30:	a3 94       	inc	r10
     c32:	b1 2c       	mov	r11, r1
                    } else if (switchStuff[x] == 212) {
                        // change the brightness
                        bright = switchBright[x];
                    } else {
                        // get the hue cycle going
                        runHue = 1;
     c34:	77 24       	eor	r7, r7
     c36:	73 94       	inc	r7
    int x = 0;
    char direction[1];
    volatile unsigned char *thisPort = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
        // see if a switch is set up
        if (switchStuff[x] != 255) {
     c38:	f4 01       	movw	r30, r8
     c3a:	21 91       	ld	r18, Z+
     c3c:	4f 01       	movw	r8, r30
     c3e:	2f 3f       	cpi	r18, 0xFF	; 255
     c40:	09 f4       	brne	.+2      	; 0xc44 <switchOnOff+0x50>
     c42:	bb c0       	rjmp	.+374    	; 0xdba <switchOnOff+0x1c6>
            // find out if this is pwm
            if (switchStuff[x] >= 200 && switchStuff[x] <= 220) {
     c44:	82 2f       	mov	r24, r18
     c46:	88 5c       	subi	r24, 0xC8	; 200
     c48:	85 31       	cpi	r24, 0x15	; 21
     c4a:	08 f0       	brcs	.+2      	; 0xc4e <switchOnOff+0x5a>
     c4c:	76 c0       	rjmp	.+236    	; 0xd3a <switchOnOff+0x146>
                // are we turning it on or off
                if (switchStatus[x] == 0) {
     c4e:	f6 01       	movw	r30, r12
     c50:	80 81       	ld	r24, Z
     c52:	91 81       	ldd	r25, Z+1	; 0x01
     c54:	a2 81       	ldd	r26, Z+2	; 0x02
     c56:	b3 81       	ldd	r27, Z+3	; 0x03
     c58:	89 2b       	or	r24, r25
     c5a:	8a 2b       	or	r24, r26
     c5c:	8b 2b       	or	r24, r27
     c5e:	f9 f4       	brne	.+62     	; 0xc9e <switchOnOff+0xaa>
                    // turning it off
                    if (switchStuff[x] == 200) {
     c60:	28 3c       	cpi	r18, 0xC8	; 200
     c62:	29 f4       	brne	.+10     	; 0xc6e <switchOnOff+0x7a>
                        Red = 0;
     c64:	10 92 b4 00 	sts	0x00B4, r1
                        Green = 0;
     c68:	18 bc       	out	0x28, r1	; 40
                        Blue = 0;
     c6a:	17 bc       	out	0x27, r1	; 39
     c6c:	a6 c0       	rjmp	.+332    	; 0xdba <switchOnOff+0x1c6>
                    } else if (switchStuff[x] == 201) {
     c6e:	29 3c       	cpi	r18, 0xC9	; 201
     c70:	39 f4       	brne	.+14     	; 0xc80 <switchOnOff+0x8c>
                        Red = 0;
     c72:	10 92 b4 00 	sts	0x00B4, r1
                        Green = 0;
     c76:	18 bc       	out	0x28, r1	; 40
                        Blue = 0;
     c78:	17 bc       	out	0x27, r1	; 39
                        runHue = 0;
     c7a:	10 92 82 03 	sts	0x0382, r1
     c7e:	9d c0       	rjmp	.+314    	; 0xdba <switchOnOff+0x1c6>
                    } else if (switchStuff[x] == 202) {
     c80:	2a 3c       	cpi	r18, 0xCA	; 202
     c82:	39 f4       	brne	.+14     	; 0xc92 <switchOnOff+0x9e>
                        Red = 0;
     c84:	10 92 b4 00 	sts	0x00B4, r1
                        Green = 0;
     c88:	18 bc       	out	0x28, r1	; 40
                        Blue = 0;
     c8a:	17 bc       	out	0x27, r1	; 39
                        runColorChanges = 0;
     c8c:	10 92 83 03 	sts	0x0383, r1
     c90:	94 c0       	rjmp	.+296    	; 0xdba <switchOnOff+0x1c6>
                    } else if (switchStuff[x] == 212) {
     c92:	24 3d       	cpi	r18, 0xD4	; 212
     c94:	09 f0       	breq	.+2      	; 0xc98 <switchOnOff+0xa4>
     c96:	91 c0       	rjmp	.+290    	; 0xdba <switchOnOff+0x1c6>
                        bright = oldBright;
     c98:	80 91 15 01 	lds	r24, 0x0115
     c9c:	46 c0       	rjmp	.+140    	; 0xd2a <switchOnOff+0x136>
                    }
                } else {
                    // turn it on
                    // decide if it is a changing hue or static values
                    if (switchStuff[x] == 200) {
     c9e:	28 3c       	cpi	r18, 0xC8	; 200
     ca0:	c9 f5       	brne	.+114    	; 0xd14 <switchOnOff+0x120>
                        // even numbers are static colors;
                        red = pwmValues[0];
                        green = pwmValues[1];
     ca2:	80 91 af 03 	lds	r24, 0x03AF
                        blue = pwmValues[2];
     ca6:	e0 91 b0 03 	lds	r30, 0x03B0
                        red = red * bright / 16;
     caa:	60 91 13 01 	lds	r22, 0x0113
     cae:	70 91 14 01 	lds	r23, 0x0114
                } else {
                    // turn it on
                    // decide if it is a changing hue or static values
                    if (switchStuff[x] == 200) {
                        // even numbers are static colors;
                        red = pwmValues[0];
     cb2:	90 91 ae 03 	lds	r25, 0x03AE
                        green = pwmValues[1];
                        blue = pwmValues[2];
                        red = red * bright / 16;
     cb6:	96 9f       	mul	r25, r22
     cb8:	a0 01       	movw	r20, r0
     cba:	97 9f       	mul	r25, r23
     cbc:	50 0d       	add	r21, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	f4 e0       	ldi	r31, 0x04	; 4
     cc2:	56 95       	lsr	r21
     cc4:	47 95       	ror	r20
     cc6:	fa 95       	dec	r31
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <switchOnOff+0xce>
     cca:	50 93 b2 03 	sts	0x03B2, r21
     cce:	40 93 b1 03 	sts	0x03B1, r20
                        green = green * bright / 16;
     cd2:	86 9f       	mul	r24, r22
     cd4:	90 01       	movw	r18, r0
     cd6:	87 9f       	mul	r24, r23
     cd8:	30 0d       	add	r19, r0
     cda:	11 24       	eor	r1, r1
     cdc:	a4 e0       	ldi	r26, 0x04	; 4
     cde:	36 95       	lsr	r19
     ce0:	27 95       	ror	r18
     ce2:	aa 95       	dec	r26
     ce4:	e1 f7       	brne	.-8      	; 0xcde <switchOnOff+0xea>
     ce6:	30 93 b4 03 	sts	0x03B4, r19
     cea:	20 93 b3 03 	sts	0x03B3, r18
                        blue = blue * bright / 16;
     cee:	e6 9f       	mul	r30, r22
     cf0:	c0 01       	movw	r24, r0
     cf2:	e7 9f       	mul	r30, r23
     cf4:	90 0d       	add	r25, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	b4 e0       	ldi	r27, 0x04	; 4
     cfa:	96 95       	lsr	r25
     cfc:	87 95       	ror	r24
     cfe:	ba 95       	dec	r27
     d00:	e1 f7       	brne	.-8      	; 0xcfa <switchOnOff+0x106>
     d02:	90 93 b6 03 	sts	0x03B6, r25
     d06:	80 93 b5 03 	sts	0x03B5, r24
                        Red = red;
     d0a:	40 93 b4 00 	sts	0x00B4, r20
                        Green = green;
     d0e:	28 bd       	out	0x28, r18	; 40
                        Blue = blue;
     d10:	87 bd       	out	0x27, r24	; 39
     d12:	53 c0       	rjmp	.+166    	; 0xdba <switchOnOff+0x1c6>
                    } else if (switchStuff[x] == 202) {
     d14:	2a 3c       	cpi	r18, 0xCA	; 202
     d16:	19 f4       	brne	.+6      	; 0xd1e <switchOnOff+0x12a>
                        runColorChanges = 1;
     d18:	70 92 83 03 	sts	0x0383, r7
     d1c:	4e c0       	rjmp	.+156    	; 0xdba <switchOnOff+0x1c6>
                    } else if (switchStuff[x] == 212) {
     d1e:	24 3d       	cpi	r18, 0xD4	; 212
     d20:	49 f4       	brne	.+18     	; 0xd34 <switchOnOff+0x140>
    }
}

// iterate through the switches and turn them on or off

void switchOnOff(void) {
     d22:	f7 01       	movw	r30, r14
     d24:	e0 5b       	subi	r30, 0xB0	; 176
     d26:	fc 4f       	sbci	r31, 0xFC	; 252
                        Blue = blue;
                    } else if (switchStuff[x] == 202) {
                        runColorChanges = 1;
                    } else if (switchStuff[x] == 212) {
                        // change the brightness
                        bright = switchBright[x];
     d28:	80 81       	ld	r24, Z
     d2a:	80 93 13 01 	sts	0x0113, r24
     d2e:	10 92 14 01 	sts	0x0114, r1
     d32:	43 c0       	rjmp	.+134    	; 0xdba <switchOnOff+0x1c6>
                    } else {
                        // get the hue cycle going
                        runHue = 1;
     d34:	70 92 82 03 	sts	0x0382, r7
     d38:	40 c0       	rjmp	.+128    	; 0xdba <switchOnOff+0x1c6>
                    }
                }
                continue;
            }
            // switch is set up. Get details
            getPort(x, port, pin, direction);
     d3a:	9e 01       	movw	r18, r28
     d3c:	2f 5f       	subi	r18, 0xFF	; 255
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	ae 01       	movw	r20, r28
     d42:	4e 5f       	subi	r20, 0xFE	; 254
     d44:	5f 4f       	sbci	r21, 0xFF	; 255
     d46:	be 01       	movw	r22, r28
     d48:	6d 5f       	subi	r22, 0xFD	; 253
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	c7 01       	movw	r24, r14
     d4e:	0e 94 65 00 	call	0xca	; 0xca <getPort>
            // yeah pointers and casts and whatevers. this fixes it
            realPin = pin[0];
     d52:	2a 81       	ldd	r18, Y+2	; 0x02
            if (port[0] == 'B')
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	82 34       	cpi	r24, 0x42	; 66
     d58:	29 f0       	breq	.+10     	; 0xd64 <switchOnOff+0x170>
#ifdef PORTA
            else if (port[0] == 'A')
                thisPort = &PORTA;
#endif
#ifdef PORTC
            else if (port[0] == 'C')
     d5a:	83 34       	cpi	r24, 0x43	; 67
     d5c:	31 f0       	breq	.+12     	; 0xd6a <switchOnOff+0x176>
                thisPort = &PORTC;
#endif
#ifdef PORTD
            else if (port[0] == 'D')
     d5e:	84 34       	cpi	r24, 0x44	; 68
     d60:	49 f4       	brne	.+18     	; 0xd74 <switchOnOff+0x180>
     d62:	06 c0       	rjmp	.+12     	; 0xd70 <switchOnOff+0x17c>
            // switch is set up. Get details
            getPort(x, port, pin, direction);
            // yeah pointers and casts and whatevers. this fixes it
            realPin = pin[0];
            if (port[0] == 'B')
                thisPort = &PORTB;
     d64:	05 e2       	ldi	r16, 0x25	; 37
     d66:	10 e0       	ldi	r17, 0x00	; 0
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <switchOnOff+0x180>
            else if (port[0] == 'A')
                thisPort = &PORTA;
#endif
#ifdef PORTC
            else if (port[0] == 'C')
                thisPort = &PORTC;
     d6a:	08 e2       	ldi	r16, 0x28	; 40
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <switchOnOff+0x180>
#endif
#ifdef PORTD
            else if (port[0] == 'D')
                thisPort = &PORTD;
     d70:	0b e2       	ldi	r16, 0x2B	; 43
     d72:	10 e0       	ldi	r17, 0x00	; 0
#ifdef PORTI
            else if (port[0] == 'I')
                thisPort = &PORTI;
#endif
            // k we have the port - now decide if we are turning it on or off and turn it on/off
            if (switchStatus[x] == 0) {
     d74:	f6 01       	movw	r30, r12
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	a2 81       	ldd	r26, Z+2	; 0x02
     d7c:	b3 81       	ldd	r27, Z+3	; 0x03
     d7e:	39 81       	ldd	r19, Y+1	; 0x01
                // turning it off
                if (direction[0] == 0) {
                    *thisPort |= (1 << realPin);
     d80:	f8 01       	movw	r30, r16
#ifdef PORTI
            else if (port[0] == 'I')
                thisPort = &PORTI;
#endif
            // k we have the port - now decide if we are turning it on or off and turn it on/off
            if (switchStatus[x] == 0) {
     d82:	89 2b       	or	r24, r25
     d84:	8a 2b       	or	r24, r26
     d86:	8b 2b       	or	r24, r27
     d88:	19 f4       	brne	.+6      	; 0xd90 <switchOnOff+0x19c>
                // turning it off
                if (direction[0] == 0) {
     d8a:	31 11       	cpse	r19, r1
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <switchOnOff+0x1a0>
     d8e:	0c c0       	rjmp	.+24     	; 0xda8 <switchOnOff+0x1b4>
                } else {
                    *thisPort &= ~(1 << realPin);
                }
            } else {
                // turning it on
                if (direction[0] == 0) {
     d90:	31 11       	cpse	r19, r1
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <switchOnOff+0x1b4>
                    *thisPort &= ~(1 << realPin);
     d94:	30 81       	ld	r19, Z
     d96:	c5 01       	movw	r24, r10
     d98:	02 2e       	mov	r0, r18
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <switchOnOff+0x1aa>
     d9c:	88 0f       	add	r24, r24
     d9e:	0a 94       	dec	r0
     da0:	ea f7       	brpl	.-6      	; 0xd9c <switchOnOff+0x1a8>
     da2:	80 95       	com	r24
     da4:	38 23       	and	r19, r24
     da6:	08 c0       	rjmp	.+16     	; 0xdb8 <switchOnOff+0x1c4>
                } else {
                    *thisPort |= (1 << realPin);
     da8:	30 81       	ld	r19, Z
     daa:	c5 01       	movw	r24, r10
     dac:	02 2e       	mov	r0, r18
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <switchOnOff+0x1be>
     db0:	88 0f       	add	r24, r24
     db2:	0a 94       	dec	r0
     db4:	ea f7       	brpl	.-6      	; 0xdb0 <switchOnOff+0x1bc>
     db6:	38 2b       	or	r19, r24
     db8:	30 83       	st	Z, r19
    char pin[1];
    int realPin = 0;
    int x = 0;
    char direction[1];
    volatile unsigned char *thisPort = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
     dba:	ff ef       	ldi	r31, 0xFF	; 255
     dbc:	ef 1a       	sub	r14, r31
     dbe:	ff 0a       	sbc	r15, r31
     dc0:	84 e0       	ldi	r24, 0x04	; 4
     dc2:	c8 0e       	add	r12, r24
     dc4:	d1 1c       	adc	r13, r1
     dc6:	e0 e1       	ldi	r30, 0x10	; 16
     dc8:	ee 16       	cp	r14, r30
     dca:	f1 04       	cpc	r15, r1
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <switchOnOff+0x1dc>
     dce:	34 cf       	rjmp	.-408    	; 0xc38 <switchOnOff+0x44>
                    *thisPort |= (1 << realPin);
                }
            }
        }
    }
}
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	df 90       	pop	r13
     de4:	cf 90       	pop	r12
     de6:	bf 90       	pop	r11
     de8:	af 90       	pop	r10
     dea:	9f 90       	pop	r9
     dec:	8f 90       	pop	r8
     dee:	7f 90       	pop	r7
     df0:	08 95       	ret

00000df2 <returnInt>:
        }
    }
    sendMessage(statusMsg);
}

void returnInt(int number, char * thisString) {
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	eb 01       	movw	r28, r22
    thisString[0] = 0;
     df8:	18 82       	st	Y, r1
    itoa(number, tempHugeString, 10);
     dfa:	4a e0       	ldi	r20, 0x0A	; 10
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	6c e0       	ldi	r22, 0x0C	; 12
     e00:	71 e0       	ldi	r23, 0x01	; 1
     e02:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
    if (strlen(tempHugeString) == 1)
     e06:	ec e0       	ldi	r30, 0x0C	; 12
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	01 90       	ld	r0, Z+
     e0c:	00 20       	and	r0, r0
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <returnInt+0x18>
     e10:	ee 50       	subi	r30, 0x0E	; 14
     e12:	f1 40       	sbci	r31, 0x01	; 1
     e14:	29 f4       	brne	.+10     	; 0xe20 <returnInt+0x2e>
        strcat(thisString, "0");
     e16:	61 e8       	ldi	r22, 0x81	; 129
     e18:	72 e0       	ldi	r23, 0x02	; 2
     e1a:	ce 01       	movw	r24, r28
     e1c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(thisString, tempHugeString);
     e20:	6c e0       	ldi	r22, 0x0C	; 12
     e22:	71 e0       	ldi	r23, 0x01	; 1
     e24:	ce 01       	movw	r24, r28
}
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
void returnInt(int number, char * thisString) {
    thisString[0] = 0;
    itoa(number, tempHugeString, 10);
    if (strlen(tempHugeString) == 1)
        strcat(thisString, "0");
    strcat(thisString, tempHugeString);
     e2a:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <strcat>

00000e2e <clockString>:


// Change the clock values to a string

void clockString(void) {
    statusMsg[0] = 0;
     e2e:	10 92 8a 03 	sts	0x038A, r1

    strcat(statusMsg, " ");
     e32:	65 e4       	ldi	r22, 0x45	; 69
     e34:	72 e0       	ldi	r23, 0x02	; 2
     e36:	8a e8       	ldi	r24, 0x8A	; 138
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(globalMonth, tempIntString);
     e3e:	69 e0       	ldi	r22, 0x09	; 9
     e40:	71 e0       	ldi	r23, 0x01	; 1
     e42:	80 91 fc 02 	lds	r24, 0x02FC
     e46:	90 91 fd 02 	lds	r25, 0x02FD
     e4a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg, tempIntString);
     e4e:	69 e0       	ldi	r22, 0x09	; 9
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	8a e8       	ldi	r24, 0x8A	; 138
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg, "/");
     e5a:	6b e3       	ldi	r22, 0x3B	; 59
     e5c:	71 e0       	ldi	r23, 0x01	; 1
     e5e:	8a e8       	ldi	r24, 0x8A	; 138
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(globalDay, tempIntString);
     e66:	69 e0       	ldi	r22, 0x09	; 9
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	80 91 fa 02 	lds	r24, 0x02FA
     e6e:	90 91 fb 02 	lds	r25, 0x02FB
     e72:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg, tempIntString);
     e76:	69 e0       	ldi	r22, 0x09	; 9
     e78:	71 e0       	ldi	r23, 0x01	; 1
     e7a:	8a e8       	ldi	r24, 0x8A	; 138
     e7c:	93 e0       	ldi	r25, 0x03	; 3
     e7e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg, "/");
     e82:	6b e3       	ldi	r22, 0x3B	; 59
     e84:	71 e0       	ldi	r23, 0x01	; 1
     e86:	8a e8       	ldi	r24, 0x8A	; 138
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    itoa(globalYear, tempIntString, 10);
     e8e:	4a e0       	ldi	r20, 0x0A	; 10
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	69 e0       	ldi	r22, 0x09	; 9
     e94:	71 e0       	ldi	r23, 0x01	; 1
     e96:	80 91 fe 02 	lds	r24, 0x02FE
     e9a:	90 91 ff 02 	lds	r25, 0x02FF
     e9e:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
    strcat(statusMsg, tempIntString);
     ea2:	69 e0       	ldi	r22, 0x09	; 9
     ea4:	71 e0       	ldi	r23, 0x01	; 1
     ea6:	8a e8       	ldi	r24, 0x8A	; 138
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg, " ");
     eae:	65 e4       	ldi	r22, 0x45	; 69
     eb0:	72 e0       	ldi	r23, 0x02	; 2
     eb2:	8a e8       	ldi	r24, 0x8A	; 138
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(globalHour, tempIntString);
     eba:	69 e0       	ldi	r22, 0x09	; 9
     ebc:	71 e0       	ldi	r23, 0x01	; 1
     ebe:	80 91 f8 02 	lds	r24, 0x02F8
     ec2:	90 91 f9 02 	lds	r25, 0x02F9
     ec6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg, tempIntString);
     eca:	69 e0       	ldi	r22, 0x09	; 9
     ecc:	71 e0       	ldi	r23, 0x01	; 1
     ece:	8a e8       	ldi	r24, 0x8A	; 138
     ed0:	93 e0       	ldi	r25, 0x03	; 3
     ed2:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg, ":");
     ed6:	61 ee       	ldi	r22, 0xE1	; 225
     ed8:	71 e0       	ldi	r23, 0x01	; 1
     eda:	8a e8       	ldi	r24, 0x8A	; 138
     edc:	93 e0       	ldi	r25, 0x03	; 3
     ede:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(globalMinute, tempIntString);
     ee2:	69 e0       	ldi	r22, 0x09	; 9
     ee4:	71 e0       	ldi	r23, 0x01	; 1
     ee6:	80 91 f6 02 	lds	r24, 0x02F6
     eea:	90 91 f7 02 	lds	r25, 0x02F7
     eee:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg, tempIntString);
     ef2:	69 e0       	ldi	r22, 0x09	; 9
     ef4:	71 e0       	ldi	r23, 0x01	; 1
     ef6:	8a e8       	ldi	r24, 0x8A	; 138
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg, ":");
     efe:	61 ee       	ldi	r22, 0xE1	; 225
     f00:	71 e0       	ldi	r23, 0x01	; 1
     f02:	8a e8       	ldi	r24, 0x8A	; 138
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(globalSecond, tempIntString);
     f0a:	69 e0       	ldi	r22, 0x09	; 9
     f0c:	71 e0       	ldi	r23, 0x01	; 1
     f0e:	80 91 f4 02 	lds	r24, 0x02F4
     f12:	90 91 f5 02 	lds	r25, 0x02F5
     f16:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg, tempIntString);
     f1a:	69 e0       	ldi	r22, 0x09	; 9
     f1c:	71 e0       	ldi	r23, 0x01	; 1
     f1e:	8a e8       	ldi	r24, 0x8A	; 138
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <strcat>

00000f26 <returnHex>:
    if (strlen(tempHugeString) == 1)
        strcat(thisString, "0");
    strcat(thisString, tempHugeString);
}

void returnHex(unsigned int number, char * thisString) {
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	8c 01       	movw	r16, r24
     f30:	eb 01       	movw	r28, r22
    thisString[0] = 0;
     f32:	18 82       	st	Y, r1
    strcat(thisString, "0x");
     f34:	65 e4       	ldi	r22, 0x45	; 69
     f36:	71 e0       	ldi	r23, 0x01	; 1
     f38:	ce 01       	movw	r24, r28
     f3a:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    itoa(number, tempHugeString, 16);
     f3e:	40 e1       	ldi	r20, 0x10	; 16
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	6c e0       	ldi	r22, 0x0C	; 12
     f44:	71 e0       	ldi	r23, 0x01	; 1
     f46:	c8 01       	movw	r24, r16
     f48:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
    if (strlen(tempHugeString) == 1 || strlen(tempHugeString) == 3)
     f4c:	ec e0       	ldi	r30, 0x0C	; 12
     f4e:	f1 e0       	ldi	r31, 0x01	; 1
     f50:	01 90       	ld	r0, Z+
     f52:	00 20       	and	r0, r0
     f54:	e9 f7       	brne	.-6      	; 0xf50 <returnHex+0x2a>
     f56:	31 97       	sbiw	r30, 0x01	; 1
     f58:	ec 50       	subi	r30, 0x0C	; 12
     f5a:	f1 40       	sbci	r31, 0x01	; 1
     f5c:	e1 30       	cpi	r30, 0x01	; 1
     f5e:	f1 05       	cpc	r31, r1
     f60:	11 f0       	breq	.+4      	; 0xf66 <returnHex+0x40>
     f62:	33 97       	sbiw	r30, 0x03	; 3
     f64:	29 f4       	brne	.+10     	; 0xf70 <returnHex+0x4a>
        strcat(thisString, "0");
     f66:	61 e8       	ldi	r22, 0x81	; 129
     f68:	72 e0       	ldi	r23, 0x02	; 2
     f6a:	ce 01       	movw	r24, r28
     f6c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(thisString, tempHugeString);
     f70:	6c e0       	ldi	r22, 0x0C	; 12
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	ce 01       	movw	r24, r28
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
    thisString[0] = 0;
    strcat(thisString, "0x");
    itoa(number, tempHugeString, 16);
    if (strlen(tempHugeString) == 1 || strlen(tempHugeString) == 3)
        strcat(thisString, "0");
    strcat(thisString, tempHugeString);
     f7e:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <strcat>

00000f82 <returnHexWithout>:



// print hex without 0x

void returnHexWithout(unsigned int number, char * tempMe) {
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	eb 01       	movw	r28, r22
    tempMe[0] = 0;
     f88:	18 82       	st	Y, r1
    itoa(number, tempHugeString, 16);
     f8a:	40 e1       	ldi	r20, 0x10	; 16
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	6c e0       	ldi	r22, 0x0C	; 12
     f90:	71 e0       	ldi	r23, 0x01	; 1
     f92:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
    if (strlen(tempHugeString) == 1 || strlen(tempHugeString) == 3)
     f96:	ec e0       	ldi	r30, 0x0C	; 12
     f98:	f1 e0       	ldi	r31, 0x01	; 1
     f9a:	01 90       	ld	r0, Z+
     f9c:	00 20       	and	r0, r0
     f9e:	e9 f7       	brne	.-6      	; 0xf9a <returnHexWithout+0x18>
     fa0:	31 97       	sbiw	r30, 0x01	; 1
     fa2:	ec 50       	subi	r30, 0x0C	; 12
     fa4:	f1 40       	sbci	r31, 0x01	; 1
     fa6:	e1 30       	cpi	r30, 0x01	; 1
     fa8:	f1 05       	cpc	r31, r1
     faa:	11 f0       	breq	.+4      	; 0xfb0 <returnHexWithout+0x2e>
     fac:	33 97       	sbiw	r30, 0x03	; 3
     fae:	29 f4       	brne	.+10     	; 0xfba <returnHexWithout+0x38>
        strcat(tempMe, "0");
     fb0:	61 e8       	ldi	r22, 0x81	; 129
     fb2:	72 e0       	ldi	r23, 0x02	; 2
     fb4:	ce 01       	movw	r24, r28
     fb6:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(tempMe, tempHugeString);
     fba:	6c e0       	ldi	r22, 0x0C	; 12
     fbc:	71 e0       	ldi	r23, 0x01	; 1
     fbe:	ce 01       	movw	r24, r28
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
void returnHexWithout(unsigned int number, char * tempMe) {
    tempMe[0] = 0;
    itoa(number, tempHugeString, 16);
    if (strlen(tempHugeString) == 1 || strlen(tempHugeString) == 3)
        strcat(tempMe, "0");
    strcat(tempMe, tempHugeString);
     fc4:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <strcat>

00000fc8 <formatAddress>:
    return 1;
}

// Take in an address and return a long long with the number

uint64_t formatAddress(char * address) {
     fc8:	0f 93       	push	r16
     fca:	cf 93       	push	r28
     fcc:	dc 01       	movw	r26, r24
    int x = 0;
    uint64_t newAddress = 0;
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
    int tempInt;
    for (x = 0; x < 5; x++) {
     fde:	e0 e0       	ldi	r30, 0x00	; 0
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
        tempInt = address[x];
     fe2:	cd 91       	ld	r28, X+
     fe4:	c2 2b       	or	r28, r18
        if (x < 4) {
            newAddress |= (tempInt);
            newAddress <<= 8;
     fe6:	2c 2f       	mov	r18, r28
    int x = 0;
    uint64_t newAddress = 0;
    int tempInt;
    for (x = 0; x < 5; x++) {
        tempInt = address[x];
        if (x < 4) {
     fe8:	e4 30       	cpi	r30, 0x04	; 4
     fea:	f1 05       	cpc	r31, r1
     fec:	19 f0       	breq	.+6      	; 0xff4 <formatAddress+0x2c>
            newAddress |= (tempInt);
            newAddress <<= 8;
     fee:	08 e0       	ldi	r16, 0x08	; 8
     ff0:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__ashldi3>

uint64_t formatAddress(char * address) {
    int x = 0;
    uint64_t newAddress = 0;
    int tempInt;
    for (x = 0; x < 5; x++) {
     ff4:	31 96       	adiw	r30, 0x01	; 1
     ff6:	e5 30       	cpi	r30, 0x05	; 5
     ff8:	f1 05       	cpc	r31, r1
     ffa:	99 f7       	brne	.-26     	; 0xfe2 <formatAddress+0x1a>
            newAddress <<= 8;
        } else
            newAddress |= tempInt;
    }
    return newAddress;
}
     ffc:	cf 91       	pop	r28
     ffe:	0f 91       	pop	r16
    1000:	08 95       	ret

00001002 <generalInit>:
 *
 ****************************************************************/

// Get variables out of EEPROM and set things up

void generalInit(void) {
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	2e 97       	sbiw	r28, 0x0e	; 14
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    // read the program info
    char tempStuff[14];
    int x = 0;
    // Go through the addresses and assign them if set
    // decided later that this is a really bad idea. gets corrupted.  use default
    if (readEEPROM(tempStuff, RADIO_ADDR_TX, RADIO_ADDR_TX_BYTES) == 1) {
    101e:	47 e0       	ldi	r20, 0x07	; 7
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	6e e0       	ldi	r22, 0x0E	; 14
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	d9 f4       	brne	.+54     	; 0x1068 <generalInit+0x66>
        tx_addr = formatAddress(tempStuff);
    1032:	ce 01       	movw	r24, r28
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <formatAddress>
    103a:	20 93 24 04 	sts	0x0424, r18
    103e:	30 93 25 04 	sts	0x0425, r19
    1042:	40 93 26 04 	sts	0x0426, r20
    1046:	50 93 27 04 	sts	0x0427, r21
    104a:	60 93 28 04 	sts	0x0428, r22
    104e:	70 93 29 04 	sts	0x0429, r23
    1052:	80 93 2a 04 	sts	0x042A, r24
    1056:	90 93 2b 04 	sts	0x042B, r25
        writeAddr(TX_ADDR, tx_addr);
    105a:	89 01       	movw	r16, r18
    105c:	9a 01       	movw	r18, r20
    105e:	ab 01       	movw	r20, r22
    1060:	bc 01       	movw	r22, r24
    1062:	80 e1       	ldi	r24, 0x10	; 16
    1064:	0e 94 47 29 	call	0x528e	; 0x528e <writeAddr>
    }
    if (readEEPROM(tempStuff, RADIO_ADDR_R0, RADIO_ADDR_R0_BYTES) == 1) {
    1068:	47 e0       	ldi	r20, 0x07	; 7
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	65 e1       	ldi	r22, 0x15	; 21
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	ce 01       	movw	r24, r28
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	d9 f4       	brne	.+54     	; 0x10b2 <generalInit+0xb0>
        rx_addr_p0 = formatAddress(tempStuff);
    107c:	ce 01       	movw	r24, r28
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <formatAddress>
    1084:	20 93 2c 04 	sts	0x042C, r18
    1088:	30 93 2d 04 	sts	0x042D, r19
    108c:	40 93 2e 04 	sts	0x042E, r20
    1090:	50 93 2f 04 	sts	0x042F, r21
    1094:	60 93 30 04 	sts	0x0430, r22
    1098:	70 93 31 04 	sts	0x0431, r23
    109c:	80 93 32 04 	sts	0x0432, r24
    10a0:	90 93 33 04 	sts	0x0433, r25
        writeAddr(RX_ADDR_P0, rx_addr_p0);
    10a4:	89 01       	movw	r16, r18
    10a6:	9a 01       	movw	r18, r20
    10a8:	ab 01       	movw	r20, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	8a e0       	ldi	r24, 0x0A	; 10
    10ae:	0e 94 47 29 	call	0x528e	; 0x528e <writeAddr>
    }
     
    if (readEEPROM(tempStuff, RADIO_ADDR_R1, RADIO_ADDR_R1_BYTES) == 1) {
    10b2:	47 e0       	ldi	r20, 0x07	; 7
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	6c e1       	ldi	r22, 0x1C	; 28
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	ce 01       	movw	r24, r28
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	d9 f4       	brne	.+54     	; 0x10fc <generalInit+0xfa>
        rx_addr_p1 = formatAddress(tempStuff);
    10c6:	ce 01       	movw	r24, r28
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <formatAddress>
    10ce:	20 93 34 04 	sts	0x0434, r18
    10d2:	30 93 35 04 	sts	0x0435, r19
    10d6:	40 93 36 04 	sts	0x0436, r20
    10da:	50 93 37 04 	sts	0x0437, r21
    10de:	60 93 38 04 	sts	0x0438, r22
    10e2:	70 93 39 04 	sts	0x0439, r23
    10e6:	80 93 3a 04 	sts	0x043A, r24
    10ea:	90 93 3b 04 	sts	0x043B, r25
        writeAddr(RX_ADDR_P1, rx_addr_p1);
    10ee:	89 01       	movw	r16, r18
    10f0:	9a 01       	movw	r18, r20
    10f2:	ab 01       	movw	r20, r22
    10f4:	bc 01       	movw	r22, r24
    10f6:	8b e0       	ldi	r24, 0x0B	; 11
    10f8:	0e 94 47 29 	call	0x528e	; 0x528e <writeAddr>
    }
    if (readEEPROM(tempStuff, RADIO_ADDR_R2, RADIO_ADDR_R2_BYTES) == 1) {
    10fc:	43 e0       	ldi	r20, 0x03	; 3
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	63 e2       	ldi	r22, 0x23	; 35
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	ce 01       	movw	r24, r28
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	d9 f4       	brne	.+54     	; 0x1146 <generalInit+0x144>
        rx_addr_p2 = tempStuff[0];
    1110:	09 81       	ldd	r16, Y+1	; 0x01
    1112:	00 93 3c 04 	sts	0x043C, r16
    1116:	10 92 3d 04 	sts	0x043D, r1
    111a:	10 92 3e 04 	sts	0x043E, r1
    111e:	10 92 3f 04 	sts	0x043F, r1
    1122:	10 92 40 04 	sts	0x0440, r1
    1126:	10 92 41 04 	sts	0x0441, r1
    112a:	10 92 42 04 	sts	0x0442, r1
    112e:	10 92 43 04 	sts	0x0443, r1
        writeAddr(RX_ADDR_P2, rx_addr_p2);
    1132:	10 e0       	ldi	r17, 0x00	; 0
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	8c e0       	ldi	r24, 0x0C	; 12
    1142:	0e 94 47 29 	call	0x528e	; 0x528e <writeAddr>
    }
    if (readEEPROM(tempStuff, RADIO_ADDR_R3, RADIO_ADDR_R3_BYTES) == 1) {
    1146:	43 e0       	ldi	r20, 0x03	; 3
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	66 e2       	ldi	r22, 0x26	; 38
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	ce 01       	movw	r24, r28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	d9 f4       	brne	.+54     	; 0x1190 <generalInit+0x18e>
        rx_addr_p3 = tempStuff[0];
    115a:	09 81       	ldd	r16, Y+1	; 0x01
    115c:	00 93 44 04 	sts	0x0444, r16
    1160:	10 92 45 04 	sts	0x0445, r1
    1164:	10 92 46 04 	sts	0x0446, r1
    1168:	10 92 47 04 	sts	0x0447, r1
    116c:	10 92 48 04 	sts	0x0448, r1
    1170:	10 92 49 04 	sts	0x0449, r1
    1174:	10 92 4a 04 	sts	0x044A, r1
    1178:	10 92 4b 04 	sts	0x044B, r1
        writeAddr(RX_ADDR_P3, rx_addr_p3);
    117c:	10 e0       	ldi	r17, 0x00	; 0
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	8d e0       	ldi	r24, 0x0D	; 13
    118c:	0e 94 47 29 	call	0x528e	; 0x528e <writeAddr>
    }
    if (readEEPROM(tempStuff, RADIO_ADDR_R4, RADIO_ADDR_R4_BYTES) == 1) {
    1190:	43 e0       	ldi	r20, 0x03	; 3
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	69 e2       	ldi	r22, 0x29	; 41
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	ce 01       	movw	r24, r28
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	d9 f4       	brne	.+54     	; 0x11da <generalInit+0x1d8>
        rx_addr_p4 = tempStuff[0];
    11a4:	09 81       	ldd	r16, Y+1	; 0x01
    11a6:	00 93 4c 04 	sts	0x044C, r16
    11aa:	10 92 4d 04 	sts	0x044D, r1
    11ae:	10 92 4e 04 	sts	0x044E, r1
    11b2:	10 92 4f 04 	sts	0x044F, r1
    11b6:	10 92 50 04 	sts	0x0450, r1
    11ba:	10 92 51 04 	sts	0x0451, r1
    11be:	10 92 52 04 	sts	0x0452, r1
    11c2:	10 92 53 04 	sts	0x0453, r1
        writeAddr(RX_ADDR_P4, rx_addr_p4);
    11c6:	10 e0       	ldi	r17, 0x00	; 0
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	8e e0       	ldi	r24, 0x0E	; 14
    11d6:	0e 94 47 29 	call	0x528e	; 0x528e <writeAddr>
    }
    if (readEEPROM(tempStuff, RADIO_ADDR_R5, RADIO_ADDR_R5_BYTES) == 1) {
    11da:	43 e0       	ldi	r20, 0x03	; 3
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	6c e2       	ldi	r22, 0x2C	; 44
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	ce 01       	movw	r24, r28
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	d9 f4       	brne	.+54     	; 0x1224 <generalInit+0x222>
        rx_addr_p5 = tempStuff[0];
    11ee:	09 81       	ldd	r16, Y+1	; 0x01
    11f0:	00 93 54 04 	sts	0x0454, r16
    11f4:	10 92 55 04 	sts	0x0455, r1
    11f8:	10 92 56 04 	sts	0x0456, r1
    11fc:	10 92 57 04 	sts	0x0457, r1
    1200:	10 92 58 04 	sts	0x0458, r1
    1204:	10 92 59 04 	sts	0x0459, r1
    1208:	10 92 5a 04 	sts	0x045A, r1
    120c:	10 92 5b 04 	sts	0x045B, r1
        writeAddr(RX_ADDR_P5, rx_addr_p5);
    1210:	10 e0       	ldi	r17, 0x00	; 0
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	8f e0       	ldi	r24, 0x0F	; 15
    1220:	0e 94 47 29 	call	0x528e	; 0x528e <writeAddr>
    }
    if (readEEPROM(tempStuff, TWEAK_TIMER, TWEAK_TIMER_BYTES) == 1) {
    1224:	44 e0       	ldi	r20, 0x04	; 4
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	69 e1       	ldi	r22, 0x19	; 25
    122a:	71 e0       	ldi	r23, 0x01	; 1
    122c:	ce 01       	movw	r24, r28
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	91 f4       	brne	.+36     	; 0x125c <generalInit+0x25a>
        tweakTimer = tempStuff[0];
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a0 e0       	ldi	r26, 0x00	; 0
    123e:	b0 e0       	ldi	r27, 0x00	; 0
        tweakTimer <<= 8;
    1240:	ba 2f       	mov	r27, r26
    1242:	a9 2f       	mov	r26, r25
    1244:	98 2f       	mov	r25, r24
    1246:	88 27       	eor	r24, r24
        tweakTimer |= tempStuff[1];
    1248:	2a 81       	ldd	r18, Y+2	; 0x02
    124a:	82 2b       	or	r24, r18
    124c:	80 93 1f 01 	sts	0x011F, r24
    1250:	90 93 20 01 	sts	0x0120, r25
    1254:	a0 93 21 01 	sts	0x0121, r26
    1258:	b0 93 22 01 	sts	0x0122, r27
    }


    // process daylight savings
    if (readEEPROM(tempStuff, DAYLIGHT_SAVE, DAYLIGHT_SAVE_BYTES) == 1) {
    125c:	4a e0       	ldi	r20, 0x0A	; 10
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	66 e0       	ldi	r22, 0x06	; 6
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	01 f5       	brne	.+64     	; 0x12b0 <generalInit+0x2ae>
        // Spring month
        daylightSavings[0][0] = ((tempStuff[0] << 8) | (tempStuff[1]));
    1270:	99 81       	ldd	r25, Y+1	; 0x01
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	2a 81       	ldd	r18, Y+2	; 0x02
    1276:	82 2b       	or	r24, r18
    1278:	90 93 5d 04 	sts	0x045D, r25
    127c:	80 93 5c 04 	sts	0x045C, r24
        // Spring day
        daylightSavings[0][1] = ((tempStuff[2] << 8) | (tempStuff[3]));
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	82 2b       	or	r24, r18
    1288:	90 93 5f 04 	sts	0x045F, r25
    128c:	80 93 5e 04 	sts	0x045E, r24
        // Fall month
        daylightSavings[1][0] = ((tempStuff[4] << 8) | (tempStuff[5]));
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	2e 81       	ldd	r18, Y+6	; 0x06
    1296:	82 2b       	or	r24, r18
    1298:	90 93 61 04 	sts	0x0461, r25
    129c:	80 93 60 04 	sts	0x0460, r24
        // Fall day
        daylightSavings[1][1] = ((tempStuff[6] << 8) | (tempStuff[7]));
    12a0:	9f 81       	ldd	r25, Y+7	; 0x07
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	28 85       	ldd	r18, Y+8	; 0x08
    12a6:	82 2b       	or	r24, r18
    12a8:	90 93 63 04 	sts	0x0463, r25
    12ac:	80 93 62 04 	sts	0x0462, r24
    }

    if (readEEPROM(tempStuff, SERIAL_NUM, SERIAL_NUM_BYTES) == 1) {
    12b0:	48 e0       	ldi	r20, 0x08	; 8
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	91 f4       	brne	.+36     	; 0x12e8 <generalInit+0x2e6>
        serial = atol(tempStuff);
    12c4:	ce 01       	movw	r24, r28
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	0e 94 a0 30 	call	0x6140	; 0x6140 <atol>
    12cc:	60 93 86 03 	sts	0x0386, r22
    12d0:	70 93 87 03 	sts	0x0387, r23
    12d4:	80 93 88 03 	sts	0x0388, r24
    12d8:	90 93 89 03 	sts	0x0389, r25
        ltoa(serial, stringSerial, 10);
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	42 e0       	ldi	r20, 0x02	; 2
    12e2:	51 e0       	ldi	r21, 0x01	; 1
    12e4:	0e 94 1d 31 	call	0x623a	; 0x623a <ltoa>
    }

    // switches
    if (readEEPROM(switchStuff, SWITCH_STUFF, SWITCH_STUFF_BYTES) == 1) {
    12e8:	42 e1       	ldi	r20, 0x12	; 18
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	60 e3       	ldi	r22, 0x30	; 48
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	80 e4       	ldi	r24, 0x40	; 64
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	09 f0       	breq	.+2      	; 0x12fe <generalInit+0x2fc>
    12fc:	48 c0       	rjmp	.+144    	; 0x138e <generalInit+0x38c>
        readEEPROM(switchBright, BRIGHTNESS, BRIGHTNESS_BYTES);
    12fe:	42 e1       	ldi	r20, 0x12	; 18
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	60 e2       	ldi	r22, 0x20	; 32
    1304:	71 e0       	ldi	r23, 0x01	; 1
    1306:	80 e5       	ldi	r24, 0x50	; 80
    1308:	93 e0       	ldi	r25, 0x03	; 3
    130a:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    130e:	80 e4       	ldi	r24, 0x40	; 64
    1310:	93 e0       	ldi	r25, 0x03	; 3
                // pwm setup
            } else {
                continue;
            }
            realPin = (temp / 2);
            *realDDR |= (1 << realPin);
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	50 e0       	ldi	r21, 0x00	; 0
        char temp = 0;
        // Pp - value of 255 (default) means nothing programmed
        // value of 0-15 = PORTA, 16-31 = PORTB, 32-47 = PORTC, 
        // 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG
        for (x = 0; x < NUM_SWITCHES; x++) {
            temp = switchStuff[x];
    1316:	fc 01       	movw	r30, r24
    1318:	21 91       	ld	r18, Z+
    131a:	cf 01       	movw	r24, r30
            if (temp > 15 && temp < 32) {
    131c:	62 2f       	mov	r22, r18
    131e:	60 51       	subi	r22, 0x10	; 16
    1320:	60 31       	cpi	r22, 0x10	; 16
    1322:	88 f0       	brcs	.+34     	; 0x1346 <generalInit+0x344>
                realPort = &PORTA;
                realDDR = &DDRA;
                temp -= 0;
#endif
#ifdef PINC
            } else if (temp < 48) {
    1324:	20 33       	cpi	r18, 0x30	; 48
    1326:	30 f4       	brcc	.+12     	; 0x1334 <generalInit+0x332>
                realPort = &PORTC;
                realDDR = &DDRC;
                temp -= 32;
    1328:	60 51       	subi	r22, 0x10	; 16
                temp -= 0;
#endif
#ifdef PINC
            } else if (temp < 48) {
                realPort = &PORTC;
                realDDR = &DDRC;
    132a:	a7 e2       	ldi	r26, 0x27	; 39
    132c:	b0 e0       	ldi	r27, 0x00	; 0
                realDDR = &DDRA;
                temp -= 0;
#endif
#ifdef PINC
            } else if (temp < 48) {
                realPort = &PORTC;
    132e:	e8 e2       	ldi	r30, 0x28	; 40
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	0d c0       	rjmp	.+26     	; 0x134e <generalInit+0x34c>
                realDDR = &DDRC;
                temp -= 32;
#endif
#ifdef PIND
            } else if (temp < 64) {
    1334:	20 34       	cpi	r18, 0x40	; 64
    1336:	00 f5       	brcc	.+64     	; 0x1378 <generalInit+0x376>
                realPort = &PORTD;
                realDDR = &DDRD;
                temp -= 48;
    1338:	62 2f       	mov	r22, r18
    133a:	60 53       	subi	r22, 0x30	; 48
                temp -= 32;
#endif
#ifdef PIND
            } else if (temp < 64) {
                realPort = &PORTD;
                realDDR = &DDRD;
    133c:	aa e2       	ldi	r26, 0x2A	; 42
    133e:	b0 e0       	ldi	r27, 0x00	; 0
                realDDR = &DDRC;
                temp -= 32;
#endif
#ifdef PIND
            } else if (temp < 64) {
                realPort = &PORTD;
    1340:	eb e2       	ldi	r30, 0x2B	; 43
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	04 c0       	rjmp	.+8      	; 0x134e <generalInit+0x34c>
        // 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG
        for (x = 0; x < NUM_SWITCHES; x++) {
            temp = switchStuff[x];
            if (temp > 15 && temp < 32) {
                realPort = &PORTB;
                realDDR = &DDRB;
    1346:	a4 e2       	ldi	r26, 0x24	; 36
    1348:	b0 e0       	ldi	r27, 0x00	; 0
        // value of 0-15 = PORTA, 16-31 = PORTB, 32-47 = PORTC, 
        // 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG
        for (x = 0; x < NUM_SWITCHES; x++) {
            temp = switchStuff[x];
            if (temp > 15 && temp < 32) {
                realPort = &PORTB;
    134a:	e5 e2       	ldi	r30, 0x25	; 37
    134c:	f0 e0       	ldi	r31, 0x00	; 0
                // pwm setup
            } else {
                continue;
            }
            realPin = (temp / 2);
            *realDDR |= (1 << realPin);
    134e:	7c 91       	ld	r23, X
#endif
                // pwm setup
            } else {
                continue;
            }
            realPin = (temp / 2);
    1350:	26 2f       	mov	r18, r22
    1352:	26 95       	lsr	r18
            *realDDR |= (1 << realPin);
    1354:	8a 01       	movw	r16, r20
    1356:	02 c0       	rjmp	.+4      	; 0x135c <generalInit+0x35a>
    1358:	00 0f       	add	r16, r16
    135a:	11 1f       	adc	r17, r17
    135c:	2a 95       	dec	r18
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <generalInit+0x356>
    1360:	98 01       	movw	r18, r16
    1362:	70 2b       	or	r23, r16
    1364:	7c 93       	st	X, r23
            // figure out direction
            if (temp % 2 == 0) {
    1366:	60 fd       	sbrc	r22, 0
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <generalInit+0x36e>
                // 0 = low is on  1 = high is on
                *realPort |= (1 << realPin);
    136a:	20 81       	ld	r18, Z
    136c:	20 2b       	or	r18, r16
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <generalInit+0x374>
            } else {
                *realPort &= ~(1 << realPin);
    1370:	30 81       	ld	r19, Z
    1372:	20 95       	com	r18
    1374:	23 23       	and	r18, r19
    1376:	20 83       	st	Z, r18
        char realPin = 0;
        char temp = 0;
        // Pp - value of 255 (default) means nothing programmed
        // value of 0-15 = PORTA, 16-31 = PORTB, 32-47 = PORTC, 
        // 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG
        for (x = 0; x < NUM_SWITCHES; x++) {
    1378:	13 e0       	ldi	r17, 0x03	; 3
    137a:	80 35       	cpi	r24, 0x50	; 80
    137c:	91 07       	cpc	r25, r17
    137e:	59 f6       	brne	.-106    	; 0x1316 <generalInit+0x314>
    1380:	40 ec       	ldi	r20, 0xC0	; 192
    1382:	e4 2e       	mov	r14, r20
    1384:	43 e0       	ldi	r20, 0x03	; 3
    1386:	f4 2e       	mov	r15, r20
                realDDR = &DDRC;
                temp -= 32;
#endif
#ifdef PIND
            } else if (temp < 64) {
                realPort = &PORTD;
    1388:	01 ea       	ldi	r16, 0xA1	; 161
    138a:	10 e0       	ldi	r17, 0x00	; 0
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <generalInit+0x39e>
    138e:	e0 e4       	ldi	r30, 0x40	; 64
    1390:	f3 e0       	ldi	r31, 0x03	; 3
                *realPort &= ~(1 << realPin);
            }
        }
    } else {
        for (x = 0; x < NUM_SWITCHES; x++)
            switchStuff[x] = 255;
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	81 93       	st	Z+, r24
            } else {
                *realPort &= ~(1 << realPin);
            }
        }
    } else {
        for (x = 0; x < NUM_SWITCHES; x++)
    1396:	23 e0       	ldi	r18, 0x03	; 3
    1398:	e0 35       	cpi	r30, 0x50	; 80
    139a:	f2 07       	cpc	r31, r18
    139c:	d9 f7       	brne	.-10     	; 0x1394 <generalInit+0x392>
    139e:	f0 cf       	rjmp	.-32     	; 0x1380 <generalInit+0x37e>
    int memoryMarker = 0;
    int y = 0;
    // get the programs
    for (x = 0; x < MAX_PROGRAM; x++) {
        memoryMarker = (WEEKLY_PROGRAM + (x * WEEKLY_PROGRAM_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, WEEKLY_PROGRAM_BYTES) == 1) {
    13a0:	4c e0       	ldi	r20, 0x0C	; 12
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	b8 01       	movw	r22, r16
    13a6:	ce 01       	movw	r24, r28
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	51 f0       	breq	.+20     	; 0x13c6 <generalInit+0x3c4>
    13b2:	04 5f       	subi	r16, 0xF4	; 244
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	8a e0       	ldi	r24, 0x0A	; 10
    13b8:	e8 0e       	add	r14, r24
    13ba:	f1 1c       	adc	r15, r1
    }

    int memoryMarker = 0;
    int y = 0;
    // get the programs
    for (x = 0; x < MAX_PROGRAM; x++) {
    13bc:	09 31       	cpi	r16, 0x19	; 25
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	19 07       	cpc	r17, r25
    13c2:	71 f7       	brne	.-36     	; 0x13a0 <generalInit+0x39e>
    13c4:	0e c0       	rjmp	.+28     	; 0x13e2 <generalInit+0x3e0>
    13c6:	fe 01       	movw	r30, r28
    13c8:	31 96       	adiw	r30, 0x01	; 1
        memoryMarker = (WEEKLY_PROGRAM + (x * WEEKLY_PROGRAM_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, WEEKLY_PROGRAM_BYTES) == 1) {
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
            for (y = 0; y < 10; y++) {
                weeklyProgram[x][y] = tempStuff[y];
    13ce:	21 91       	ld	r18, Z+
 *
 ****************************************************************/

// Get variables out of EEPROM and set things up

void generalInit(void) {
    13d0:	d7 01       	movw	r26, r14
    13d2:	a8 0f       	add	r26, r24
    13d4:	b9 1f       	adc	r27, r25
    // get the programs
    for (x = 0; x < MAX_PROGRAM; x++) {
        memoryMarker = (WEEKLY_PROGRAM + (x * WEEKLY_PROGRAM_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, WEEKLY_PROGRAM_BYTES) == 1) {
            for (y = 0; y < 10; y++) {
                weeklyProgram[x][y] = tempStuff[y];
    13d6:	2c 93       	st	X, r18
    int y = 0;
    // get the programs
    for (x = 0; x < MAX_PROGRAM; x++) {
        memoryMarker = (WEEKLY_PROGRAM + (x * WEEKLY_PROGRAM_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, WEEKLY_PROGRAM_BYTES) == 1) {
            for (y = 0; y < 10; y++) {
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	8a 30       	cpi	r24, 0x0A	; 10
    13dc:	91 05       	cpc	r25, r1
    13de:	b9 f7       	brne	.-18     	; 0x13ce <generalInit+0x3cc>
    13e0:	e8 cf       	rjmp	.-48     	; 0x13b2 <generalInit+0x3b0>
    13e2:	30 e6       	ldi	r19, 0x60	; 96
    13e4:	e3 2e       	mov	r14, r19
    13e6:	33 e0       	ldi	r19, 0x03	; 3
    13e8:	f3 2e       	mov	r15, r19
    }

    int memoryMarker = 0;
    int y = 0;
    // get the programs
    for (x = 0; x < MAX_PROGRAM; x++) {
    13ea:	02 e4       	ldi	r16, 0x42	; 66
    13ec:	10 e0       	ldi	r17, 0x00	; 0
        }
    }
    // get the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
        memoryMarker = (INPUT + (x * INPUT_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, INPUT_BYTES) == 1) {
    13ee:	4a e0       	ldi	r20, 0x0A	; 10
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	b8 01       	movw	r22, r16
    13f4:	ce 01       	movw	r24, r28
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	49 f0       	breq	.+18     	; 0x1412 <generalInit+0x410>
    1400:	06 5f       	subi	r16, 0xF6	; 246
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	e8 e0       	ldi	r30, 0x08	; 8
    1406:	ee 0e       	add	r14, r30
    1408:	f1 1c       	adc	r15, r1
                weeklyProgram[x][y] = tempStuff[y];
            }
        }
    }
    // get the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
    140a:	0a 36       	cpi	r16, 0x6A	; 106
    140c:	11 05       	cpc	r17, r1
    140e:	79 f7       	brne	.-34     	; 0x13ee <generalInit+0x3ec>
    1410:	0e c0       	rjmp	.+28     	; 0x142e <generalInit+0x42c>
    1412:	fe 01       	movw	r30, r28
    1414:	31 96       	adiw	r30, 0x01	; 1
        memoryMarker = (INPUT + (x * INPUT_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, INPUT_BYTES) == 1) {
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	90 e0       	ldi	r25, 0x00	; 0
            for (y = 0; y < 8; y++) {
                inputs[x][y] = tempStuff[y];
    141a:	21 91       	ld	r18, Z+
 *
 ****************************************************************/

// Get variables out of EEPROM and set things up

void generalInit(void) {
    141c:	d7 01       	movw	r26, r14
    141e:	a8 0f       	add	r26, r24
    1420:	b9 1f       	adc	r27, r25
    // get the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
        memoryMarker = (INPUT + (x * INPUT_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, INPUT_BYTES) == 1) {
            for (y = 0; y < 8; y++) {
                inputs[x][y] = tempStuff[y];
    1422:	2c 93       	st	X, r18
    }
    // get the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
        memoryMarker = (INPUT + (x * INPUT_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, INPUT_BYTES) == 1) {
            for (y = 0; y < 8; y++) {
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	88 30       	cpi	r24, 0x08	; 8
    1428:	91 05       	cpc	r25, r1
    142a:	b9 f7       	brne	.-18     	; 0x141a <generalInit+0x418>
    142c:	e9 cf       	rjmp	.-46     	; 0x1400 <generalInit+0x3fe>
    142e:	04 e6       	ldi	r16, 0x64	; 100
    1430:	14 e0       	ldi	r17, 0x04	; 4
                weeklyProgram[x][y] = tempStuff[y];
            }
        }
    }
    // get the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
    1432:	2a e6       	ldi	r18, 0x6A	; 106
    1434:	e2 2e       	mov	r14, r18
    1436:	f1 2c       	mov	r15, r1
        }
    }
    // get the time limits
    for (x = 0; x < NUM_LIMITS; x++) {
        memoryMarker = (LIMIT + (x * LIMIT_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, LIMIT_BYTES) == 1) {
    1438:	45 e0       	ldi	r20, 0x05	; 5
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	b7 01       	movw	r22, r14
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	c9 f4       	brne	.+50     	; 0x147c <generalInit+0x47a>
            for (y = 0; y < 3; y++) {
                timeLimits[x][y] = tempStuff[y];
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a0 e0       	ldi	r26, 0x00	; 0
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	f8 01       	movw	r30, r16
    1454:	80 83       	st	Z, r24
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	a2 83       	std	Z+2, r26	; 0x02
    145a:	b3 83       	std	Z+3, r27	; 0x03
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a0 e0       	ldi	r26, 0x00	; 0
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	84 83       	std	Z+4, r24	; 0x04
    1466:	95 83       	std	Z+5, r25	; 0x05
    1468:	a6 83       	std	Z+6, r26	; 0x06
    146a:	b7 83       	std	Z+7, r27	; 0x07
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	80 87       	std	Z+8, r24	; 0x08
    1476:	91 87       	std	Z+9, r25	; 0x09
    1478:	a2 87       	std	Z+10, r26	; 0x0a
    147a:	b3 87       	std	Z+11, r27	; 0x0b
    147c:	f5 e0       	ldi	r31, 0x05	; 5
    147e:	ef 0e       	add	r14, r31
    1480:	f1 1c       	adc	r15, r1
    1482:	04 5f       	subi	r16, 0xF4	; 244
    1484:	1f 4f       	sbci	r17, 0xFF	; 255
                inputs[x][y] = tempStuff[y];
            }
        }
    }
    // get the time limits
    for (x = 0; x < NUM_LIMITS; x++) {
    1486:	2e e7       	ldi	r18, 0x7E	; 126
    1488:	e2 16       	cp	r14, r18
    148a:	f1 04       	cpc	r15, r1
    148c:	a9 f6       	brne	.-86     	; 0x1438 <generalInit+0x436>
                timeLimits[x][y] = tempStuff[y];
            }
        }
    }

    if (readEEPROM(tempStuff, PWM_DIR, PWM_DIR_BYTES) == 1) {
    148e:	43 e0       	ldi	r20, 0x03	; 3
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	6d e1       	ldi	r22, 0x1D	; 29
    1494:	71 e0       	ldi	r23, 0x01	; 1
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f9 f4       	brne	.+62     	; 0x14e0 <generalInit+0x4de>
        DDRD |= (1 << PIND3) | (1 << PIND5) | (1 << PIND6);
    14a2:	8a b1       	in	r24, 0x0a	; 10
    14a4:	88 66       	ori	r24, 0x68	; 104
    14a6:	8a b9       	out	0x0a, r24	; 10
        // make sure initial values are 0
        Red = 0;
    14a8:	10 92 b4 00 	sts	0x00B4, r1
        Green = 0;
    14ac:	18 bc       	out	0x28, r1	; 40
        Blue = 0;
    14ae:	17 bc       	out	0x27, r1	; 39
        // Set output phase correct whatevers
        // set it to inverted if the direction is 0
        if (tempStuff[0] == 0) {
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	81 11       	cpse	r24, r1
    14b4:	08 c0       	rjmp	.+16     	; 0x14c6 <generalInit+0x4c4>
            TCCR0A = (1 << COM0A0) | (1 << COM0A1) | (1 << COM0B0) | (1 << COM0B1) | (1 << WGM00);
    14b6:	81 ef       	ldi	r24, 0xF1	; 241
    14b8:	84 bd       	out	0x24, r24	; 36
            TCCR2A = (1 << COM2B0) | (1 << COM2B1) | (1 << WGM20);
    14ba:	81 e3       	ldi	r24, 0x31	; 49
    14bc:	80 93 b0 00 	sts	0x00B0, r24
            pwmdir = 0;
    14c0:	10 92 b7 03 	sts	0x03B7, r1
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <generalInit+0x4d4>
        } else {
            TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00);
    14c6:	81 ea       	ldi	r24, 0xA1	; 161
    14c8:	84 bd       	out	0x24, r24	; 36
            TCCR2A = (1 << COM2B1) | (1 << WGM20);
    14ca:	81 e2       	ldi	r24, 0x21	; 33
    14cc:	80 93 b0 00 	sts	0x00B0, r24
            pwmdir = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	80 93 b7 03 	sts	0x03B7, r24
        }
        // F_CPU/64 timers
        TCCR0B = (1 << CS01) | (1 << CS00);
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	85 bd       	out	0x25, r24	; 37

        TCCR2B = (1 << CS22); // F_CPU/64
    14da:	84 e0       	ldi	r24, 0x04	; 4
    14dc:	80 93 b1 00 	sts	0x00B1, r24
    }

    // get the pwm value bytes
    memoryMarker = (PWM_VALUE);
    if (readEEPROM(tempStuff, memoryMarker, PWM_VALUE_BYTES) == 1) {
    14e0:	45 e0       	ldi	r20, 0x05	; 5
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	6e e7       	ldi	r22, 0x7E	; 126
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	ce 01       	movw	r24, r28
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	49 f4       	brne	.+18     	; 0x1506 <generalInit+0x504>
        pwmValues[0] = tempStuff[0];
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	80 93 ae 03 	sts	0x03AE, r24
        pwmValues[1] = tempStuff[1];
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 93 af 03 	sts	0x03AF, r24
        pwmValues[2] = tempStuff[2];
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	80 93 b0 03 	sts	0x03B0, r24
    1506:	02 ee       	ldi	r16, 0xE2	; 226
    1508:	12 e0       	ldi	r17, 0x02	; 2
                weeklyProgram[x][y] = tempStuff[y];
            }
        }
    }
    // get the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
    150a:	93 e8       	ldi	r25, 0x83	; 131
    150c:	e9 2e       	mov	r14, r25
    150e:	f1 2c       	mov	r15, r1
        pwmValues[2] = tempStuff[2];
    }
    // get the color change
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        memoryMarker = (COLOR_CHANGE + (x * COLOR_CHANGE_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, PWM_VALUE_BYTES) == 1) {
    1510:	45 e0       	ldi	r20, 0x05	; 5
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	b7 01       	movw	r22, r14
    1516:	ce 01       	movw	r24, r28
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	0e 94 80 03 	call	0x700	; 0x700 <readEEPROM>
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	59 f4       	brne	.+22     	; 0x1538 <generalInit+0x536>
 *
 ****************************************************************/

// Get variables out of EEPROM and set things up

void generalInit(void) {
    1522:	f8 01       	movw	r30, r16
    1524:	32 97       	sbiw	r30, 0x02	; 2
    // get the color change
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        memoryMarker = (COLOR_CHANGE + (x * COLOR_CHANGE_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, PWM_VALUE_BYTES) == 1) {
            for (y = 0; y < 3; y++) {
                colorChanges[x][y] = tempStuff[y];
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	80 83       	st	Z, r24
 *
 ****************************************************************/

// Get variables out of EEPROM and set things up

void generalInit(void) {
    152a:	f8 01       	movw	r30, r16
    152c:	31 97       	sbiw	r30, 0x01	; 1
    // get the color change
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        memoryMarker = (COLOR_CHANGE + (x * COLOR_CHANGE_BYTES));
        if (readEEPROM(tempStuff, memoryMarker, PWM_VALUE_BYTES) == 1) {
            for (y = 0; y < 3; y++) {
                colorChanges[x][y] = tempStuff[y];
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	80 83       	st	Z, r24
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	f8 01       	movw	r30, r16
    1536:	80 83       	st	Z, r24
    1538:	f5 e0       	ldi	r31, 0x05	; 5
    153a:	ef 0e       	add	r14, r31
    153c:	f1 1c       	adc	r15, r1
    153e:	0d 5f       	subi	r16, 0xFD	; 253
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
        pwmValues[0] = tempStuff[0];
        pwmValues[1] = tempStuff[1];
        pwmValues[2] = tempStuff[2];
    }
    // get the color change
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
    1542:	21 ea       	ldi	r18, 0xA1	; 161
    1544:	e2 16       	cp	r14, r18
    1546:	f1 04       	cpc	r15, r1
    1548:	19 f7       	brne	.-58     	; 0x1510 <generalInit+0x50e>
            for (y = 0; y < 3; y++) {
                colorChanges[x][y] = tempStuff[y];
            }
        }
    }
}
    154a:	2e 96       	adiw	r28, 0x0e	; 14
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	08 95       	ret

00001564 <unformatAddress>:
    sendMessage(statusMsg);
}

// take the int and return the array

void unformatAddress(uint64_t oldAddress, char * formattedAddress) {
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	f8 01       	movw	r30, r16
    uint64_t tempInt = oldAddress;
    formattedAddress[4] = (tempInt & 0xff);
    156a:	24 83       	std	Z+4, r18	; 0x04
    tempInt >>= 8;
    156c:	08 e0       	ldi	r16, 0x08	; 8
    156e:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <__lshrdi3>
    formattedAddress[3] = (tempInt & 0xff);
    1572:	23 83       	std	Z+3, r18	; 0x03
    tempInt >>= 8;
    1574:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <__lshrdi3>
    formattedAddress[2] = (tempInt & 0xff);
    1578:	22 83       	std	Z+2, r18	; 0x02
    tempInt >>= 8;
    157a:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <__lshrdi3>
    formattedAddress[1] = (tempInt & 0xff);
    157e:	21 83       	std	Z+1, r18	; 0x01
    tempInt >>= 8;
    1580:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <__lshrdi3>
    formattedAddress[0] = (tempInt & 0xff);
    1584:	20 83       	st	Z, r18
}
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <getInput>:
// 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG


// actually check the input and do something based on that

void getInput(int inputNumber) {
    158c:	2f 92       	push	r2
    158e:	3f 92       	push	r3
    1590:	4f 92       	push	r4
    1592:	5f 92       	push	r5
    1594:	6f 92       	push	r6
    1596:	7f 92       	push	r7
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	2c 97       	sbiw	r28, 0x0c	; 12
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	fc 01       	movw	r30, r24
    long temp = 0;
    char test = 0;
    char pwmValue = 0;
    char whichRGB = 0;
    // set up how many seconds are at the beginning of today
    long daySeconds = (dow * 86400);
    15c2:	20 90 f2 02 	lds	r2, 0x02F2
    15c6:	30 90 f3 02 	lds	r3, 0x02F3
    15ca:	21 01       	movw	r4, r2
    15cc:	61 2c       	mov	r6, r1
    15ce:	71 2c       	mov	r7, r1
    15d0:	a3 01       	movw	r20, r6
    15d2:	92 01       	movw	r18, r4
    15d4:	60 e8       	ldi	r22, 0x80	; 128
    15d6:	71 e5       	ldi	r23, 0x51	; 81
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <__mulsi3>
    15e0:	4b 01       	movw	r8, r22
    15e2:	5c 01       	movw	r10, r24
    long startTime, stopTime;
    startTime = stopTime = 0;
    outputNum = duration = low = high = switchNumber = 0;
    outputNum = inputs[inputNumber][0];
    15e4:	43 e0       	ldi	r20, 0x03	; 3
    15e6:	ee 0f       	add	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	4a 95       	dec	r20
    15ec:	e1 f7       	brne	.-8      	; 0x15e6 <getInput+0x5a>
    15ee:	e0 5a       	subi	r30, 0xA0	; 160
    15f0:	fc 4f       	sbci	r31, 0xFC	; 252
    15f2:	60 81       	ld	r22, Z
    low = inputs[inputNumber][1];
    15f4:	c1 80       	ldd	r12, Z+1	; 0x01
    15f6:	ec 2c       	mov	r14, r12
    15f8:	f1 2c       	mov	r15, r1
    high = inputs[inputNumber][2];
    15fa:	02 81       	ldd	r16, Z+2	; 0x02
    15fc:	09 83       	std	Y+1, r16	; 0x01
    switchNumber = inputs[inputNumber][3];
    15fe:	03 81       	ldd	r16, Z+3	; 0x03
    1600:	10 e0       	ldi	r17, 0x00	; 0
    temp = inputs[inputNumber][4];
    duration = (temp << 8);
    1602:	34 81       	ldd	r19, Z+4	; 0x04
    1604:	20 e0       	ldi	r18, 0x00	; 0
    temp = inputs[inputNumber][5];
    duration |= temp;
    1606:	85 81       	ldd	r24, Z+5	; 0x05
    1608:	a9 01       	movw	r20, r18
    160a:	48 2b       	or	r20, r24
    160c:	5c 87       	std	Y+12, r21	; 0x0c
    160e:	4b 87       	std	Y+11, r20	; 0x0b
    whichRGB = inputs[inputNumber][7];
    1610:	d7 80       	ldd	r13, Z+7	; 0x07
    // if this is an analog input than both the low% or the high% will not be 255
    if (low != 255 && high != 255) {
    1612:	5f ef       	ldi	r21, 0xFF	; 255
    1614:	e5 16       	cp	r14, r21
    1616:	f1 04       	cpc	r15, r1
    1618:	09 f4       	brne	.+2      	; 0x161c <getInput+0x90>
    161a:	46 c1       	rjmp	.+652    	; 0x18a8 <getInput+0x31c>
    long startTime, stopTime;
    startTime = stopTime = 0;
    outputNum = duration = low = high = switchNumber = 0;
    outputNum = inputs[inputNumber][0];
    low = inputs[inputNumber][1];
    high = inputs[inputNumber][2];
    161c:	f9 81       	ldd	r31, Y+1	; 0x01
    161e:	ef 2f       	mov	r30, r31
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	fa 87       	std	Y+10, r31	; 0x0a
    1624:	e9 87       	std	Y+9, r30	; 0x09
    duration = (temp << 8);
    temp = inputs[inputNumber][5];
    duration |= temp;
    whichRGB = inputs[inputNumber][7];
    // if this is an analog input than both the low% or the high% will not be 255
    if (low != 255 && high != 255) {
    1626:	ef 3f       	cpi	r30, 0xFF	; 255
    1628:	f1 05       	cpc	r31, r1
    162a:	09 f4       	brne	.+2      	; 0x162e <getInput+0xa2>
    162c:	3d c1       	rjmp	.+634    	; 0x18a8 <getInput+0x31c>
    // set up how many seconds are at the beginning of today
    long daySeconds = (dow * 86400);
    long startTime, stopTime;
    startTime = stopTime = 0;
    outputNum = duration = low = high = switchNumber = 0;
    outputNum = inputs[inputNumber][0];
    162e:	70 e0       	ldi	r23, 0x00	; 0
    whichRGB = inputs[inputNumber][7];
    // if this is an analog input than both the low% or the high% will not be 255
    if (low != 255 && high != 255) {
        // this is an analog input
        // currently only port C is supported for analog inputs
        temp = outputNum - 32;
    1630:	60 52       	subi	r22, 0x20	; 32
    1632:	71 09       	sbc	r23, r1
    1634:	cb 01       	movw	r24, r22
    1636:	a0 e0       	ldi	r26, 0x00	; 0
    1638:	b0 e0       	ldi	r27, 0x00	; 0
        temp = temp / 2;
    163a:	b5 95       	asr	r27
    163c:	a7 95       	ror	r26
    163e:	97 95       	ror	r25
    1640:	87 95       	ror	r24
        if (temp > 7) // if things got goofed up somehow 
    1642:	88 30       	cpi	r24, 0x08	; 8
    1644:	91 05       	cpc	r25, r1
    1646:	a1 05       	cpc	r26, r1
    1648:	b1 05       	cpc	r27, r1
    164a:	0c f0       	brlt	.+2      	; 0x164e <getInput+0xc2>
    164c:	7e c2       	rjmp	.+1276   	; 0x1b4a <getInput+0x5be>
            return;
        ADMUX = temp; // which pin to check
    164e:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA |= (1 << ADEN) | (1 << ADSC); // turn on ADC and start a conversion
    1652:	80 91 7a 00 	lds	r24, 0x007A
    1656:	80 6c       	ori	r24, 0xC0	; 192
    1658:	80 93 7a 00 	sts	0x007A, r24
        loop_until_bit_is_set(ADCSRA, ADIF);
    165c:	80 91 7a 00 	lds	r24, 0x007A
    1660:	84 ff       	sbrs	r24, 4
    1662:	fc cf       	rjmp	.-8      	; 0x165c <getInput+0xd0>
        temp = ADC;
    1664:	20 91 78 00 	lds	r18, 0x0078
    1668:	30 91 79 00 	lds	r19, 0x0079
        temp = temp * 255;
    166c:	af ef       	ldi	r26, 0xFF	; 255
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__umulhisi3>
        temp = temp / 1024; // now its a number between 0 and 255;
    1674:	2a e0       	ldi	r18, 0x0A	; 10
    1676:	95 95       	asr	r25
    1678:	87 95       	ror	r24
    167a:	77 95       	ror	r23
    167c:	67 95       	ror	r22
    167e:	2a 95       	dec	r18
    1680:	d1 f7       	brne	.-12     	; 0x1676 <getInput+0xea>
        ADCSRA |= (1 << ADIF); // clear the ADC
    1682:	20 91 7a 00 	lds	r18, 0x007A
    1686:	20 61       	ori	r18, 0x10	; 16
    1688:	20 93 7a 00 	sts	0x007A, r18
        // see if we are turning on the switch
        if (temp > low && temp < (high + 1)) {
    168c:	4c 2c       	mov	r4, r12
    168e:	51 2c       	mov	r5, r1
    1690:	61 2c       	mov	r6, r1
    1692:	71 2c       	mov	r7, r1
    1694:	46 16       	cp	r4, r22
    1696:	57 06       	cpc	r5, r23
    1698:	68 06       	cpc	r6, r24
    169a:	79 06       	cpc	r7, r25
    169c:	0c f0       	brlt	.+2      	; 0x16a0 <getInput+0x114>
    169e:	55 c2       	rjmp	.+1194   	; 0x1b4a <getInput+0x5be>
    16a0:	a9 85       	ldd	r26, Y+9	; 0x09
    16a2:	ba 85       	ldd	r27, Y+10	; 0x0a
    16a4:	11 96       	adiw	r26, 0x01	; 1
    16a6:	9d 01       	movw	r18, r26
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	62 17       	cp	r22, r18
    16ae:	73 07       	cpc	r23, r19
    16b0:	84 07       	cpc	r24, r20
    16b2:	95 07       	cpc	r25, r21
    16b4:	0c f0       	brlt	.+2      	; 0x16b8 <getInput+0x12c>
    16b6:	49 c2       	rjmp	.+1170   	; 0x1b4a <getInput+0x5be>
            // see if it is a PWM switch (not a program)
            if (switchNumber < 128 && switchStuff[switchNumber] == 200) {
    16b8:	00 38       	cpi	r16, 0x80	; 128
    16ba:	11 05       	cpc	r17, r1
    16bc:	90 f5       	brcc	.+100    	; 0x1722 <getInput+0x196>
    16be:	f8 01       	movw	r30, r16
    16c0:	e0 5c       	subi	r30, 0xC0	; 192
    16c2:	fc 4f       	sbci	r31, 0xFC	; 252
    16c4:	20 81       	ld	r18, Z
    16c6:	28 3c       	cpi	r18, 0xC8	; 200
    16c8:	09 f0       	breq	.+2      	; 0x16cc <getInput+0x140>
    16ca:	41 c1       	rjmp	.+642    	; 0x194e <getInput+0x3c2>
                // this is a PWM so we're doing it based on the relative ADC value
                // see if we are using the whole range.
                if ((high - low) > 250) {
    16cc:	49 85       	ldd	r20, Y+9	; 0x09
    16ce:	5a 85       	ldd	r21, Y+10	; 0x0a
    16d0:	4e 19       	sub	r20, r14
    16d2:	5f 09       	sbc	r21, r15
    16d4:	4b 3f       	cpi	r20, 0xFB	; 251
    16d6:	51 05       	cpc	r21, r1
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <getInput+0x150>
    16da:	39 c1       	rjmp	.+626    	; 0x194e <getInput+0x3c2>
                    pwmValue = temp;
                } else {
                    // figure out what percentage between the values we are
                    char range = high - low;
                    temp = temp - low;
    16dc:	9b 01       	movw	r18, r22
    16de:	ac 01       	movw	r20, r24
    16e0:	24 19       	sub	r18, r4
    16e2:	35 09       	sbc	r19, r5
    16e4:	46 09       	sbc	r20, r6
    16e6:	57 09       	sbc	r21, r7
                    temp = temp * 255;
    16e8:	af ef       	ldi	r26, 0xFF	; 255
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <__muluhisi3>
                // see if we are using the whole range.
                if ((high - low) > 250) {
                    pwmValue = temp;
                } else {
                    // figure out what percentage between the values we are
                    char range = high - low;
    16f0:	29 81       	ldd	r18, Y+1	; 0x01
    16f2:	2c 19       	sub	r18, r12
                    temp = temp - low;
                    temp = temp * 255;
                    temp = temp / range; // now we have a relative value between 0&255
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__divmodsi4>
                    pwmValue = temp;
    16fe:	82 2f       	mov	r24, r18
                    // see if we are changing RGB
                    if (whichRGB & 4)
    1700:	d2 fc       	sbrc	r13, 2
                        pwmValues[0] = pwmValue;
    1702:	20 93 ae 03 	sts	0x03AE, r18
                    if (whichRGB & 2)
    1706:	d1 fc       	sbrc	r13, 1
                        pwmValues[1] = pwmValue;
    1708:	80 93 af 03 	sts	0x03AF, r24
                    if (whichRGB & 1)
    170c:	d0 fc       	sbrc	r13, 0
                        pwmValues[2] = pwmValue;
    170e:	80 93 b0 03 	sts	0x03B0, r24
                    if (whichRGB & 7) // if anything changed
    1712:	8d 2d       	mov	r24, r13
    1714:	87 70       	andi	r24, 0x07	; 7
    1716:	09 f4       	brne	.+2      	; 0x171a <getInput+0x18e>
    1718:	1a c1       	rjmp	.+564    	; 0x194e <getInput+0x3c2>
                        switchChanged = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	80 93 81 03 	sts	0x0381, r24
    1720:	16 c1       	rjmp	.+556    	; 0x194e <getInput+0x3c2>
    1722:	ec e6       	ldi	r30, 0x6C	; 108
    1724:	f4 e0       	ldi	r31, 0x04	; 4
// 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG


// actually check the input and do something based on that

void getInput(int inputNumber) {
    1726:	20 e0       	ldi	r18, 0x00	; 0
            } else { // its a program;
                test = 0;
                // check and make sure we are within the time limits (eg dusk to dawn)
                // first if no time limits set up then ignore it
                for (x = 0; x < NUM_LIMITS; x++) {
                    if (timeLimits[x][2] > 0)
    1728:	80 81       	ld	r24, Z
    172a:	91 81       	ldd	r25, Z+1	; 0x01
    172c:	a2 81       	ldd	r26, Z+2	; 0x02
    172e:	b3 81       	ldd	r27, Z+3	; 0x03
    1730:	89 2b       	or	r24, r25
    1732:	8a 2b       	or	r24, r26
    1734:	8b 2b       	or	r24, r27
    1736:	09 f0       	breq	.+2      	; 0x173a <getInput+0x1ae>
                        test = 1;
    1738:	21 e0       	ldi	r18, 0x01	; 1
    173a:	3c 96       	adiw	r30, 0x0c	; 12
                    switchStatus[switchNumber] = (weeklySeconds + duration);
            } else { // its a program;
                test = 0;
                // check and make sure we are within the time limits (eg dusk to dawn)
                // first if no time limits set up then ignore it
                for (x = 0; x < NUM_LIMITS; x++) {
    173c:	34 e0       	ldi	r19, 0x04	; 4
    173e:	ec 39       	cpi	r30, 0x9C	; 156
    1740:	f3 07       	cpc	r31, r19
    1742:	91 f7       	brne	.-28     	; 0x1728 <getInput+0x19c>
                    if (timeLimits[x][2] > 0)
                        test = 1;
                }
                // no limits set up
                if (test == 0)
    1744:	21 11       	cpse	r18, r1
    1746:	0a c0       	rjmp	.+20     	; 0x175c <getInput+0x1d0>
                    startTheProgram((switchNumber - 128), duration, 0);
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	a9 01       	movw	r20, r18
    174e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1750:	7c 85       	ldd	r23, Y+12	; 0x0c
    1752:	c8 01       	movw	r24, r16
    1754:	80 58       	subi	r24, 0x80	; 128
    1756:	91 09       	sbc	r25, r1
    1758:	0e 94 02 03 	call	0x604	; 0x604 <startTheProgram>
    175c:	84 e6       	ldi	r24, 0x64	; 100
    175e:	e8 2e       	mov	r14, r24
    1760:	84 e0       	ldi	r24, 0x04	; 4
    1762:	f8 2e       	mov	r15, r24
                                startTheProgram((switchNumber - 128), duration, 0);
                        }
                    } else {
                        if (weeklySeconds >= (startTime + daySeconds) &&
                                weeklySeconds <= (stopTime + daySeconds)) {
                            if (timeLimits[x][2] & (1 << dow))
    1764:	cc 24       	eor	r12, r12
    1766:	c3 94       	inc	r12
    1768:	d1 2c       	mov	r13, r1
                                startTheProgram((switchNumber - 128), duration, 0);
    176a:	00 58       	subi	r16, 0x80	; 128
    176c:	11 09       	sbc	r17, r1
                }
                // no limits set up
                if (test == 0)
                    startTheProgram((switchNumber - 128), duration, 0);
                for (x = 0; x < NUM_LIMITS; x++) {
                    startTime = timeLimits[x][0];
    176e:	d7 01       	movw	r26, r14
    1770:	4d 90       	ld	r4, X+
    1772:	5d 90       	ld	r5, X+
    1774:	6d 90       	ld	r6, X+
    1776:	7c 90       	ld	r7, X
    1778:	13 97       	sbiw	r26, 0x03	; 3
                    stopTime = timeLimits[x][1];
    177a:	14 96       	adiw	r26, 0x04	; 4
    177c:	4d 91       	ld	r20, X+
    177e:	5d 91       	ld	r21, X+
    1780:	6d 91       	ld	r22, X+
    1782:	7c 91       	ld	r23, X
    1784:	17 97       	sbiw	r26, 0x07	; 7
    1786:	80 91 aa 03 	lds	r24, 0x03AA
    178a:	90 91 ab 03 	lds	r25, 0x03AB
    178e:	a0 91 ac 03 	lds	r26, 0x03AC
    1792:	b0 91 ad 03 	lds	r27, 0x03AD
                    // deal with nights that cross midnight
                    if (stopTime < startTime) {
    1796:	44 15       	cp	r20, r4
    1798:	55 05       	cpc	r21, r5
    179a:	66 05       	cpc	r22, r6
    179c:	77 05       	cpc	r23, r7
    179e:	0c f0       	brlt	.+2      	; 0x17a2 <getInput+0x216>
    17a0:	46 c0       	rjmp	.+140    	; 0x182e <getInput+0x2a2>
                        temp = dow;
    17a2:	20 91 f2 02 	lds	r18, 0x02F2
    17a6:	30 91 f3 02 	lds	r19, 0x02F3
                        // weekly seconds resets at the end of the week. so do lots of 9
                        if (weeklySeconds <= (stopTime + daySeconds)) {
    17aa:	48 0d       	add	r20, r8
    17ac:	59 1d       	adc	r21, r9
    17ae:	6a 1d       	adc	r22, r10
    17b0:	7b 1d       	adc	r23, r11
    17b2:	48 17       	cp	r20, r24
    17b4:	59 07       	cpc	r21, r25
    17b6:	6a 07       	cpc	r22, r26
    17b8:	7b 07       	cpc	r23, r27
    17ba:	48 f1       	brcs	.+82     	; 0x180e <getInput+0x282>
                for (x = 0; x < NUM_LIMITS; x++) {
                    startTime = timeLimits[x][0];
                    stopTime = timeLimits[x][1];
                    // deal with nights that cross midnight
                    if (stopTime < startTime) {
                        temp = dow;
    17bc:	c9 01       	movw	r24, r18
    17be:	a0 e0       	ldi	r26, 0x00	; 0
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
                        // weekly seconds resets at the end of the week. so do lots of 9
                        if (weeklySeconds <= (stopTime + daySeconds)) {
                            // k this is dow + 1
                            if (temp == 0)
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	a1 05       	cpc	r26, r1
    17c6:	b1 05       	cpc	r27, r1
    17c8:	21 f0       	breq	.+8      	; 0x17d2 <getInput+0x246>
                                temp = 6;
                            else
                                temp--;
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	a1 09       	sbc	r26, r1
    17ce:	b1 09       	sbc	r27, r1
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <getInput+0x24e>
                        temp = dow;
                        // weekly seconds resets at the end of the week. so do lots of 9
                        if (weeklySeconds <= (stopTime + daySeconds)) {
                            // k this is dow + 1
                            if (temp == 0)
                                temp = 6;
    17d2:	86 e0       	ldi	r24, 0x06	; 6
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	a0 e0       	ldi	r26, 0x00	; 0
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
                            else
                                temp--;
                            if (timeLimits[x][2] & (1 << temp))
    17da:	96 01       	movw	r18, r12
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <getInput+0x256>
    17de:	22 0f       	add	r18, r18
    17e0:	33 1f       	adc	r19, r19
    17e2:	8a 95       	dec	r24
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <getInput+0x252>
    17e6:	a9 01       	movw	r20, r18
    17e8:	66 27       	eor	r22, r22
    17ea:	57 fd       	sbrc	r21, 7
    17ec:	60 95       	com	r22
    17ee:	76 2f       	mov	r23, r22
    17f0:	f7 01       	movw	r30, r14
    17f2:	80 85       	ldd	r24, Z+8	; 0x08
    17f4:	91 85       	ldd	r25, Z+9	; 0x09
    17f6:	a2 85       	ldd	r26, Z+10	; 0x0a
    17f8:	b3 85       	ldd	r27, Z+11	; 0x0b
    17fa:	48 23       	and	r20, r24
    17fc:	59 23       	and	r21, r25
    17fe:	6a 23       	and	r22, r26
    1800:	7b 23       	and	r23, r27
    1802:	45 2b       	or	r20, r21
    1804:	46 2b       	or	r20, r22
    1806:	47 2b       	or	r20, r23
    1808:	09 f4       	brne	.+2      	; 0x180c <getInput+0x280>
    180a:	44 c0       	rjmp	.+136    	; 0x1894 <getInput+0x308>
    180c:	3b c0       	rjmp	.+118    	; 0x1884 <getInput+0x2f8>
                                startTheProgram((switchNumber - 128), duration, 0);
                        } else if (weeklySeconds >= (startTime + daySeconds)) {
    180e:	48 0c       	add	r4, r8
    1810:	59 1c       	adc	r5, r9
    1812:	6a 1c       	adc	r6, r10
    1814:	7b 1c       	adc	r7, r11
    1816:	84 15       	cp	r24, r4
    1818:	95 05       	cpc	r25, r5
    181a:	a6 05       	cpc	r26, r6
    181c:	b7 05       	cpc	r27, r7
    181e:	d0 f1       	brcs	.+116    	; 0x1894 <getInput+0x308>
                            if (timeLimits[x][2] & (1 << dow))
    1820:	c6 01       	movw	r24, r12
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <getInput+0x29c>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	2a 95       	dec	r18
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <getInput+0x298>
    182c:	1a c0       	rjmp	.+52     	; 0x1862 <getInput+0x2d6>
                                startTheProgram((switchNumber - 128), duration, 0);
                        }
                    } else {
                        if (weeklySeconds >= (startTime + daySeconds) &&
    182e:	48 0c       	add	r4, r8
    1830:	59 1c       	adc	r5, r9
    1832:	6a 1c       	adc	r6, r10
    1834:	7b 1c       	adc	r7, r11
    1836:	84 15       	cp	r24, r4
    1838:	95 05       	cpc	r25, r5
    183a:	a6 05       	cpc	r26, r6
    183c:	b7 05       	cpc	r27, r7
    183e:	50 f1       	brcs	.+84     	; 0x1894 <getInput+0x308>
                                weeklySeconds <= (stopTime + daySeconds)) {
    1840:	48 0d       	add	r20, r8
    1842:	59 1d       	adc	r21, r9
    1844:	6a 1d       	adc	r22, r10
    1846:	7b 1d       	adc	r23, r11
                        } else if (weeklySeconds >= (startTime + daySeconds)) {
                            if (timeLimits[x][2] & (1 << dow))
                                startTheProgram((switchNumber - 128), duration, 0);
                        }
                    } else {
                        if (weeklySeconds >= (startTime + daySeconds) &&
    1848:	48 17       	cp	r20, r24
    184a:	59 07       	cpc	r21, r25
    184c:	6a 07       	cpc	r22, r26
    184e:	7b 07       	cpc	r23, r27
    1850:	08 f1       	brcs	.+66     	; 0x1894 <getInput+0x308>
                                weeklySeconds <= (stopTime + daySeconds)) {
                            if (timeLimits[x][2] & (1 << dow))
    1852:	c6 01       	movw	r24, r12
    1854:	00 90 f2 02 	lds	r0, 0x02F2
    1858:	02 c0       	rjmp	.+4      	; 0x185e <getInput+0x2d2>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <getInput+0x2ce>
    1862:	aa 27       	eor	r26, r26
    1864:	97 fd       	sbrc	r25, 7
    1866:	a0 95       	com	r26
    1868:	ba 2f       	mov	r27, r26
    186a:	f7 01       	movw	r30, r14
    186c:	40 85       	ldd	r20, Z+8	; 0x08
    186e:	51 85       	ldd	r21, Z+9	; 0x09
    1870:	62 85       	ldd	r22, Z+10	; 0x0a
    1872:	73 85       	ldd	r23, Z+11	; 0x0b
    1874:	84 23       	and	r24, r20
    1876:	95 23       	and	r25, r21
    1878:	a6 23       	and	r26, r22
    187a:	b7 23       	and	r27, r23
    187c:	89 2b       	or	r24, r25
    187e:	8a 2b       	or	r24, r26
    1880:	8b 2b       	or	r24, r27
    1882:	41 f0       	breq	.+16     	; 0x1894 <getInput+0x308>
                                startTheProgram((switchNumber - 128), duration, 0);
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	a9 01       	movw	r20, r18
    188a:	6b 85       	ldd	r22, Y+11	; 0x0b
    188c:	7c 85       	ldd	r23, Y+12	; 0x0c
    188e:	c8 01       	movw	r24, r16
    1890:	0e 94 02 03 	call	0x604	; 0x604 <startTheProgram>
    1894:	fc e0       	ldi	r31, 0x0C	; 12
    1896:	ef 0e       	add	r14, r31
    1898:	f1 1c       	adc	r15, r1
                        test = 1;
                }
                // no limits set up
                if (test == 0)
                    startTheProgram((switchNumber - 128), duration, 0);
                for (x = 0; x < NUM_LIMITS; x++) {
    189a:	24 e9       	ldi	r18, 0x94	; 148
    189c:	e2 16       	cp	r14, r18
    189e:	24 e0       	ldi	r18, 0x04	; 4
    18a0:	f2 06       	cpc	r15, r18
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <getInput+0x31a>
    18a4:	64 cf       	rjmp	.-312    	; 0x176e <getInput+0x1e2>
    18a6:	51 c1       	rjmp	.+674    	; 0x1b4a <getInput+0x5be>
        // this is a digital input
        // value of 255 (default) means nothing programmed
        // value of 0-15 = PORTA, 16-31 = PORTB, 32-47 = PORTC, 
        // 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG        
        // figure out what we are dealing with and check it.
        temp = outputNum;
    18a8:	86 2f       	mov	r24, r22
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e0       	ldi	r26, 0x00	; 0
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
        if (temp > 15 && temp < 32) {
    18b0:	ac 01       	movw	r20, r24
    18b2:	bd 01       	movw	r22, r26
    18b4:	40 51       	subi	r20, 0x10	; 16
    18b6:	51 09       	sbc	r21, r1
    18b8:	61 09       	sbc	r22, r1
    18ba:	71 09       	sbc	r23, r1
    18bc:	40 31       	cpi	r20, 0x10	; 16
    18be:	51 05       	cpc	r21, r1
    18c0:	61 05       	cpc	r22, r1
    18c2:	71 05       	cpc	r23, r1
    18c4:	30 f4       	brcc	.+12     	; 0x18d2 <getInput+0x346>
            thisPin = &PINB;
            temp -= 16;
    18c6:	cb 01       	movw	r24, r22
    18c8:	ba 01       	movw	r22, r20
        // value of 0-15 = PORTA, 16-31 = PORTB, 32-47 = PORTC, 
        // 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG        
        // figure out what we are dealing with and check it.
        temp = outputNum;
        if (temp > 15 && temp < 32) {
            thisPin = &PINB;
    18ca:	b3 e2       	ldi	r27, 0x23	; 35
    18cc:	cb 2e       	mov	r12, r27
    18ce:	d1 2c       	mov	r13, r1
    18d0:	1e c0       	rjmp	.+60     	; 0x190e <getInput+0x382>
        } else if (temp < 16) {
            thisPin = &PINA;
            temp -= 0;
#endif
#ifdef PINC
        } else if (temp < 48) {
    18d2:	80 33       	cpi	r24, 0x30	; 48
    18d4:	91 05       	cpc	r25, r1
    18d6:	a1 05       	cpc	r26, r1
    18d8:	b1 05       	cpc	r27, r1
    18da:	54 f4       	brge	.+20     	; 0x18f0 <getInput+0x364>
            thisPin = &PINC;
            temp -= 32;
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	60 52       	subi	r22, 0x20	; 32
    18e2:	71 09       	sbc	r23, r1
    18e4:	81 09       	sbc	r24, r1
    18e6:	91 09       	sbc	r25, r1
            thisPin = &PINA;
            temp -= 0;
#endif
#ifdef PINC
        } else if (temp < 48) {
            thisPin = &PINC;
    18e8:	a6 e2       	ldi	r26, 0x26	; 38
    18ea:	ca 2e       	mov	r12, r26
    18ec:	d1 2c       	mov	r13, r1
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <getInput+0x382>
            temp -= 32;
#endif
#ifdef PIND
        } else if (temp < 64) {
    18f0:	80 34       	cpi	r24, 0x40	; 64
    18f2:	91 05       	cpc	r25, r1
    18f4:	a1 05       	cpc	r26, r1
    18f6:	b1 05       	cpc	r27, r1
    18f8:	0c f0       	brlt	.+2      	; 0x18fc <getInput+0x370>
    18fa:	27 c1       	rjmp	.+590    	; 0x1b4a <getInput+0x5be>
            thisPin = &PIND;
            temp -= 48;
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	60 53       	subi	r22, 0x30	; 48
    1902:	71 09       	sbc	r23, r1
    1904:	81 09       	sbc	r24, r1
    1906:	91 09       	sbc	r25, r1
            thisPin = &PINC;
            temp -= 32;
#endif
#ifdef PIND
        } else if (temp < 64) {
            thisPin = &PIND;
    1908:	f9 e2       	ldi	r31, 0x29	; 41
    190a:	cf 2e       	mov	r12, r31
    190c:	d1 2c       	mov	r13, r1
            // something went wrong.  Who cares.
            return;
        }
        // if we want the input to be high then low = 0.  If we want it to be 
        // low to be on then low = 255;
        temp = temp / 2;
    190e:	22 e0       	ldi	r18, 0x02	; 2
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__divmodsi4>
        if (temp > 7) {
    191a:	28 30       	cpi	r18, 0x08	; 8
    191c:	31 05       	cpc	r19, r1
    191e:	41 05       	cpc	r20, r1
    1920:	51 05       	cpc	r21, r1
    1922:	0c f0       	brlt	.+2      	; 0x1926 <getInput+0x39a>
    1924:	12 c1       	rjmp	.+548    	; 0x1b4a <getInput+0x5be>
            return; // something wrong again
        }
        int pinsOn = *thisPin;
    1926:	d6 01       	movw	r26, r12
    1928:	8c 91       	ld	r24, X
    192a:	90 e0       	ldi	r25, 0x00	; 0
        char yeaOurInputIsOn = 0;
        if (pinsOn & (1 << temp)) {
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <getInput+0x3a6>
    192e:	95 95       	asr	r25
    1930:	87 95       	ror	r24
    1932:	2a 95       	dec	r18
    1934:	e2 f7       	brpl	.-8      	; 0x192e <getInput+0x3a2>
    1936:	80 ff       	sbrs	r24, 0
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <getInput+0x3b6>
            // pin is high
            if (low == 0)
    193a:	ef 28       	or	r14, r15
    193c:	09 f4       	brne	.+2      	; 0x1940 <getInput+0x3b4>
    193e:	fd c0       	rjmp	.+506    	; 0x1b3a <getInput+0x5ae>
    1940:	04 c1       	rjmp	.+520    	; 0x1b4a <getInput+0x5be>
                yeaOurInputIsOn = 1;
        } else {
            // pin is low
            if (low == 255)
    1942:	bf ef       	ldi	r27, 0xFF	; 255
    1944:	eb 16       	cp	r14, r27
    1946:	f1 04       	cpc	r15, r1
    1948:	09 f0       	breq	.+2      	; 0x194c <getInput+0x3c0>
    194a:	ff c0       	rjmp	.+510    	; 0x1b4a <getInput+0x5be>
    194c:	f6 c0       	rjmp	.+492    	; 0x1b3a <getInput+0x5ae>
                yeaOurInputIsOn = 1;
        }
        if (yeaOurInputIsOn == 1) {
            if (switchNumber < 128) { // this is a switch
                if (switchStatus[switchNumber] == 0) // the switch is off
    194e:	00 0f       	add	r16, r16
    1950:	11 1f       	adc	r17, r17
    1952:	00 0f       	add	r16, r16
    1954:	11 1f       	adc	r17, r17
    1956:	f8 01       	movw	r30, r16
    1958:	e0 50       	subi	r30, 0x00	; 0
    195a:	fd 4f       	sbci	r31, 0xFD	; 253
    195c:	40 81       	ld	r20, Z
    195e:	51 81       	ldd	r21, Z+1	; 0x01
    1960:	62 81       	ldd	r22, Z+2	; 0x02
    1962:	73 81       	ldd	r23, Z+3	; 0x03
    1964:	41 15       	cp	r20, r1
    1966:	51 05       	cpc	r21, r1
    1968:	61 05       	cpc	r22, r1
    196a:	71 05       	cpc	r23, r1
    196c:	19 f4       	brne	.+6      	; 0x1974 <getInput+0x3e8>
                    switchChanged = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 81 03 	sts	0x0381, r24
                if ((switchStatus[switchNumber]) < (weeklySeconds + duration))
    1974:	80 91 aa 03 	lds	r24, 0x03AA
    1978:	90 91 ab 03 	lds	r25, 0x03AB
    197c:	a0 91 ac 03 	lds	r26, 0x03AC
    1980:	b0 91 ad 03 	lds	r27, 0x03AD
    1984:	eb 85       	ldd	r30, Y+11	; 0x0b
    1986:	fc 85       	ldd	r31, Y+12	; 0x0c
    1988:	8e 0f       	add	r24, r30
    198a:	9f 1f       	adc	r25, r31
    198c:	a1 1d       	adc	r26, r1
    198e:	b1 1d       	adc	r27, r1
    1990:	48 17       	cp	r20, r24
    1992:	59 07       	cpc	r21, r25
    1994:	6a 07       	cpc	r22, r26
    1996:	7b 07       	cpc	r23, r27
    1998:	08 f0       	brcs	.+2      	; 0x199c <getInput+0x410>
    199a:	d7 c0       	rjmp	.+430    	; 0x1b4a <getInput+0x5be>
                    switchStatus[switchNumber] = (weeklySeconds + duration);
    199c:	f8 01       	movw	r30, r16
    199e:	e0 50       	subi	r30, 0x00	; 0
    19a0:	fd 4f       	sbci	r31, 0xFD	; 253
    19a2:	80 83       	st	Z, r24
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	a2 83       	std	Z+2, r26	; 0x02
    19a8:	b3 83       	std	Z+3, r27	; 0x03
    19aa:	cf c0       	rjmp	.+414    	; 0x1b4a <getInput+0x5be>
            } else { // its a program;
                test = 0;
                // check and make sure we are within the time limits (eg dusk to dawn)
                // first if no time limits set up then ignore it
                for (x = 0; x < NUM_LIMITS; x++) {
                    if (timeLimits[x][2] > 0)
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	a2 81       	ldd	r26, Z+2	; 0x02
    19b2:	b3 81       	ldd	r27, Z+3	; 0x03
    19b4:	89 2b       	or	r24, r25
    19b6:	8a 2b       	or	r24, r26
    19b8:	8b 2b       	or	r24, r27
    19ba:	09 f0       	breq	.+2      	; 0x19be <getInput+0x432>
                        test = 1;
    19bc:	21 e0       	ldi	r18, 0x01	; 1
    19be:	3c 96       	adiw	r30, 0x0c	; 12
                    switchStatus[switchNumber] = (weeklySeconds + duration);
            } else { // its a program;
                test = 0;
                // check and make sure we are within the time limits (eg dusk to dawn)
                // first if no time limits set up then ignore it
                for (x = 0; x < NUM_LIMITS; x++) {
    19c0:	34 e0       	ldi	r19, 0x04	; 4
    19c2:	ec 39       	cpi	r30, 0x9C	; 156
    19c4:	f3 07       	cpc	r31, r19
    19c6:	91 f7       	brne	.-28     	; 0x19ac <getInput+0x420>
                    if (timeLimits[x][2] > 0)
                        test = 1;
                }
                // no limits set up
                if (test == 0)
    19c8:	21 11       	cpse	r18, r1
    19ca:	0a c0       	rjmp	.+20     	; 0x19e0 <getInput+0x454>
                    startTheProgram((switchNumber - 128), duration, 0);
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	a9 01       	movw	r20, r18
    19d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d6:	c8 01       	movw	r24, r16
    19d8:	80 58       	subi	r24, 0x80	; 128
    19da:	91 09       	sbc	r25, r1
    19dc:	0e 94 02 03 	call	0x604	; 0x604 <startTheProgram>
                        if (weeklySeconds <= (stopTime + daySeconds)) {
                            // k this is dow + 1
                            if (temp == 0)
                                temp = 6;
                            else
                                temp--;
    19e0:	d3 01       	movw	r26, r6
    19e2:	c2 01       	movw	r24, r4
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	a1 09       	sbc	r26, r1
    19e8:	b1 09       	sbc	r27, r1
                            if (timeLimits[x][2] & (1 << temp))
    19ea:	45 28       	or	r4, r5
    19ec:	46 28       	or	r4, r6
    19ee:	47 28       	or	r4, r7
    19f0:	31 f4       	brne	.+12     	; 0x19fe <getInput+0x472>
    19f2:	76 e0       	ldi	r23, 0x06	; 6
    19f4:	47 2e       	mov	r4, r23
    19f6:	51 2c       	mov	r5, r1
    19f8:	61 2c       	mov	r6, r1
    19fa:	71 2c       	mov	r7, r1
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <getInput+0x476>
    19fe:	2c 01       	movw	r4, r24
    1a00:	3d 01       	movw	r6, r26
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	ac 01       	movw	r20, r24
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <getInput+0x482>
    1a0a:	44 0f       	add	r20, r20
    1a0c:	55 1f       	adc	r21, r21
    1a0e:	4a 94       	dec	r4
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <getInput+0x47e>
    1a12:	9a 01       	movw	r18, r20
    1a14:	44 27       	eor	r20, r20
    1a16:	37 fd       	sbrc	r19, 7
    1a18:	40 95       	com	r20
    1a1a:	54 2f       	mov	r21, r20
    1a1c:	29 83       	std	Y+1, r18	; 0x01
    1a1e:	3a 83       	std	Y+2, r19	; 0x02
    1a20:	4b 83       	std	Y+3, r20	; 0x03
    1a22:	5c 83       	std	Y+4, r21	; 0x04
                                startTheProgram((switchNumber - 128), duration, 0);
                        } else if (weeklySeconds >= (startTime + daySeconds)) {
                            if (timeLimits[x][2] & (1 << dow))
    1a24:	2c 01       	movw	r4, r24
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <getInput+0x4a0>
    1a28:	44 0c       	add	r4, r4
    1a2a:	55 1c       	adc	r5, r5
    1a2c:	2a 94       	dec	r2
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <getInput+0x49c>
    1a30:	66 24       	eor	r6, r6
    1a32:	57 fc       	sbrc	r5, 7
    1a34:	60 94       	com	r6
    1a36:	76 2c       	mov	r7, r6
    1a38:	64 e6       	ldi	r22, 0x64	; 100
    1a3a:	e6 2e       	mov	r14, r22
    1a3c:	64 e0       	ldi	r22, 0x04	; 4
    1a3e:	f6 2e       	mov	r15, r22
                        }
                    } else {
                        if (weeklySeconds >= (startTime + daySeconds) &&
                                weeklySeconds <= (stopTime + daySeconds)) {
                            if (timeLimits[x][2] & (1 << dow))
                                startTheProgram((switchNumber - 128), duration, 0);
    1a40:	68 01       	movw	r12, r16
    1a42:	30 e8       	ldi	r19, 0x80	; 128
    1a44:	c3 1a       	sub	r12, r19
    1a46:	d1 08       	sbc	r13, r1
                }
                // no limits set up
                if (test == 0)
                    startTheProgram((switchNumber - 128), duration, 0);
                for (x = 0; x < NUM_LIMITS; x++) {
                    startTime = timeLimits[x][0];
    1a48:	d7 01       	movw	r26, r14
    1a4a:	8d 91       	ld	r24, X+
    1a4c:	9d 91       	ld	r25, X+
    1a4e:	0d 90       	ld	r0, X+
    1a50:	bc 91       	ld	r27, X
    1a52:	a0 2d       	mov	r26, r0
    1a54:	8d 83       	std	Y+5, r24	; 0x05
    1a56:	9e 83       	std	Y+6, r25	; 0x06
    1a58:	af 83       	std	Y+7, r26	; 0x07
    1a5a:	b8 87       	std	Y+8, r27	; 0x08
                    stopTime = timeLimits[x][1];
    1a5c:	f7 01       	movw	r30, r14
    1a5e:	44 81       	ldd	r20, Z+4	; 0x04
    1a60:	55 81       	ldd	r21, Z+5	; 0x05
    1a62:	66 81       	ldd	r22, Z+6	; 0x06
    1a64:	77 81       	ldd	r23, Z+7	; 0x07
    1a66:	80 91 aa 03 	lds	r24, 0x03AA
    1a6a:	90 91 ab 03 	lds	r25, 0x03AB
    1a6e:	a0 91 ac 03 	lds	r26, 0x03AC
    1a72:	b0 91 ad 03 	lds	r27, 0x03AD
                    // deal with nights that cross midnight
                    if (stopTime < startTime) {
    1a76:	0d 81       	ldd	r16, Y+5	; 0x05
    1a78:	1e 81       	ldd	r17, Y+6	; 0x06
    1a7a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a7c:	38 85       	ldd	r19, Y+8	; 0x08
    1a7e:	40 17       	cp	r20, r16
    1a80:	51 07       	cpc	r21, r17
    1a82:	62 07       	cpc	r22, r18
    1a84:	73 07       	cpc	r23, r19
    1a86:	24 f5       	brge	.+72     	; 0x1ad0 <getInput+0x544>
                        temp = dow;
                        // weekly seconds resets at the end of the week. so do lots of 9
                        if (weeklySeconds <= (stopTime + daySeconds)) {
    1a88:	48 0d       	add	r20, r8
    1a8a:	59 1d       	adc	r21, r9
    1a8c:	6a 1d       	adc	r22, r10
    1a8e:	7b 1d       	adc	r23, r11
    1a90:	48 17       	cp	r20, r24
    1a92:	59 07       	cpc	r21, r25
    1a94:	6a 07       	cpc	r22, r26
    1a96:	7b 07       	cpc	r23, r27
    1a98:	68 f0       	brcs	.+26     	; 0x1ab4 <getInput+0x528>
                            // k this is dow + 1
                            if (temp == 0)
                                temp = 6;
                            else
                                temp--;
                            if (timeLimits[x][2] & (1 << temp))
    1a9a:	80 85       	ldd	r24, Z+8	; 0x08
    1a9c:	91 85       	ldd	r25, Z+9	; 0x09
    1a9e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1aa0:	b3 85       	ldd	r27, Z+11	; 0x0b
    1aa2:	29 81       	ldd	r18, Y+1	; 0x01
    1aa4:	3a 81       	ldd	r19, Y+2	; 0x02
    1aa6:	4b 81       	ldd	r20, Y+3	; 0x03
    1aa8:	5c 81       	ldd	r21, Y+4	; 0x04
    1aaa:	82 23       	and	r24, r18
    1aac:	93 23       	and	r25, r19
    1aae:	a4 23       	and	r26, r20
    1ab0:	b5 23       	and	r27, r21
    1ab2:	2d c0       	rjmp	.+90     	; 0x1b0e <getInput+0x582>
                                startTheProgram((switchNumber - 128), duration, 0);
                        } else if (weeklySeconds >= (startTime + daySeconds)) {
    1ab4:	4d 81       	ldd	r20, Y+5	; 0x05
    1ab6:	5e 81       	ldd	r21, Y+6	; 0x06
    1ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aba:	78 85       	ldd	r23, Y+8	; 0x08
    1abc:	48 0d       	add	r20, r8
    1abe:	59 1d       	adc	r21, r9
    1ac0:	6a 1d       	adc	r22, r10
    1ac2:	7b 1d       	adc	r23, r11
    1ac4:	84 17       	cp	r24, r20
    1ac6:	95 07       	cpc	r25, r21
    1ac8:	a6 07       	cpc	r26, r22
    1aca:	b7 07       	cpc	r27, r23
    1acc:	60 f1       	brcs	.+88     	; 0x1b26 <getInput+0x59a>
    1ace:	16 c0       	rjmp	.+44     	; 0x1afc <getInput+0x570>
                            if (timeLimits[x][2] & (1 << dow))
                                startTheProgram((switchNumber - 128), duration, 0);
                        }
                    } else {
                        if (weeklySeconds >= (startTime + daySeconds) &&
    1ad0:	0d 81       	ldd	r16, Y+5	; 0x05
    1ad2:	1e 81       	ldd	r17, Y+6	; 0x06
    1ad4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ad6:	38 85       	ldd	r19, Y+8	; 0x08
    1ad8:	08 0d       	add	r16, r8
    1ada:	19 1d       	adc	r17, r9
    1adc:	2a 1d       	adc	r18, r10
    1ade:	3b 1d       	adc	r19, r11
    1ae0:	80 17       	cp	r24, r16
    1ae2:	91 07       	cpc	r25, r17
    1ae4:	a2 07       	cpc	r26, r18
    1ae6:	b3 07       	cpc	r27, r19
    1ae8:	f0 f0       	brcs	.+60     	; 0x1b26 <getInput+0x59a>
                                weeklySeconds <= (stopTime + daySeconds)) {
    1aea:	48 0d       	add	r20, r8
    1aec:	59 1d       	adc	r21, r9
    1aee:	6a 1d       	adc	r22, r10
    1af0:	7b 1d       	adc	r23, r11
                        } else if (weeklySeconds >= (startTime + daySeconds)) {
                            if (timeLimits[x][2] & (1 << dow))
                                startTheProgram((switchNumber - 128), duration, 0);
                        }
                    } else {
                        if (weeklySeconds >= (startTime + daySeconds) &&
    1af2:	48 17       	cp	r20, r24
    1af4:	59 07       	cpc	r21, r25
    1af6:	6a 07       	cpc	r22, r26
    1af8:	7b 07       	cpc	r23, r27
    1afa:	a8 f0       	brcs	.+42     	; 0x1b26 <getInput+0x59a>
                                weeklySeconds <= (stopTime + daySeconds)) {
                            if (timeLimits[x][2] & (1 << dow))
    1afc:	f7 01       	movw	r30, r14
    1afe:	80 85       	ldd	r24, Z+8	; 0x08
    1b00:	91 85       	ldd	r25, Z+9	; 0x09
    1b02:	a2 85       	ldd	r26, Z+10	; 0x0a
    1b04:	b3 85       	ldd	r27, Z+11	; 0x0b
    1b06:	84 21       	and	r24, r4
    1b08:	95 21       	and	r25, r5
    1b0a:	a6 21       	and	r26, r6
    1b0c:	b7 21       	and	r27, r7
    1b0e:	89 2b       	or	r24, r25
    1b10:	8a 2b       	or	r24, r26
    1b12:	8b 2b       	or	r24, r27
    1b14:	41 f0       	breq	.+16     	; 0x1b26 <getInput+0x59a>
                                startTheProgram((switchNumber - 128), duration, 0);
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	a9 01       	movw	r20, r18
    1b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b20:	c6 01       	movw	r24, r12
    1b22:	0e 94 02 03 	call	0x604	; 0x604 <startTheProgram>
    1b26:	fc e0       	ldi	r31, 0x0C	; 12
    1b28:	ef 0e       	add	r14, r31
    1b2a:	f1 1c       	adc	r15, r1
                        test = 1;
                }
                // no limits set up
                if (test == 0)
                    startTheProgram((switchNumber - 128), duration, 0);
                for (x = 0; x < NUM_LIMITS; x++) {
    1b2c:	04 e9       	ldi	r16, 0x94	; 148
    1b2e:	e0 16       	cp	r14, r16
    1b30:	04 e0       	ldi	r16, 0x04	; 4
    1b32:	f0 06       	cpc	r15, r16
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <getInput+0x5ac>
    1b36:	88 cf       	rjmp	.-240    	; 0x1a48 <getInput+0x4bc>
    1b38:	08 c0       	rjmp	.+16     	; 0x1b4a <getInput+0x5be>
            // pin is low
            if (low == 255)
                yeaOurInputIsOn = 1;
        }
        if (yeaOurInputIsOn == 1) {
            if (switchNumber < 128) { // this is a switch
    1b3a:	00 38       	cpi	r16, 0x80	; 128
    1b3c:	11 05       	cpc	r17, r1
    1b3e:	08 f4       	brcc	.+2      	; 0x1b42 <getInput+0x5b6>
    1b40:	06 cf       	rjmp	.-500    	; 0x194e <getInput+0x3c2>
    1b42:	ec e6       	ldi	r30, 0x6C	; 108
    1b44:	f4 e0       	ldi	r31, 0x04	; 4
// 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG


// actually check the input and do something based on that

void getInput(int inputNumber) {
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	31 cf       	rjmp	.-414    	; 0x19ac <getInput+0x420>
                    }
                } // end of the for
            }
        }
    }
}
    1b4a:	2c 96       	adiw	r28, 0x0c	; 12
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	ff 90       	pop	r15
    1b60:	ef 90       	pop	r14
    1b62:	df 90       	pop	r13
    1b64:	cf 90       	pop	r12
    1b66:	bf 90       	pop	r11
    1b68:	af 90       	pop	r10
    1b6a:	9f 90       	pop	r9
    1b6c:	8f 90       	pop	r8
    1b6e:	7f 90       	pop	r7
    1b70:	6f 90       	pop	r6
    1b72:	5f 90       	pop	r5
    1b74:	4f 90       	pop	r4
    1b76:	3f 90       	pop	r3
    1b78:	2f 90       	pop	r2
    1b7a:	08 95       	ret

00001b7c <inputTenthCheck>:
    }
}

// see if we check inputs continuously (every 10th)

void inputTenthCheck(void) {
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	06 e6       	ldi	r16, 0x66	; 102
    1b86:	13 e0       	ldi	r17, 0x03	; 3
    int x = 0;
    for (x = 0; x < NUM_INPUTS; x++) {
    1b88:	c0 e0       	ldi	r28, 0x00	; 0
    1b8a:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

// see if we check inputs continuously (every 10th)

void inputTenthCheck(void) {
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	36 97       	sbiw	r30, 0x06	; 6
    int x = 0;
    for (x = 0; x < NUM_INPUTS; x++) {
        // see if it is valid and marked continuously
        if (inputs[x][0] != 255 && inputs[x][6] == 0)
    1b90:	80 81       	ld	r24, Z
    1b92:	8f 3f       	cpi	r24, 0xFF	; 255
    1b94:	39 f0       	breq	.+14     	; 0x1ba4 <inputTenthCheck+0x28>
    1b96:	f8 01       	movw	r30, r16
    1b98:	80 81       	ld	r24, Z
    1b9a:	81 11       	cpse	r24, r1
    1b9c:	03 c0       	rjmp	.+6      	; 0x1ba4 <inputTenthCheck+0x28>
            getInput(x);
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	0e 94 c6 0a 	call	0x158c	; 0x158c <getInput>

// see if we check inputs continuously (every 10th)

void inputTenthCheck(void) {
    int x = 0;
    for (x = 0; x < NUM_INPUTS; x++) {
    1ba4:	21 96       	adiw	r28, 0x01	; 1
    1ba6:	08 5f       	subi	r16, 0xF8	; 248
    1ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    1baa:	c4 30       	cpi	r28, 0x04	; 4
    1bac:	d1 05       	cpc	r29, r1
    1bae:	71 f7       	brne	.-36     	; 0x1b8c <inputTenthCheck+0x10>
        // see if it is valid and marked continuously
        if (inputs[x][0] != 255 && inputs[x][6] == 0)
            getInput(x);
    }
}
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	08 95       	ret

00001bba <inputCheck>:
// value of 0-15 = PORTA, 16-31 = PORTB, 32-47 = PORTC, 
// 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG

// see if we check any inputs this second

void inputCheck(void) {
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	06 e6       	ldi	r16, 0x66	; 102
    1bc4:	13 e0       	ldi	r17, 0x03	; 3
    int x = 0;
    int pollTime = 0;
    // figure out if we care about our inputs
    for (x = 0; x < NUM_INPUTS; x++) {
    1bc6:	c0 e0       	ldi	r28, 0x00	; 0
    1bc8:	d0 e0       	ldi	r29, 0x00	; 0
// value of 0-15 = PORTA, 16-31 = PORTB, 32-47 = PORTC, 
// 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG

// see if we check any inputs this second

void inputCheck(void) {
    1bca:	f8 01       	movw	r30, r16
    1bcc:	36 97       	sbiw	r30, 0x06	; 6
    int x = 0;
    int pollTime = 0;
    // figure out if we care about our inputs
    for (x = 0; x < NUM_INPUTS; x++) {
        // see if it is a valid input
        if (inputs[x][0] == 255)
    1bce:	80 81       	ld	r24, Z
    1bd0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bd2:	c9 f0       	breq	.+50     	; 0x1c06 <inputCheck+0x4c>
            continue; // not valid. Skip
        pollTime = inputs[x][6];
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	20 81       	ld	r18, Z
        // see if it is one we check continuously or every second
        if (pollTime == 0 || pollTime == 1) {
    1bd8:	22 30       	cpi	r18, 0x02	; 2
    1bda:	08 f4       	brcc	.+2      	; 0x1bde <inputCheck+0x24>
    1bdc:	11 c0       	rjmp	.+34     	; 0x1c00 <inputCheck+0x46>
            getInput(x);
            // see if we it is the right second otherwise
        } else if (weeklySeconds % pollTime == 0) {
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	60 91 aa 03 	lds	r22, 0x03AA
    1be8:	70 91 ab 03 	lds	r23, 0x03AB
    1bec:	80 91 ac 03 	lds	r24, 0x03AC
    1bf0:	90 91 ad 03 	lds	r25, 0x03AD
    1bf4:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__udivmodsi4>
    1bf8:	67 2b       	or	r22, r23
    1bfa:	68 2b       	or	r22, r24
    1bfc:	69 2b       	or	r22, r25
    1bfe:	19 f4       	brne	.+6      	; 0x1c06 <inputCheck+0x4c>
            getInput(x);
    1c00:	ce 01       	movw	r24, r28
    1c02:	0e 94 c6 0a 	call	0x158c	; 0x158c <getInput>

void inputCheck(void) {
    int x = 0;
    int pollTime = 0;
    // figure out if we care about our inputs
    for (x = 0; x < NUM_INPUTS; x++) {
    1c06:	21 96       	adiw	r28, 0x01	; 1
    1c08:	08 5f       	subi	r16, 0xF8	; 248
    1c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0c:	c4 30       	cpi	r28, 0x04	; 4
    1c0e:	d1 05       	cpc	r29, r1
    1c10:	e1 f6       	brne	.-72     	; 0x1bca <inputCheck+0x10>
            // see if we it is the right second otherwise
        } else if (weeklySeconds % pollTime == 0) {
            getInput(x);
        }
    }
}
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	08 95       	ret

00001c1c <flashFail>:


// Flashes the indicator pin to determine problems

void flashFail(void) {
    failTimer++;
    1c1c:	80 91 95 04 	lds	r24, 0x0495
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	80 93 95 04 	sts	0x0495, r24
    INDICATOR_DDR |= INDICATOR_PIN;
    1c26:	52 9a       	sbi	0x0a, 2	; 10
    // different timings for different fails
    if (failCondition == 1) {
    1c28:	90 91 00 01 	lds	r25, 0x0100
    1c2c:	91 30       	cpi	r25, 0x01	; 1
    1c2e:	49 f4       	brne	.+18     	; 0x1c42 <flashFail+0x26>
        if (failTimer == 2) {
    1c30:	82 30       	cpi	r24, 0x02	; 2
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <flashFail+0x1a>
    1c34:	27 c0       	rjmp	.+78     	; 0x1c84 <flashFail+0x68>
            INDICATOR_PORT |= INDICATOR_PIN;
        } else if (failTimer == 4) {
    1c36:	84 30       	cpi	r24, 0x04	; 4
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <flashFail+0x20>
    1c3a:	28 c0       	rjmp	.+80     	; 0x1c8c <flashFail+0x70>
            INDICATOR_PORT &= ~(INDICATOR_PIN);
        } else if (failTimer == 24)
    1c3c:	88 31       	cpi	r24, 0x18	; 24
    1c3e:	61 f5       	brne	.+88     	; 0x1c98 <flashFail+0x7c>
    1c40:	29 c0       	rjmp	.+82     	; 0x1c94 <flashFail+0x78>
            failTimer = 0;
    } else if (failCondition == 2) {
    1c42:	92 30       	cpi	r25, 0x02	; 2
    1c44:	79 f4       	brne	.+30     	; 0x1c64 <flashFail+0x48>
        if (failTimer == 2) {
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <flashFail+0x30>
    1c4a:	1c c0       	rjmp	.+56     	; 0x1c84 <flashFail+0x68>
            INDICATOR_PORT |= INDICATOR_PIN;
        } else if (failTimer == 4) {
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <flashFail+0x36>
    1c50:	1d c0       	rjmp	.+58     	; 0x1c8c <flashFail+0x70>
            INDICATOR_PORT &= ~(INDICATOR_PIN);
        } else if (failTimer == 8) {
    1c52:	88 30       	cpi	r24, 0x08	; 8
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <flashFail+0x3c>
    1c56:	16 c0       	rjmp	.+44     	; 0x1c84 <flashFail+0x68>
            INDICATOR_PORT |= INDICATOR_PIN;
        } else if (failTimer == 10) {
    1c58:	8a 30       	cpi	r24, 0x0A	; 10
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <flashFail+0x42>
    1c5c:	17 c0       	rjmp	.+46     	; 0x1c8c <flashFail+0x70>
            INDICATOR_PORT &= ~(INDICATOR_PIN);
        } else if (failTimer == 30)
    1c5e:	8e 31       	cpi	r24, 0x1E	; 30
    1c60:	d9 f4       	brne	.+54     	; 0x1c98 <flashFail+0x7c>
    1c62:	18 c0       	rjmp	.+48     	; 0x1c94 <flashFail+0x78>
            failTimer = 0;
    } else if (failCondition == 3) {
    1c64:	93 30       	cpi	r25, 0x03	; 3
    1c66:	c1 f4       	brne	.+48     	; 0x1c98 <flashFail+0x7c>
        if (failTimer == 2) {
    1c68:	82 30       	cpi	r24, 0x02	; 2
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <flashFail+0x52>
    1c6c:	0b c0       	rjmp	.+22     	; 0x1c84 <flashFail+0x68>
            INDICATOR_PORT |= INDICATOR_PIN;
        } else if (failTimer == 4) {
    1c6e:	84 30       	cpi	r24, 0x04	; 4
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <flashFail+0x58>
    1c72:	0c c0       	rjmp	.+24     	; 0x1c8c <flashFail+0x70>
            INDICATOR_PORT &= ~(INDICATOR_PIN);
        } else if (failTimer == 8) {
    1c74:	88 30       	cpi	r24, 0x08	; 8
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <flashFail+0x5e>
    1c78:	05 c0       	rjmp	.+10     	; 0x1c84 <flashFail+0x68>
            INDICATOR_PORT |= INDICATOR_PIN;
        } else if (failTimer == 10) {
    1c7a:	8a 30       	cpi	r24, 0x0A	; 10
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <flashFail+0x64>
    1c7e:	06 c0       	rjmp	.+12     	; 0x1c8c <flashFail+0x70>
            INDICATOR_PORT &= ~(INDICATOR_PIN);
        } else if (failTimer == 14) {
    1c80:	8e 30       	cpi	r24, 0x0E	; 14
    1c82:	11 f4       	brne	.+4      	; 0x1c88 <flashFail+0x6c>
            INDICATOR_PORT |= INDICATOR_PIN;
    1c84:	5a 9a       	sbi	0x0b, 2	; 11
    1c86:	08 95       	ret
        } else if (failTimer == 16) {
    1c88:	80 31       	cpi	r24, 0x10	; 16
    1c8a:	11 f4       	brne	.+4      	; 0x1c90 <flashFail+0x74>
            INDICATOR_PORT &= ~(INDICATOR_PIN);
    1c8c:	5a 98       	cbi	0x0b, 2	; 11
    1c8e:	08 95       	ret
        } else if (failTimer == 36)
    1c90:	84 32       	cpi	r24, 0x24	; 36
    1c92:	11 f4       	brne	.+4      	; 0x1c98 <flashFail+0x7c>
            failTimer = 0;
    1c94:	10 92 95 04 	sts	0x0495, r1
    1c98:	08 95       	ret

00001c9a <clearFail>:
        }
}

// turns off the indicator pin
void clearFail(void) {
    failTimer = 0;
    1c9a:	10 92 95 04 	sts	0x0495, r1
    INDICATOR_PORT |= (INDICATOR_PIN);
    1c9e:	5a 9a       	sbi	0x0b, 2	; 11
    INDICATOR_DDR |= (INDICATOR_PIN);
    1ca0:	52 9a       	sbi	0x0a, 2	; 10
    1ca2:	08 95       	ret

00001ca4 <sendMessage>:
    formattedAddress[1] = (tempInt & 0xff);
    tempInt >>= 8;
    formattedAddress[0] = (tempInt & 0xff);
}

void sendMessage(char * myResponse) {
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <sendMessage+0x6>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    stopRx();
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <stopRx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cb6:	af e8       	ldi	r26, 0x8F	; 143
    1cb8:	b1 e0       	ldi	r27, 0x01	; 1
    1cba:	11 97       	sbiw	r26, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <sendMessage+0x16>
    1cbe:	00 c0       	rjmp	.+0      	; 0x1cc0 <sendMessage+0x1c>
    1cc0:	00 00       	nop
    _delay_us(100);
    int transmitLength = strlen(myResponse);
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	e8 2f       	mov	r30, r24
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	f9 2f       	mov	r31, r25
    1cca:	df 01       	movw	r26, r30
    1ccc:	0d 90       	ld	r0, X+
    1cce:	00 20       	and	r0, r0
    1cd0:	e9 f7       	brne	.-6      	; 0x1ccc <sendMessage+0x28>
    1cd2:	bd 01       	movw	r22, r26
    1cd4:	61 50       	subi	r22, 0x01	; 1
    1cd6:	71 09       	sbc	r23, r1
    1cd8:	6e 1b       	sub	r22, r30
    1cda:	7f 0b       	sbc	r23, r31
    if(!transmit(myResponse, transmitLength)) {
    1cdc:	0e 94 a8 2a 	call	0x5550	; 0x5550 <transmit>
    1ce0:	81 11       	cpse	r24, r1
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <sendMessage+0x48>
        failCondition = 2;
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	80 93 00 01 	sts	0x0100, r24
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <sendMessage+0x50>
    } else {
        failCondition = 0;
    1cec:	10 92 00 01 	sts	0x0100, r1
        clearFail();
    1cf0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <clearFail>
    }
    startRx();
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
        failCondition = 2;
    } else {
        failCondition = 0;
        clearFail();
    }
    startRx();
    1cfc:	0c 94 db 28 	jmp	0x51b6	; 0x51b6 <startRx>

00001d00 <serialNumber>:

// sets or views the serial number
// SE nnnnnn
// 012345678

void serialNumber(char * commandReceived) {
    1d00:	cf 92       	push	r12
    1d02:	df 92       	push	r13
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	fc 01       	movw	r30, r24
    tempHugeString[0] = commandReceived[3];
    1d0e:	83 81       	ldd	r24, Z+3	; 0x03
    1d10:	80 93 0c 01 	sts	0x010C, r24
    tempHugeString[1] = commandReceived[4];
    1d14:	84 81       	ldd	r24, Z+4	; 0x04
    1d16:	80 93 0d 01 	sts	0x010D, r24
    tempHugeString[2] = commandReceived[5];
    1d1a:	85 81       	ldd	r24, Z+5	; 0x05
    1d1c:	80 93 0e 01 	sts	0x010E, r24
    tempHugeString[3] = commandReceived[6];
    1d20:	86 81       	ldd	r24, Z+6	; 0x06
    1d22:	80 93 0f 01 	sts	0x010F, r24
    tempHugeString[4] = commandReceived[7];
    1d26:	87 81       	ldd	r24, Z+7	; 0x07
    1d28:	80 93 10 01 	sts	0x0110, r24
    tempHugeString[5] = commandReceived[8];
    1d2c:	80 85       	ldd	r24, Z+8	; 0x08
    1d2e:	80 93 11 01 	sts	0x0111, r24
    long temp = atol(tempHugeString);
    1d32:	8c e0       	ldi	r24, 0x0C	; 12
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	0e 94 a0 30 	call	0x6140	; 0x6140 <atol>
    1d3a:	6b 01       	movw	r12, r22
    1d3c:	7c 01       	movw	r14, r24
    int serialLength = 0;
    statusMsg[0] = 0;
    1d3e:	10 92 8a 03 	sts	0x038A, r1
    //since a 0 serial number is not valid that means to return the serial number
    strcat(statusMsg, "Ser#");
    1d42:	6d e3       	ldi	r22, 0x3D	; 61
    1d44:	71 e0       	ldi	r23, 0x01	; 1
    1d46:	8a e8       	ldi	r24, 0x8A	; 138
    1d48:	93 e0       	ldi	r25, 0x03	; 3
    1d4a:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    if (temp > 0) {
    1d4e:	1c 14       	cp	r1, r12
    1d50:	1d 04       	cpc	r1, r13
    1d52:	1e 04       	cpc	r1, r14
    1d54:	1f 04       	cpc	r1, r15
    1d56:	84 f4       	brge	.+32     	; 0x1d78 <serialNumber+0x78>
        // new serial number
        serial = temp;
    1d58:	c0 92 86 03 	sts	0x0386, r12
    1d5c:	d0 92 87 03 	sts	0x0387, r13
    1d60:	e0 92 88 03 	sts	0x0388, r14
    1d64:	f0 92 89 03 	sts	0x0389, r15
        ltoa(serial, stringSerial, 10);
    1d68:	2a e0       	ldi	r18, 0x0A	; 10
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	42 e0       	ldi	r20, 0x02	; 2
    1d6e:	51 e0       	ldi	r21, 0x01	; 1
    1d70:	c7 01       	movw	r24, r14
    1d72:	b6 01       	movw	r22, r12
    1d74:	0e 94 1d 31 	call	0x623a	; 0x623a <ltoa>

    }
    serialLength = strlen(stringSerial);
    1d78:	c2 e0       	ldi	r28, 0x02	; 2
    1d7a:	d1 e0       	ldi	r29, 0x01	; 1
    1d7c:	09 90       	ld	r0, Y+
    1d7e:	00 20       	and	r0, r0
    1d80:	e9 f7       	brne	.-6      	; 0x1d7c <serialNumber+0x7c>
    1d82:	21 97       	sbiw	r28, 0x01	; 1
    1d84:	c2 50       	subi	r28, 0x02	; 2
    1d86:	d1 40       	sbci	r29, 0x01	; 1
    while (serialLength < 6) {
    1d88:	07 c0       	rjmp	.+14     	; 0x1d98 <serialNumber+0x98>
        strcat(statusMsg, "0");
    1d8a:	61 e8       	ldi	r22, 0x81	; 129
    1d8c:	72 e0       	ldi	r23, 0x02	; 2
    1d8e:	8a e8       	ldi	r24, 0x8A	; 138
    1d90:	93 e0       	ldi	r25, 0x03	; 3
    1d92:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        serialLength++;
    1d96:	21 96       	adiw	r28, 0x01	; 1
        serial = temp;
        ltoa(serial, stringSerial, 10);

    }
    serialLength = strlen(stringSerial);
    while (serialLength < 6) {
    1d98:	c6 30       	cpi	r28, 0x06	; 6
    1d9a:	d1 05       	cpc	r29, r1
    1d9c:	b4 f3       	brlt	.-20     	; 0x1d8a <serialNumber+0x8a>
        strcat(statusMsg, "0");
        serialLength++;
    }
    strcat(statusMsg, stringSerial);
    1d9e:	62 e0       	ldi	r22, 0x02	; 2
    1da0:	71 e0       	ldi	r23, 0x01	; 1
    1da2:	8a e8       	ldi	r24, 0x8A	; 138
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    sendMessage(statusMsg);
    1daa:	8a e8       	ldi	r24, 0x8A	; 138
    1dac:	93 e0       	ldi	r25, 0x03	; 3
}
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	ff 90       	pop	r15
    1db4:	ef 90       	pop	r14
    1db6:	df 90       	pop	r13
    1db8:	cf 90       	pop	r12
    while (serialLength < 6) {
        strcat(statusMsg, "0");
        serialLength++;
    }
    strcat(statusMsg, stringSerial);
    sendMessage(statusMsg);
    1dba:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>

00001dbe <radioChangeAddress>:
//static uint64_t rx_addr_p0, rx_addr_p1, rx_addr_p2, rx_addr_p3, rx_addr_p4, rx_addr_p5, tx_addr;

//RD:N RC:N 0xnnnnnnnnnn
//     01234567890123456

void radioChangeAddress(char * commandReceived) {
    1dbe:	2f 92       	push	r2
    1dc0:	3f 92       	push	r3
    1dc2:	4f 92       	push	r4
    1dc4:	5f 92       	push	r5
    1dc6:	6f 92       	push	r6
    1dc8:	7f 92       	push	r7
    1dca:	8f 92       	push	r8
    1dcc:	9f 92       	push	r9
    1dce:	af 92       	push	r10
    1dd0:	bf 92       	push	r11
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	2b 97       	sbiw	r28, 0x0b	; 11
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	5c 01       	movw	r10, r24
    int x = 0;
    statusMsg[0] = 0;
    1df4:	10 92 8a 03 	sts	0x038A, r1
    int tempInt = 0;
    uint64_t newAddress = 0;
    char tempString[] = "0x00";
    1df8:	85 e0       	ldi	r24, 0x05	; 5
    1dfa:	eb e6       	ldi	r30, 0x6B	; 107
    1dfc:	f1 e0       	ldi	r31, 0x01	; 1
    1dfe:	de 01       	movw	r26, r28
    1e00:	17 96       	adiw	r26, 0x07	; 7
    1e02:	01 90       	ld	r0, Z+
    1e04:	0d 92       	st	X+, r0
    1e06:	8a 95       	dec	r24
    1e08:	e1 f7       	brne	.-8      	; 0x1e02 <radioChangeAddress+0x44>
    char tempRadioString[] = "00000";
    1e0a:	86 e0       	ldi	r24, 0x06	; 6
    1e0c:	ed e7       	ldi	r30, 0x7D	; 125
    1e0e:	f2 e0       	ldi	r31, 0x02	; 2
    1e10:	de 01       	movw	r26, r28
    1e12:	11 96       	adiw	r26, 0x01	; 1
    1e14:	01 90       	ld	r0, Z+
    1e16:	0d 92       	st	X+, r0
    1e18:	8a 95       	dec	r24
    1e1a:	e1 f7       	brne	.-8      	; 0x1e14 <radioChangeAddress+0x56>
//static uint64_t rx_addr_p0, rx_addr_p1, rx_addr_p2, rx_addr_p3, rx_addr_p4, rx_addr_p5, tx_addr;

//RD:N RC:N 0xnnnnnnnnnn
//     01234567890123456

void radioChangeAddress(char * commandReceived) {
    1e1c:	65 01       	movw	r12, r10
    1e1e:	88 e0       	ldi	r24, 0x08	; 8
    1e20:	c8 0e       	add	r12, r24
    1e22:	d1 1c       	adc	r13, r1
    int x = 0;
    statusMsg[0] = 0;
    int tempInt = 0;
    uint64_t newAddress = 0;
    1e24:	21 2c       	mov	r2, r1
    1e26:	31 2c       	mov	r3, r1
    1e28:	41 2c       	mov	r4, r1
    1e2a:	51 2c       	mov	r5, r1
    1e2c:	61 2c       	mov	r6, r1
    1e2e:	71 2c       	mov	r7, r1
    1e30:	81 2c       	mov	r8, r1
    1e32:	91 2c       	mov	r9, r1
    char tempString[] = "0x00";
    char tempRadioString[] = "00000";
    for (x = 0; x < 5; x++) {
    1e34:	e1 2c       	mov	r14, r1
    1e36:	f1 2c       	mov	r15, r1
//static uint64_t rx_addr_p0, rx_addr_p1, rx_addr_p2, rx_addr_p3, rx_addr_p4, rx_addr_p5, tx_addr;

//RD:N RC:N 0xnnnnnnnnnn
//     01234567890123456

void radioChangeAddress(char * commandReceived) {
    1e38:	f6 01       	movw	r30, r12
    1e3a:	31 97       	sbiw	r30, 0x01	; 1
    int tempInt = 0;
    uint64_t newAddress = 0;
    char tempString[] = "0x00";
    char tempRadioString[] = "00000";
    for (x = 0; x < 5; x++) {
        tempString[2] = commandReceived[((x * 2) + 7)];
    1e3c:	80 81       	ld	r24, Z
    1e3e:	89 87       	std	Y+9, r24	; 0x09
        tempString[3] = commandReceived[((x * 2) + 8)];
    1e40:	f6 01       	movw	r30, r12
    1e42:	80 81       	ld	r24, Z
    1e44:	8a 87       	std	Y+10, r24	; 0x0a
        tempInt = strtol(tempString, 0, 0);
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	50 e0       	ldi	r21, 0x00	; 0
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	ce 01       	movw	r24, r28
    1e50:	07 96       	adiw	r24, 0x07	; 7
    1e52:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <strtol>
        newAddress |= tempInt;
    1e56:	87 2f       	mov	r24, r23
    1e58:	88 0f       	add	r24, r24
    1e5a:	88 0b       	sbc	r24, r24
    1e5c:	26 2a       	or	r2, r22
    1e5e:	37 2a       	or	r3, r23
    1e60:	48 2a       	or	r4, r24
    1e62:	58 2a       	or	r5, r24
    1e64:	68 2a       	or	r6, r24
    1e66:	78 2a       	or	r7, r24
    1e68:	88 2a       	or	r8, r24
    1e6a:	98 2a       	or	r9, r24
        if (x < 4)
    1e6c:	f4 e0       	ldi	r31, 0x04	; 4
    1e6e:	ef 16       	cp	r14, r31
    1e70:	f1 04       	cpc	r15, r1
    1e72:	59 f0       	breq	.+22     	; 0x1e8a <radioChangeAddress+0xcc>
            newAddress <<= 8;
    1e74:	91 01       	movw	r18, r2
    1e76:	a2 01       	movw	r20, r4
    1e78:	b3 01       	movw	r22, r6
    1e7a:	c4 01       	movw	r24, r8
    1e7c:	08 e0       	ldi	r16, 0x08	; 8
    1e7e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__ashldi3>
    1e82:	19 01       	movw	r2, r18
    1e84:	2a 01       	movw	r4, r20
    1e86:	3b 01       	movw	r6, r22
    1e88:	4c 01       	movw	r8, r24
    statusMsg[0] = 0;
    int tempInt = 0;
    uint64_t newAddress = 0;
    char tempString[] = "0x00";
    char tempRadioString[] = "00000";
    for (x = 0; x < 5; x++) {
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	e8 1a       	sub	r14, r24
    1e8e:	f8 0a       	sbc	r15, r24
    1e90:	e2 e0       	ldi	r30, 0x02	; 2
    1e92:	ce 0e       	add	r12, r30
    1e94:	d1 1c       	adc	r13, r1
    1e96:	f5 e0       	ldi	r31, 0x05	; 5
    1e98:	ef 16       	cp	r14, r31
    1e9a:	f1 04       	cpc	r15, r1
    1e9c:	69 f6       	brne	.-102    	; 0x1e38 <radioChangeAddress+0x7a>
        tempInt = strtol(tempString, 0, 0);
        newAddress |= tempInt;
        if (x < 4)
            newAddress <<= 8;
    }
    switch (commandReceived[3]) {
    1e9e:	f5 01       	movw	r30, r10
    1ea0:	83 81       	ldd	r24, Z+3	; 0x03
    1ea2:	83 33       	cpi	r24, 0x33	; 51
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <radioChangeAddress+0xea>
    1ea6:	66 c0       	rjmp	.+204    	; 0x1f74 <radioChangeAddress+0x1b6>
    1ea8:	40 f4       	brcc	.+16     	; 0x1eba <radioChangeAddress+0xfc>
    1eaa:	81 33       	cpi	r24, 0x31	; 49
    1eac:	59 f1       	breq	.+86     	; 0x1f04 <radioChangeAddress+0x146>
    1eae:	08 f0       	brcs	.+2      	; 0x1eb2 <radioChangeAddress+0xf4>
    1eb0:	45 c0       	rjmp	.+138    	; 0x1f3c <radioChangeAddress+0x17e>
    1eb2:	80 33       	cpi	r24, 0x30	; 48
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <radioChangeAddress+0xfa>
    1eb6:	cf c0       	rjmp	.+414    	; 0x2056 <radioChangeAddress+0x298>
    1eb8:	09 c0       	rjmp	.+18     	; 0x1ecc <radioChangeAddress+0x10e>
    1eba:	85 33       	cpi	r24, 0x35	; 53
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <radioChangeAddress+0x102>
    1ebe:	92 c0       	rjmp	.+292    	; 0x1fe4 <radioChangeAddress+0x226>
    1ec0:	08 f4       	brcc	.+2      	; 0x1ec4 <radioChangeAddress+0x106>
    1ec2:	74 c0       	rjmp	.+232    	; 0x1fac <radioChangeAddress+0x1ee>
    1ec4:	84 35       	cpi	r24, 0x54	; 84
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <radioChangeAddress+0x10c>
    1ec8:	c6 c0       	rjmp	.+396    	; 0x2056 <radioChangeAddress+0x298>
    1eca:	a8 c0       	rjmp	.+336    	; 0x201c <radioChangeAddress+0x25e>
        case '0':
            rx_addr_p0 = newAddress;
    1ecc:	20 92 2c 04 	sts	0x042C, r2
    1ed0:	30 92 2d 04 	sts	0x042D, r3
    1ed4:	40 92 2e 04 	sts	0x042E, r4
    1ed8:	50 92 2f 04 	sts	0x042F, r5
    1edc:	60 92 30 04 	sts	0x0430, r6
    1ee0:	70 92 31 04 	sts	0x0431, r7
    1ee4:	80 92 32 04 	sts	0x0432, r8
    1ee8:	90 92 33 04 	sts	0x0433, r9
            strcat(statusMsg, "r0 0x");
    1eec:	62 e4       	ldi	r22, 0x42	; 66
    1eee:	71 e0       	ldi	r23, 0x01	; 1
    1ef0:	8a e8       	ldi	r24, 0x8A	; 138
    1ef2:	93 e0       	ldi	r25, 0x03	; 3
    1ef4:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            writeAddr(RX_ADDR_P0, newAddress);
    1ef8:	81 01       	movw	r16, r2
    1efa:	92 01       	movw	r18, r4
    1efc:	a3 01       	movw	r20, r6
    1efe:	b4 01       	movw	r22, r8
    1f00:	8a e0       	ldi	r24, 0x0A	; 10
    1f02:	a7 c0       	rjmp	.+334    	; 0x2052 <radioChangeAddress+0x294>
            break;
        case '1':
            rx_addr_p1 = newAddress;
    1f04:	20 92 34 04 	sts	0x0434, r2
    1f08:	30 92 35 04 	sts	0x0435, r3
    1f0c:	40 92 36 04 	sts	0x0436, r4
    1f10:	50 92 37 04 	sts	0x0437, r5
    1f14:	60 92 38 04 	sts	0x0438, r6
    1f18:	70 92 39 04 	sts	0x0439, r7
    1f1c:	80 92 3a 04 	sts	0x043A, r8
    1f20:	90 92 3b 04 	sts	0x043B, r9
            strcat(statusMsg, "r1 0x");
    1f24:	68 e4       	ldi	r22, 0x48	; 72
    1f26:	71 e0       	ldi	r23, 0x01	; 1
    1f28:	8a e8       	ldi	r24, 0x8A	; 138
    1f2a:	93 e0       	ldi	r25, 0x03	; 3
    1f2c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            writeAddr(RX_ADDR_P1, newAddress);
    1f30:	81 01       	movw	r16, r2
    1f32:	92 01       	movw	r18, r4
    1f34:	a3 01       	movw	r20, r6
    1f36:	b4 01       	movw	r22, r8
    1f38:	8b e0       	ldi	r24, 0x0B	; 11
    1f3a:	8b c0       	rjmp	.+278    	; 0x2052 <radioChangeAddress+0x294>
            break;
        case '2':
            rx_addr_p2 = newAddress;
    1f3c:	20 92 3c 04 	sts	0x043C, r2
    1f40:	30 92 3d 04 	sts	0x043D, r3
    1f44:	40 92 3e 04 	sts	0x043E, r4
    1f48:	50 92 3f 04 	sts	0x043F, r5
    1f4c:	60 92 40 04 	sts	0x0440, r6
    1f50:	70 92 41 04 	sts	0x0441, r7
    1f54:	80 92 42 04 	sts	0x0442, r8
    1f58:	90 92 43 04 	sts	0x0443, r9
            strcat(statusMsg, "r2 0x");
    1f5c:	6e e4       	ldi	r22, 0x4E	; 78
    1f5e:	71 e0       	ldi	r23, 0x01	; 1
    1f60:	8a e8       	ldi	r24, 0x8A	; 138
    1f62:	93 e0       	ldi	r25, 0x03	; 3
    1f64:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            writeAddr(RX_ADDR_P2, newAddress);
    1f68:	81 01       	movw	r16, r2
    1f6a:	92 01       	movw	r18, r4
    1f6c:	a3 01       	movw	r20, r6
    1f6e:	b4 01       	movw	r22, r8
    1f70:	8c e0       	ldi	r24, 0x0C	; 12
    1f72:	6f c0       	rjmp	.+222    	; 0x2052 <radioChangeAddress+0x294>
            break;
        case '3':
            rx_addr_p3 = newAddress;
    1f74:	20 92 44 04 	sts	0x0444, r2
    1f78:	30 92 45 04 	sts	0x0445, r3
    1f7c:	40 92 46 04 	sts	0x0446, r4
    1f80:	50 92 47 04 	sts	0x0447, r5
    1f84:	60 92 48 04 	sts	0x0448, r6
    1f88:	70 92 49 04 	sts	0x0449, r7
    1f8c:	80 92 4a 04 	sts	0x044A, r8
    1f90:	90 92 4b 04 	sts	0x044B, r9
            strcat(statusMsg, "r3 0x");
    1f94:	64 e5       	ldi	r22, 0x54	; 84
    1f96:	71 e0       	ldi	r23, 0x01	; 1
    1f98:	8a e8       	ldi	r24, 0x8A	; 138
    1f9a:	93 e0       	ldi	r25, 0x03	; 3
    1f9c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            writeAddr(RX_ADDR_P3, newAddress);
    1fa0:	81 01       	movw	r16, r2
    1fa2:	92 01       	movw	r18, r4
    1fa4:	a3 01       	movw	r20, r6
    1fa6:	b4 01       	movw	r22, r8
    1fa8:	8d e0       	ldi	r24, 0x0D	; 13
    1faa:	53 c0       	rjmp	.+166    	; 0x2052 <radioChangeAddress+0x294>
            break;
        case '4':
            rx_addr_p4 = newAddress;
    1fac:	20 92 4c 04 	sts	0x044C, r2
    1fb0:	30 92 4d 04 	sts	0x044D, r3
    1fb4:	40 92 4e 04 	sts	0x044E, r4
    1fb8:	50 92 4f 04 	sts	0x044F, r5
    1fbc:	60 92 50 04 	sts	0x0450, r6
    1fc0:	70 92 51 04 	sts	0x0451, r7
    1fc4:	80 92 52 04 	sts	0x0452, r8
    1fc8:	90 92 53 04 	sts	0x0453, r9
            strcat(statusMsg, "r4 0x");
    1fcc:	6a e5       	ldi	r22, 0x5A	; 90
    1fce:	71 e0       	ldi	r23, 0x01	; 1
    1fd0:	8a e8       	ldi	r24, 0x8A	; 138
    1fd2:	93 e0       	ldi	r25, 0x03	; 3
    1fd4:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            writeAddr(RX_ADDR_P4, newAddress);
    1fd8:	81 01       	movw	r16, r2
    1fda:	92 01       	movw	r18, r4
    1fdc:	a3 01       	movw	r20, r6
    1fde:	b4 01       	movw	r22, r8
    1fe0:	8e e0       	ldi	r24, 0x0E	; 14
    1fe2:	37 c0       	rjmp	.+110    	; 0x2052 <radioChangeAddress+0x294>
            break;
        case '5':
            rx_addr_p5 = newAddress;
    1fe4:	20 92 54 04 	sts	0x0454, r2
    1fe8:	30 92 55 04 	sts	0x0455, r3
    1fec:	40 92 56 04 	sts	0x0456, r4
    1ff0:	50 92 57 04 	sts	0x0457, r5
    1ff4:	60 92 58 04 	sts	0x0458, r6
    1ff8:	70 92 59 04 	sts	0x0459, r7
    1ffc:	80 92 5a 04 	sts	0x045A, r8
    2000:	90 92 5b 04 	sts	0x045B, r9
            strcat(statusMsg, "r5 0x");
    2004:	60 e6       	ldi	r22, 0x60	; 96
    2006:	71 e0       	ldi	r23, 0x01	; 1
    2008:	8a e8       	ldi	r24, 0x8A	; 138
    200a:	93 e0       	ldi	r25, 0x03	; 3
    200c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            writeAddr(RX_ADDR_P5, newAddress);
    2010:	81 01       	movw	r16, r2
    2012:	92 01       	movw	r18, r4
    2014:	a3 01       	movw	r20, r6
    2016:	b4 01       	movw	r22, r8
    2018:	8f e0       	ldi	r24, 0x0F	; 15
    201a:	1b c0       	rjmp	.+54     	; 0x2052 <radioChangeAddress+0x294>
            break;
        case 'T':
            tx_addr = newAddress;
    201c:	20 92 24 04 	sts	0x0424, r2
    2020:	30 92 25 04 	sts	0x0425, r3
    2024:	40 92 26 04 	sts	0x0426, r4
    2028:	50 92 27 04 	sts	0x0427, r5
    202c:	60 92 28 04 	sts	0x0428, r6
    2030:	70 92 29 04 	sts	0x0429, r7
    2034:	80 92 2a 04 	sts	0x042A, r8
    2038:	90 92 2b 04 	sts	0x042B, r9
            strcat(statusMsg, "t 0x");
    203c:	66 e6       	ldi	r22, 0x66	; 102
    203e:	71 e0       	ldi	r23, 0x01	; 1
    2040:	8a e8       	ldi	r24, 0x8A	; 138
    2042:	93 e0       	ldi	r25, 0x03	; 3
    2044:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            writeAddr(TX_ADDR, newAddress);
    2048:	81 01       	movw	r16, r2
    204a:	92 01       	movw	r18, r4
    204c:	a3 01       	movw	r20, r6
    204e:	b4 01       	movw	r22, r8
    2050:	80 e1       	ldi	r24, 0x10	; 16
    2052:	0e 94 47 29 	call	0x528e	; 0x528e <writeAddr>
            break;
    }
    unformatAddress(newAddress, tempRadioString);
    2056:	8e 01       	movw	r16, r28
    2058:	0f 5f       	subi	r16, 0xFF	; 255
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	91 01       	movw	r18, r2
    205e:	a2 01       	movw	r20, r4
    2060:	b3 01       	movw	r22, r6
    2062:	c4 01       	movw	r24, r8
    2064:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
    2068:	78 01       	movw	r14, r16
//static uint64_t rx_addr_p0, rx_addr_p1, rx_addr_p2, rx_addr_p3, rx_addr_p4, rx_addr_p5, tx_addr;

//RD:N RC:N 0xnnnnnnnnnn
//     01234567890123456

void radioChangeAddress(char * commandReceived) {
    206a:	6e 01       	movw	r12, r28
    206c:	f6 e0       	ldi	r31, 0x06	; 6
    206e:	cf 0e       	add	r12, r31
    2070:	d1 1c       	adc	r13, r1
            writeAddr(TX_ADDR, newAddress);
            break;
    }
    unformatAddress(newAddress, tempRadioString);
    for (x = 0; x < 5; x++) {
        returnHexWithout(tempRadioString[x], tempLongString);
    2072:	66 e1       	ldi	r22, 0x16	; 22
    2074:	71 e0       	ldi	r23, 0x01	; 1
    2076:	f7 01       	movw	r30, r14
    2078:	81 91       	ld	r24, Z+
    207a:	7f 01       	movw	r14, r30
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 c1 07 	call	0xf82	; 0xf82 <returnHexWithout>
        strcat(statusMsg, tempLongString);
    2082:	66 e1       	ldi	r22, 0x16	; 22
    2084:	71 e0       	ldi	r23, 0x01	; 1
    2086:	8a e8       	ldi	r24, 0x8A	; 138
    2088:	93 e0       	ldi	r25, 0x03	; 3
    208a:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            strcat(statusMsg, "t 0x");
            writeAddr(TX_ADDR, newAddress);
            break;
    }
    unformatAddress(newAddress, tempRadioString);
    for (x = 0; x < 5; x++) {
    208e:	ec 14       	cp	r14, r12
    2090:	fd 04       	cpc	r15, r13
    2092:	79 f7       	brne	.-34     	; 0x2072 <radioChangeAddress+0x2b4>
        returnHexWithout(tempRadioString[x], tempLongString);
        strcat(statusMsg, tempLongString);
    }
    sendMessage(statusMsg);
    2094:	8a e8       	ldi	r24, 0x8A	; 138
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
}
    209c:	2b 96       	adiw	r28, 0x0b	; 11
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	df 90       	pop	r13
    20b6:	cf 90       	pop	r12
    20b8:	bf 90       	pop	r11
    20ba:	af 90       	pop	r10
    20bc:	9f 90       	pop	r9
    20be:	8f 90       	pop	r8
    20c0:	7f 90       	pop	r7
    20c2:	6f 90       	pop	r6
    20c4:	5f 90       	pop	r5
    20c6:	4f 90       	pop	r4
    20c8:	3f 90       	pop	r3
    20ca:	2f 90       	pop	r2
    20cc:	08 95       	ret

000020ce <radioDisplayAddress>:

// display's a given address
//RD:N RC:N 0xnnnnnnnnnn
//0123

void radioDisplayAddress(char * commandReceived) {
    20ce:	ef 92       	push	r14
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	00 d0       	rcall	.+0      	; 0x20dc <radioDisplayAddress+0xe>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <radioDisplayAddress+0x10>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <radioDisplayAddress+0x12>
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    int x = 0;
    char tempRadioString[6];
    statusMsg[0] = 0;
    20e4:	10 92 8a 03 	sts	0x038A, r1
    if(commandReceived[3] == '1') {
    20e8:	fc 01       	movw	r30, r24
    20ea:	83 81       	ldd	r24, Z+3	; 0x03
    20ec:	81 33       	cpi	r24, 0x31	; 49
    20ee:	19 f5       	brne	.+70     	; 0x2136 <radioDisplayAddress+0x68>
            unformatAddress(rx_addr_p1, tempRadioString);
    20f0:	20 91 34 04 	lds	r18, 0x0434
    20f4:	30 91 35 04 	lds	r19, 0x0435
    20f8:	40 91 36 04 	lds	r20, 0x0436
    20fc:	50 91 37 04 	lds	r21, 0x0437
    2100:	60 91 38 04 	lds	r22, 0x0438
    2104:	70 91 39 04 	lds	r23, 0x0439
    2108:	8e 01       	movw	r16, r28
    210a:	0f 5f       	subi	r16, 0xFF	; 255
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	80 91 3a 04 	lds	r24, 0x043A
    2112:	90 91 3b 04 	lds	r25, 0x043B
    2116:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
            strcat(statusMsg, "r1-0x");
    211a:	60 e7       	ldi	r22, 0x70	; 112
    211c:	71 e0       	ldi	r23, 0x01	; 1
    211e:	8a e8       	ldi	r24, 0x8A	; 138
    2120:	93 e0       	ldi	r25, 0x03	; 3
    2122:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    2126:	8e 01       	movw	r16, r28
    2128:	0f 5f       	subi	r16, 0xFF	; 255
    212a:	1f 4f       	sbci	r17, 0xFF	; 255

// display's a given address
//RD:N RC:N 0xnnnnnnnnnn
//0123

void radioDisplayAddress(char * commandReceived) {
    212c:	7e 01       	movw	r14, r28
    212e:	f6 e0       	ldi	r31, 0x06	; 6
    2130:	ef 0e       	add	r14, r31
    2132:	f1 1c       	adc	r15, r1
    2134:	9a c0       	rjmp	.+308    	; 0x226a <radioDisplayAddress+0x19c>
    char tempRadioString[6];
    statusMsg[0] = 0;
    if(commandReceived[3] == '1') {
            unformatAddress(rx_addr_p1, tempRadioString);
            strcat(statusMsg, "r1-0x");
    } else if(commandReceived[3] == '2') {
    2136:	82 33       	cpi	r24, 0x32	; 50
    2138:	c1 f4       	brne	.+48     	; 0x216a <radioDisplayAddress+0x9c>
            unformatAddress(rx_addr_p2, tempRadioString);
    213a:	20 91 3c 04 	lds	r18, 0x043C
    213e:	30 91 3d 04 	lds	r19, 0x043D
    2142:	40 91 3e 04 	lds	r20, 0x043E
    2146:	50 91 3f 04 	lds	r21, 0x043F
    214a:	60 91 40 04 	lds	r22, 0x0440
    214e:	70 91 41 04 	lds	r23, 0x0441
    2152:	8e 01       	movw	r16, r28
    2154:	0f 5f       	subi	r16, 0xFF	; 255
    2156:	1f 4f       	sbci	r17, 0xFF	; 255
    2158:	80 91 42 04 	lds	r24, 0x0442
    215c:	90 91 43 04 	lds	r25, 0x0443
    2160:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
            strcat(statusMsg, "r2-0x");
    2164:	66 e7       	ldi	r22, 0x76	; 118
    2166:	71 e0       	ldi	r23, 0x01	; 1
    2168:	da cf       	rjmp	.-76     	; 0x211e <radioDisplayAddress+0x50>
    } else if(commandReceived[3] == '3') {
    216a:	83 33       	cpi	r24, 0x33	; 51
    216c:	c1 f4       	brne	.+48     	; 0x219e <radioDisplayAddress+0xd0>
            unformatAddress(rx_addr_p3, tempRadioString);
    216e:	20 91 44 04 	lds	r18, 0x0444
    2172:	30 91 45 04 	lds	r19, 0x0445
    2176:	40 91 46 04 	lds	r20, 0x0446
    217a:	50 91 47 04 	lds	r21, 0x0447
    217e:	60 91 48 04 	lds	r22, 0x0448
    2182:	70 91 49 04 	lds	r23, 0x0449
    2186:	8e 01       	movw	r16, r28
    2188:	0f 5f       	subi	r16, 0xFF	; 255
    218a:	1f 4f       	sbci	r17, 0xFF	; 255
    218c:	80 91 4a 04 	lds	r24, 0x044A
    2190:	90 91 4b 04 	lds	r25, 0x044B
    2194:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
            strcat(statusMsg, "r3-0x");
    2198:	6c e7       	ldi	r22, 0x7C	; 124
    219a:	71 e0       	ldi	r23, 0x01	; 1
    219c:	c0 cf       	rjmp	.-128    	; 0x211e <radioDisplayAddress+0x50>
    } else if(commandReceived[3] == '4') {
    219e:	84 33       	cpi	r24, 0x34	; 52
    21a0:	c1 f4       	brne	.+48     	; 0x21d2 <radioDisplayAddress+0x104>
            unformatAddress(rx_addr_p4, tempRadioString);
    21a2:	20 91 4c 04 	lds	r18, 0x044C
    21a6:	30 91 4d 04 	lds	r19, 0x044D
    21aa:	40 91 4e 04 	lds	r20, 0x044E
    21ae:	50 91 4f 04 	lds	r21, 0x044F
    21b2:	60 91 50 04 	lds	r22, 0x0450
    21b6:	70 91 51 04 	lds	r23, 0x0451
    21ba:	8e 01       	movw	r16, r28
    21bc:	0f 5f       	subi	r16, 0xFF	; 255
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	80 91 52 04 	lds	r24, 0x0452
    21c4:	90 91 53 04 	lds	r25, 0x0453
    21c8:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
            strcat(statusMsg, "r4-0x");
    21cc:	62 e8       	ldi	r22, 0x82	; 130
    21ce:	71 e0       	ldi	r23, 0x01	; 1
    21d0:	a6 cf       	rjmp	.-180    	; 0x211e <radioDisplayAddress+0x50>
    } else if (commandReceived[3] == '5') {
    21d2:	85 33       	cpi	r24, 0x35	; 53
    21d4:	c1 f4       	brne	.+48     	; 0x2206 <radioDisplayAddress+0x138>
            unformatAddress(rx_addr_p5, tempRadioString);
    21d6:	20 91 54 04 	lds	r18, 0x0454
    21da:	30 91 55 04 	lds	r19, 0x0455
    21de:	40 91 56 04 	lds	r20, 0x0456
    21e2:	50 91 57 04 	lds	r21, 0x0457
    21e6:	60 91 58 04 	lds	r22, 0x0458
    21ea:	70 91 59 04 	lds	r23, 0x0459
    21ee:	8e 01       	movw	r16, r28
    21f0:	0f 5f       	subi	r16, 0xFF	; 255
    21f2:	1f 4f       	sbci	r17, 0xFF	; 255
    21f4:	80 91 5a 04 	lds	r24, 0x045A
    21f8:	90 91 5b 04 	lds	r25, 0x045B
    21fc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
            strcat(statusMsg, "r5-0x");
    2200:	68 e8       	ldi	r22, 0x88	; 136
    2202:	71 e0       	ldi	r23, 0x01	; 1
    2204:	8c cf       	rjmp	.-232    	; 0x211e <radioDisplayAddress+0x50>
    } else if (commandReceived[3] == 'T') {
    2206:	84 35       	cpi	r24, 0x54	; 84
    2208:	c1 f4       	brne	.+48     	; 0x223a <radioDisplayAddress+0x16c>
            unformatAddress(tx_addr, tempRadioString);
    220a:	20 91 24 04 	lds	r18, 0x0424
    220e:	30 91 25 04 	lds	r19, 0x0425
    2212:	40 91 26 04 	lds	r20, 0x0426
    2216:	50 91 27 04 	lds	r21, 0x0427
    221a:	60 91 28 04 	lds	r22, 0x0428
    221e:	70 91 29 04 	lds	r23, 0x0429
    2222:	8e 01       	movw	r16, r28
    2224:	0f 5f       	subi	r16, 0xFF	; 255
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	80 91 2a 04 	lds	r24, 0x042A
    222c:	90 91 2b 04 	lds	r25, 0x042B
    2230:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
            strcat(statusMsg, "t-0x");
    2234:	6e e8       	ldi	r22, 0x8E	; 142
    2236:	71 e0       	ldi	r23, 0x01	; 1
    2238:	72 cf       	rjmp	.-284    	; 0x211e <radioDisplayAddress+0x50>
    } else {
            unformatAddress(rx_addr_p0, tempRadioString);
    223a:	20 91 2c 04 	lds	r18, 0x042C
    223e:	30 91 2d 04 	lds	r19, 0x042D
    2242:	40 91 2e 04 	lds	r20, 0x042E
    2246:	50 91 2f 04 	lds	r21, 0x042F
    224a:	60 91 30 04 	lds	r22, 0x0430
    224e:	70 91 31 04 	lds	r23, 0x0431
    2252:	8e 01       	movw	r16, r28
    2254:	0f 5f       	subi	r16, 0xFF	; 255
    2256:	1f 4f       	sbci	r17, 0xFF	; 255
    2258:	80 91 32 04 	lds	r24, 0x0432
    225c:	90 91 33 04 	lds	r25, 0x0433
    2260:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
            strcat(statusMsg, "r0-0x");
    2264:	63 e9       	ldi	r22, 0x93	; 147
    2266:	71 e0       	ldi	r23, 0x01	; 1
    2268:	5a cf       	rjmp	.-332    	; 0x211e <radioDisplayAddress+0x50>
    }
    for (x = 0; x < 5; x++) {
        returnHexWithout(tempRadioString[x], tempLongString);
    226a:	66 e1       	ldi	r22, 0x16	; 22
    226c:	71 e0       	ldi	r23, 0x01	; 1
    226e:	f8 01       	movw	r30, r16
    2270:	81 91       	ld	r24, Z+
    2272:	8f 01       	movw	r16, r30
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	0e 94 c1 07 	call	0xf82	; 0xf82 <returnHexWithout>
        strcat(statusMsg, tempLongString);
    227a:	66 e1       	ldi	r22, 0x16	; 22
    227c:	71 e0       	ldi	r23, 0x01	; 1
    227e:	8a e8       	ldi	r24, 0x8A	; 138
    2280:	93 e0       	ldi	r25, 0x03	; 3
    2282:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            strcat(statusMsg, "t-0x");
    } else {
            unformatAddress(rx_addr_p0, tempRadioString);
            strcat(statusMsg, "r0-0x");
    }
    for (x = 0; x < 5; x++) {
    2286:	0e 15       	cp	r16, r14
    2288:	1f 05       	cpc	r17, r15
    228a:	79 f7       	brne	.-34     	; 0x226a <radioDisplayAddress+0x19c>
        returnHexWithout(tempRadioString[x], tempLongString);
        strcat(statusMsg, tempLongString);
    }
    sendMessage(statusMsg);
    228c:	8a e8       	ldi	r24, 0x8A	; 138
    228e:	93 e0       	ldi	r25, 0x03	; 3
    2290:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
}
    2294:	26 96       	adiw	r28, 0x06	; 6
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	08 95       	ret

000022ae <switchesOn>:
    }
    sendMessage(statusMsg);
}

// transmits Y or N for which switches are currently turned on
void switchesOn(void) {
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    statusMsg[0] = 0;
    22b2:	10 92 8a 03 	sts	0x038A, r1
    strcat(statusMsg, "SwOn");
    22b6:	69 e9       	ldi	r22, 0x99	; 153
    22b8:	71 e0       	ldi	r23, 0x01	; 1
    22ba:	8a e8       	ldi	r24, 0x8A	; 138
    22bc:	93 e0       	ldi	r25, 0x03	; 3
    22be:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    22c2:	c0 e0       	ldi	r28, 0x00	; 0
    22c4:	d3 e0       	ldi	r29, 0x03	; 3
    int x;
    for (x = 0; x < NUM_SWITCHES; x++) {
        if (switchStatus[x] > 0) {
    22c6:	89 91       	ld	r24, Y+
    22c8:	99 91       	ld	r25, Y+
    22ca:	a9 91       	ld	r26, Y+
    22cc:	b9 91       	ld	r27, Y+
    22ce:	89 2b       	or	r24, r25
    22d0:	8a 2b       	or	r24, r26
    22d2:	8b 2b       	or	r24, r27
    22d4:	19 f0       	breq	.+6      	; 0x22dc <switchesOn+0x2e>
            strcat(statusMsg, "y");
    22d6:	6e e9       	ldi	r22, 0x9E	; 158
    22d8:	71 e0       	ldi	r23, 0x01	; 1
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <switchesOn+0x32>
        } else {
            strcat(statusMsg, "n");
    22dc:	61 ea       	ldi	r22, 0xA1	; 161
    22de:	71 e0       	ldi	r23, 0x01	; 1
    22e0:	8a e8       	ldi	r24, 0x8A	; 138
    22e2:	93 e0       	ldi	r25, 0x03	; 3
    22e4:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        }
        if (strlen(statusMsg) > 30) {
    22e8:	ea e8       	ldi	r30, 0x8A	; 138
    22ea:	f3 e0       	ldi	r31, 0x03	; 3
    22ec:	01 90       	ld	r0, Z+
    22ee:	00 20       	and	r0, r0
    22f0:	e9 f7       	brne	.-6      	; 0x22ec <switchesOn+0x3e>
    22f2:	31 97       	sbiw	r30, 0x01	; 1
    22f4:	ea 58       	subi	r30, 0x8A	; 138
    22f6:	f3 40       	sbci	r31, 0x03	; 3
    22f8:	7f 97       	sbiw	r30, 0x1f	; 31
    22fa:	30 f0       	brcs	.+12     	; 0x2308 <switchesOn+0x5a>
            sendMessage(statusMsg);
    22fc:	8a e8       	ldi	r24, 0x8A	; 138
    22fe:	93 e0       	ldi	r25, 0x03	; 3
    2300:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
            statusMsg[4] = 0;
    2304:	10 92 8e 03 	sts	0x038E, r1
// transmits Y or N for which switches are currently turned on
void switchesOn(void) {
    statusMsg[0] = 0;
    strcat(statusMsg, "SwOn");
    int x;
    for (x = 0; x < NUM_SWITCHES; x++) {
    2308:	83 e0       	ldi	r24, 0x03	; 3
    230a:	c0 34       	cpi	r28, 0x40	; 64
    230c:	d8 07       	cpc	r29, r24
    230e:	d9 f6       	brne	.-74     	; 0x22c6 <switchesOn+0x18>
        if (strlen(statusMsg) > 30) {
            sendMessage(statusMsg);
            statusMsg[4] = 0;
        }
    }
    sendMessage(statusMsg);
    2310:	8a e8       	ldi	r24, 0x8A	; 138
    2312:	93 e0       	ldi	r25, 0x03	; 3
}
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
        if (strlen(statusMsg) > 30) {
            sendMessage(statusMsg);
            statusMsg[4] = 0;
        }
    }
    sendMessage(statusMsg);
    2318:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>

0000231c <inputsProgrammed>:
    }
    sendMessage(statusMsg);
}

// transmits Y or N for which inputs have been programmed
void inputsProgrammed(void) {
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    statusMsg[0] = 0;
    2320:	10 92 8a 03 	sts	0x038A, r1
    strcat(statusMsg, "In");
    2324:	60 ea       	ldi	r22, 0xA0	; 160
    2326:	71 e0       	ldi	r23, 0x01	; 1
    2328:	8a e8       	ldi	r24, 0x8A	; 138
    232a:	93 e0       	ldi	r25, 0x03	; 3
    232c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    2330:	c0 e6       	ldi	r28, 0x60	; 96
    2332:	d3 e0       	ldi	r29, 0x03	; 3
    int x;
    for (x = 0; x < NUM_INPUTS; x++) {
        if (inputs[x][0] == 255) {
    2334:	88 81       	ld	r24, Y
    2336:	8f 3f       	cpi	r24, 0xFF	; 255
    2338:	19 f4       	brne	.+6      	; 0x2340 <inputsProgrammed+0x24>
            strcat(statusMsg, "n");
    233a:	61 ea       	ldi	r22, 0xA1	; 161
    233c:	71 e0       	ldi	r23, 0x01	; 1
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <inputsProgrammed+0x28>
        } else {
            strcat(statusMsg, "y");
    2340:	6e e9       	ldi	r22, 0x9E	; 158
    2342:	71 e0       	ldi	r23, 0x01	; 1
    2344:	8a e8       	ldi	r24, 0x8A	; 138
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        }
        // can only send 32 bytes at a time
        if (strlen(statusMsg) > 30) {
    234c:	ea e8       	ldi	r30, 0x8A	; 138
    234e:	f3 e0       	ldi	r31, 0x03	; 3
    2350:	01 90       	ld	r0, Z+
    2352:	00 20       	and	r0, r0
    2354:	e9 f7       	brne	.-6      	; 0x2350 <inputsProgrammed+0x34>
    2356:	31 97       	sbiw	r30, 0x01	; 1
    2358:	ea 58       	subi	r30, 0x8A	; 138
    235a:	f3 40       	sbci	r31, 0x03	; 3
    235c:	7f 97       	sbiw	r30, 0x1f	; 31
    235e:	30 f0       	brcs	.+12     	; 0x236c <inputsProgrammed+0x50>
            sendMessage(statusMsg);
    2360:	8a e8       	ldi	r24, 0x8A	; 138
    2362:	93 e0       	ldi	r25, 0x03	; 3
    2364:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
            statusMsg[2] = 0;
    2368:	10 92 8c 03 	sts	0x038C, r1
    236c:	28 96       	adiw	r28, 0x08	; 8
// transmits Y or N for which inputs have been programmed
void inputsProgrammed(void) {
    statusMsg[0] = 0;
    strcat(statusMsg, "In");
    int x;
    for (x = 0; x < NUM_INPUTS; x++) {
    236e:	83 e0       	ldi	r24, 0x03	; 3
    2370:	c0 38       	cpi	r28, 0x80	; 128
    2372:	d8 07       	cpc	r29, r24
    2374:	f9 f6       	brne	.-66     	; 0x2334 <inputsProgrammed+0x18>
        if (strlen(statusMsg) > 30) {
            sendMessage(statusMsg);
            statusMsg[2] = 0;
        }
    }
    sendMessage(statusMsg);
    2376:	8a e8       	ldi	r24, 0x8A	; 138
    2378:	93 e0       	ldi	r25, 0x03	; 3
}
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
        if (strlen(statusMsg) > 30) {
            sendMessage(statusMsg);
            statusMsg[2] = 0;
        }
    }
    sendMessage(statusMsg);
    237e:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>

00002382 <switchesProgrammed>:
        }
    }
    sendMessage(statusMsg);    
}
// transmits Y or N for which switches have been programmed
void switchesProgrammed(void) {
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    statusMsg[0] = 0;
    2386:	10 92 8a 03 	sts	0x038A, r1
    strcat(statusMsg, "Swi");
    238a:	63 ea       	ldi	r22, 0xA3	; 163
    238c:	71 e0       	ldi	r23, 0x01	; 1
    238e:	8a e8       	ldi	r24, 0x8A	; 138
    2390:	93 e0       	ldi	r25, 0x03	; 3
    2392:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    2396:	c0 e4       	ldi	r28, 0x40	; 64
    2398:	d3 e0       	ldi	r29, 0x03	; 3
    int x;
    for (x = 0; x < NUM_SWITCHES; x++) {

        if (switchStuff[x] == 255) {
    239a:	89 91       	ld	r24, Y+
    239c:	8f 3f       	cpi	r24, 0xFF	; 255
    239e:	19 f4       	brne	.+6      	; 0x23a6 <switchesProgrammed+0x24>
            strcat(statusMsg, "n");
    23a0:	61 ea       	ldi	r22, 0xA1	; 161
    23a2:	71 e0       	ldi	r23, 0x01	; 1
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <switchesProgrammed+0x28>
        } else {
            strcat(statusMsg, "y");
    23a6:	6e e9       	ldi	r22, 0x9E	; 158
    23a8:	71 e0       	ldi	r23, 0x01	; 1
    23aa:	8a e8       	ldi	r24, 0x8A	; 138
    23ac:	93 e0       	ldi	r25, 0x03	; 3
    23ae:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        }
        // can only send 32 bytes at a time
        if (strlen(statusMsg) > 30) {
    23b2:	ea e8       	ldi	r30, 0x8A	; 138
    23b4:	f3 e0       	ldi	r31, 0x03	; 3
    23b6:	01 90       	ld	r0, Z+
    23b8:	00 20       	and	r0, r0
    23ba:	e9 f7       	brne	.-6      	; 0x23b6 <switchesProgrammed+0x34>
    23bc:	31 97       	sbiw	r30, 0x01	; 1
    23be:	ea 58       	subi	r30, 0x8A	; 138
    23c0:	f3 40       	sbci	r31, 0x03	; 3
    23c2:	7f 97       	sbiw	r30, 0x1f	; 31
    23c4:	30 f0       	brcs	.+12     	; 0x23d2 <switchesProgrammed+0x50>
            sendMessage(statusMsg);
    23c6:	8a e8       	ldi	r24, 0x8A	; 138
    23c8:	93 e0       	ldi	r25, 0x03	; 3
    23ca:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
            statusMsg[3] = 0;
    23ce:	10 92 8d 03 	sts	0x038D, r1
// transmits Y or N for which switches have been programmed
void switchesProgrammed(void) {
    statusMsg[0] = 0;
    strcat(statusMsg, "Swi");
    int x;
    for (x = 0; x < NUM_SWITCHES; x++) {
    23d2:	83 e0       	ldi	r24, 0x03	; 3
    23d4:	c0 35       	cpi	r28, 0x50	; 80
    23d6:	d8 07       	cpc	r29, r24
    23d8:	01 f7       	brne	.-64     	; 0x239a <switchesProgrammed+0x18>
        if (strlen(statusMsg) > 30) {
            sendMessage(statusMsg);
            statusMsg[3] = 0;
        }
    }
    sendMessage(statusMsg);
    23da:	8a e8       	ldi	r24, 0x8A	; 138
    23dc:	93 e0       	ldi	r25, 0x03	; 3
}
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
        if (strlen(statusMsg) > 30) {
            sendMessage(statusMsg);
            statusMsg[3] = 0;
        }
    }
    sendMessage(statusMsg);
    23e2:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>

000023e6 <programsProgrammed>:
    strcat(statusMsg,tempLongString);
    sendMessage(statusMsg);
}

// transmits Y or N for which programs have been programmed
void programsProgrammed(void) {
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    strcat(statusMsg, "Progs");
    23ea:	67 ea       	ldi	r22, 0xA7	; 167
    23ec:	71 e0       	ldi	r23, 0x01	; 1
    23ee:	8a e8       	ldi	r24, 0x8A	; 138
    23f0:	93 e0       	ldi	r25, 0x03	; 3
    23f2:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    23f6:	c1 ec       	ldi	r28, 0xC1	; 193
    23f8:	d3 e0       	ldi	r29, 0x03	; 3
    strcat(statusMsg,tempLongString);
    sendMessage(statusMsg);
}

// transmits Y or N for which programs have been programmed
void programsProgrammed(void) {
    23fa:	fe 01       	movw	r30, r28
    23fc:	31 97       	sbiw	r30, 0x01	; 1
    strcat(statusMsg, "Progs");
    int x;
    for (x = 0; x < MAX_PROGRAM; x++) {
        if (weeklyProgram[x][0] == 255 && weeklyProgram[x][1] == 255) {
    23fe:	80 81       	ld	r24, Z
    2400:	8f 3f       	cpi	r24, 0xFF	; 255
    2402:	31 f4       	brne	.+12     	; 0x2410 <programsProgrammed+0x2a>
    2404:	88 81       	ld	r24, Y
    2406:	8f 3f       	cpi	r24, 0xFF	; 255
    2408:	19 f4       	brne	.+6      	; 0x2410 <programsProgrammed+0x2a>
            strcat(statusMsg, "n");
    240a:	61 ea       	ldi	r22, 0xA1	; 161
    240c:	71 e0       	ldi	r23, 0x01	; 1
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <programsProgrammed+0x2e>
        } else {
            strcat(statusMsg, "y");
    2410:	6e e9       	ldi	r22, 0x9E	; 158
    2412:	71 e0       	ldi	r23, 0x01	; 1
    2414:	8a e8       	ldi	r24, 0x8A	; 138
    2416:	93 e0       	ldi	r25, 0x03	; 3
    2418:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        }
        // can only send 32 bytes at a time
        if (strlen(statusMsg) > 30) {
    241c:	ea e8       	ldi	r30, 0x8A	; 138
    241e:	f3 e0       	ldi	r31, 0x03	; 3
    2420:	01 90       	ld	r0, Z+
    2422:	00 20       	and	r0, r0
    2424:	e9 f7       	brne	.-6      	; 0x2420 <programsProgrammed+0x3a>
    2426:	31 97       	sbiw	r30, 0x01	; 1
    2428:	ea 58       	subi	r30, 0x8A	; 138
    242a:	f3 40       	sbci	r31, 0x03	; 3
    242c:	7f 97       	sbiw	r30, 0x1f	; 31
    242e:	30 f0       	brcs	.+12     	; 0x243c <programsProgrammed+0x56>
            sendMessage(statusMsg);
    2430:	8a e8       	ldi	r24, 0x8A	; 138
    2432:	93 e0       	ldi	r25, 0x03	; 3
    2434:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
            statusMsg[5] = 0;
    2438:	10 92 8f 03 	sts	0x038F, r1
    243c:	2a 96       	adiw	r28, 0x0a	; 10

// transmits Y or N for which programs have been programmed
void programsProgrammed(void) {
    strcat(statusMsg, "Progs");
    int x;
    for (x = 0; x < MAX_PROGRAM; x++) {
    243e:	84 e0       	ldi	r24, 0x04	; 4
    2440:	c5 32       	cpi	r28, 0x25	; 37
    2442:	d8 07       	cpc	r29, r24
    2444:	d1 f6       	brne	.-76     	; 0x23fa <programsProgrammed+0x14>
        if (strlen(statusMsg) > 30) {
            sendMessage(statusMsg);
            statusMsg[5] = 0;
        }
    }
    sendMessage(statusMsg);    
    2446:	8a e8       	ldi	r24, 0x8A	; 138
    2448:	93 e0       	ldi	r25, 0x03	; 3
}
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
        if (strlen(statusMsg) > 30) {
            sendMessage(statusMsg);
            statusMsg[5] = 0;
        }
    }
    sendMessage(statusMsg);    
    244e:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>

00002452 <generalInformation>:
    switchesOn();
}

// returns a basic view of the capabilities
void generalInformation(void) {
    statusMsg[0] = 0;
    2452:	10 92 8a 03 	sts	0x038A, r1
    strcat(statusMsg,"Pr,");
    2456:	6d ea       	ldi	r22, 0xAD	; 173
    2458:	71 e0       	ldi	r23, 0x01	; 1
    245a:	8a e8       	ldi	r24, 0x8A	; 138
    245c:	93 e0       	ldi	r25, 0x03	; 3
    245e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    2462:	e1 ec       	ldi	r30, 0xC1	; 193
    2464:	f3 e0       	ldi	r31, 0x03	; 3
    int count = 0;
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    inputsProgrammed();
    switchesOn();
}

// returns a basic view of the capabilities
void generalInformation(void) {
    246a:	df 01       	movw	r26, r30
    246c:	11 97       	sbiw	r26, 0x01	; 1
    statusMsg[0] = 0;
    strcat(statusMsg,"Pr,");
    int count = 0;
    int x;
    for(x=0;x<MAX_PROGRAM;x++) {
        if(weeklyProgram[x][0] == 255 && weeklyProgram[x][1] == 255) 
    246e:	2c 91       	ld	r18, X
    2470:	2f 3f       	cpi	r18, 0xFF	; 255
    2472:	21 f4       	brne	.+8      	; 0x247c <generalInformation+0x2a>
    2474:	20 81       	ld	r18, Z
    2476:	2f 3f       	cpi	r18, 0xFF	; 255
    2478:	09 f4       	brne	.+2      	; 0x247c <generalInformation+0x2a>
            count++;
    247a:	01 96       	adiw	r24, 0x01	; 1
    247c:	3a 96       	adiw	r30, 0x0a	; 10
void generalInformation(void) {
    statusMsg[0] = 0;
    strcat(statusMsg,"Pr,");
    int count = 0;
    int x;
    for(x=0;x<MAX_PROGRAM;x++) {
    247e:	24 e0       	ldi	r18, 0x04	; 4
    2480:	e5 32       	cpi	r30, 0x25	; 37
    2482:	f2 07       	cpc	r31, r18
    2484:	91 f7       	brne	.-28     	; 0x246a <generalInformation+0x18>
        if(weeklyProgram[x][0] == 255 && weeklyProgram[x][1] == 255) 
            count++;
    }
    returnInt(count,tempLongString);
    2486:	66 e1       	ldi	r22, 0x16	; 22
    2488:	71 e0       	ldi	r23, 0x01	; 1
    248a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg,tempLongString);
    248e:	66 e1       	ldi	r22, 0x16	; 22
    2490:	71 e0       	ldi	r23, 0x01	; 1
    2492:	8a e8       	ldi	r24, 0x8A	; 138
    2494:	93 e0       	ldi	r25, 0x03	; 3
    2496:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg,"/");
    249a:	6b e3       	ldi	r22, 0x3B	; 59
    249c:	71 e0       	ldi	r23, 0x01	; 1
    249e:	8a e8       	ldi	r24, 0x8A	; 138
    24a0:	93 e0       	ldi	r25, 0x03	; 3
    24a2:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(MAX_PROGRAM,tempLongString);
    24a6:	66 e1       	ldi	r22, 0x16	; 22
    24a8:	71 e0       	ldi	r23, 0x01	; 1
    24aa:	8a e0       	ldi	r24, 0x0A	; 10
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg,tempLongString);
    24b2:	66 e1       	ldi	r22, 0x16	; 22
    24b4:	71 e0       	ldi	r23, 0x01	; 1
    24b6:	8a e8       	ldi	r24, 0x8A	; 138
    24b8:	93 e0       	ldi	r25, 0x03	; 3
    24ba:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg,",Sw,");
    24be:	61 eb       	ldi	r22, 0xB1	; 177
    24c0:	71 e0       	ldi	r23, 0x01	; 1
    24c2:	8a e8       	ldi	r24, 0x8A	; 138
    24c4:	93 e0       	ldi	r25, 0x03	; 3
    24c6:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    24ca:	e0 e4       	ldi	r30, 0x40	; 64
    24cc:	f3 e0       	ldi	r31, 0x03	; 3
    count = 0;
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    for (x = 0; x < NUM_SWITCHES; x++) {
        if (switchStuff[x] < 255)
    24d2:	21 91       	ld	r18, Z+
    24d4:	2f 3f       	cpi	r18, 0xFF	; 255
    24d6:	09 f0       	breq	.+2      	; 0x24da <generalInformation+0x88>
            count ++;
    24d8:	01 96       	adiw	r24, 0x01	; 1
    strcat(statusMsg,"/");
    returnInt(MAX_PROGRAM,tempLongString);
    strcat(statusMsg,tempLongString);
    strcat(statusMsg,",Sw,");
    count = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
    24da:	23 e0       	ldi	r18, 0x03	; 3
    24dc:	e0 35       	cpi	r30, 0x50	; 80
    24de:	f2 07       	cpc	r31, r18
    24e0:	c1 f7       	brne	.-16     	; 0x24d2 <generalInformation+0x80>
        if (switchStuff[x] < 255)
            count ++;
    }
    returnInt(count,tempLongString);
    24e2:	66 e1       	ldi	r22, 0x16	; 22
    24e4:	71 e0       	ldi	r23, 0x01	; 1
    24e6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg,tempLongString);
    24ea:	66 e1       	ldi	r22, 0x16	; 22
    24ec:	71 e0       	ldi	r23, 0x01	; 1
    24ee:	8a e8       	ldi	r24, 0x8A	; 138
    24f0:	93 e0       	ldi	r25, 0x03	; 3
    24f2:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg,"/");
    24f6:	6b e3       	ldi	r22, 0x3B	; 59
    24f8:	71 e0       	ldi	r23, 0x01	; 1
    24fa:	8a e8       	ldi	r24, 0x8A	; 138
    24fc:	93 e0       	ldi	r25, 0x03	; 3
    24fe:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(NUM_SWITCHES,tempLongString);
    2502:	66 e1       	ldi	r22, 0x16	; 22
    2504:	71 e0       	ldi	r23, 0x01	; 1
    2506:	80 e1       	ldi	r24, 0x10	; 16
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg,tempLongString);
    250e:	66 e1       	ldi	r22, 0x16	; 22
    2510:	71 e0       	ldi	r23, 0x01	; 1
    2512:	8a e8       	ldi	r24, 0x8A	; 138
    2514:	93 e0       	ldi	r25, 0x03	; 3
    2516:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg,",In,");
    251a:	66 eb       	ldi	r22, 0xB6	; 182
    251c:	71 e0       	ldi	r23, 0x01	; 1
    251e:	8a e8       	ldi	r24, 0x8A	; 138
    2520:	93 e0       	ldi	r25, 0x03	; 3
    2522:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    2526:	e0 e6       	ldi	r30, 0x60	; 96
    2528:	f3 e0       	ldi	r31, 0x03	; 3
    count = 0;
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    for (x = 0; x < NUM_INPUTS; x++) {
        if (inputs[x][0] < 255)
    252e:	20 81       	ld	r18, Z
    2530:	2f 3f       	cpi	r18, 0xFF	; 255
    2532:	09 f0       	breq	.+2      	; 0x2536 <generalInformation+0xe4>
            count ++;
    2534:	01 96       	adiw	r24, 0x01	; 1
    2536:	38 96       	adiw	r30, 0x08	; 8
    strcat(statusMsg,"/");
    returnInt(NUM_SWITCHES,tempLongString);
    strcat(statusMsg,tempLongString);
    strcat(statusMsg,",In,");
    count = 0;
    for (x = 0; x < NUM_INPUTS; x++) {
    2538:	23 e0       	ldi	r18, 0x03	; 3
    253a:	e0 38       	cpi	r30, 0x80	; 128
    253c:	f2 07       	cpc	r31, r18
    253e:	b9 f7       	brne	.-18     	; 0x252e <generalInformation+0xdc>
        if (inputs[x][0] < 255)
            count ++;
    }
    returnInt(count,tempLongString);
    2540:	66 e1       	ldi	r22, 0x16	; 22
    2542:	71 e0       	ldi	r23, 0x01	; 1
    2544:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg,tempLongString);
    2548:	66 e1       	ldi	r22, 0x16	; 22
    254a:	71 e0       	ldi	r23, 0x01	; 1
    254c:	8a e8       	ldi	r24, 0x8A	; 138
    254e:	93 e0       	ldi	r25, 0x03	; 3
    2550:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg,"/");
    2554:	6b e3       	ldi	r22, 0x3B	; 59
    2556:	71 e0       	ldi	r23, 0x01	; 1
    2558:	8a e8       	ldi	r24, 0x8A	; 138
    255a:	93 e0       	ldi	r25, 0x03	; 3
    255c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(NUM_INPUTS,tempLongString);
    2560:	66 e1       	ldi	r22, 0x16	; 22
    2562:	71 e0       	ldi	r23, 0x01	; 1
    2564:	84 e0       	ldi	r24, 0x04	; 4
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg,tempLongString);
    256c:	66 e1       	ldi	r22, 0x16	; 22
    256e:	71 e0       	ldi	r23, 0x01	; 1
    2570:	8a e8       	ldi	r24, 0x8A	; 138
    2572:	93 e0       	ldi	r25, 0x03	; 3
    2574:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg,",Li,");
    2578:	6b eb       	ldi	r22, 0xBB	; 187
    257a:	71 e0       	ldi	r23, 0x01	; 1
    257c:	8a e8       	ldi	r24, 0x8A	; 138
    257e:	93 e0       	ldi	r25, 0x03	; 3
    2580:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    2584:	e2 e6       	ldi	r30, 0x62	; 98
    2586:	f3 e0       	ldi	r31, 0x03	; 3
    count = 0;
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    for (x = 0; x < NUM_LIMITS; x++) {
        if (inputs[x][2] > 0)
    258c:	20 81       	ld	r18, Z
    258e:	21 11       	cpse	r18, r1
            count ++;
    2590:	01 96       	adiw	r24, 0x01	; 1
    2592:	38 96       	adiw	r30, 0x08	; 8
    strcat(statusMsg,"/");
    returnInt(NUM_INPUTS,tempLongString);
    strcat(statusMsg,tempLongString);
    strcat(statusMsg,",Li,");
    count = 0;
    for (x = 0; x < NUM_LIMITS; x++) {
    2594:	23 e0       	ldi	r18, 0x03	; 3
    2596:	e2 38       	cpi	r30, 0x82	; 130
    2598:	f2 07       	cpc	r31, r18
    259a:	c1 f7       	brne	.-16     	; 0x258c <generalInformation+0x13a>
        if (inputs[x][2] > 0)
            count ++;
    }
    returnInt(count,tempLongString);
    259c:	66 e1       	ldi	r22, 0x16	; 22
    259e:	71 e0       	ldi	r23, 0x01	; 1
    25a0:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg,tempLongString);
    25a4:	66 e1       	ldi	r22, 0x16	; 22
    25a6:	71 e0       	ldi	r23, 0x01	; 1
    25a8:	8a e8       	ldi	r24, 0x8A	; 138
    25aa:	93 e0       	ldi	r25, 0x03	; 3
    25ac:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg,"/");
    25b0:	6b e3       	ldi	r22, 0x3B	; 59
    25b2:	71 e0       	ldi	r23, 0x01	; 1
    25b4:	8a e8       	ldi	r24, 0x8A	; 138
    25b6:	93 e0       	ldi	r25, 0x03	; 3
    25b8:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(NUM_LIMITS,tempLongString);
    25bc:	66 e1       	ldi	r22, 0x16	; 22
    25be:	71 e0       	ldi	r23, 0x01	; 1
    25c0:	84 e0       	ldi	r24, 0x04	; 4
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg,tempLongString);
    25c8:	66 e1       	ldi	r22, 0x16	; 22
    25ca:	71 e0       	ldi	r23, 0x01	; 1
    25cc:	8a e8       	ldi	r24, 0x8A	; 138
    25ce:	93 e0       	ldi	r25, 0x03	; 3
    25d0:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg,",CC,");
    25d4:	60 ec       	ldi	r22, 0xC0	; 192
    25d6:	71 e0       	ldi	r23, 0x01	; 1
    25d8:	8a e8       	ldi	r24, 0x8A	; 138
    25da:	93 e0       	ldi	r25, 0x03	; 3
    25dc:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    25e0:	e2 ee       	ldi	r30, 0xE2	; 226
    25e2:	f2 e0       	ldi	r31, 0x02	; 2
    count = 0;
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    inputsProgrammed();
    switchesOn();
}

// returns a basic view of the capabilities
void generalInformation(void) {
    25e8:	df 01       	movw	r26, r30
    25ea:	12 97       	sbiw	r26, 0x02	; 2
    returnInt(NUM_LIMITS,tempLongString);
    strcat(statusMsg,tempLongString);
    strcat(statusMsg,",CC,");
    count = 0;
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        if (colorChanges[x][0] != 0 || colorChanges[x][1] != 1 || colorChanges[x][2] != 0)
    25ec:	2c 91       	ld	r18, X
    25ee:	21 11       	cpse	r18, r1
    25f0:	07 c0       	rjmp	.+14     	; 0x2600 <generalInformation+0x1ae>
    inputsProgrammed();
    switchesOn();
}

// returns a basic view of the capabilities
void generalInformation(void) {
    25f2:	df 01       	movw	r26, r30
    25f4:	11 97       	sbiw	r26, 0x01	; 1
    returnInt(NUM_LIMITS,tempLongString);
    strcat(statusMsg,tempLongString);
    strcat(statusMsg,",CC,");
    count = 0;
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        if (colorChanges[x][0] != 0 || colorChanges[x][1] != 1 || colorChanges[x][2] != 0)
    25f6:	2c 91       	ld	r18, X
    25f8:	21 30       	cpi	r18, 0x01	; 1
    25fa:	11 f4       	brne	.+4      	; 0x2600 <generalInformation+0x1ae>
    25fc:	20 81       	ld	r18, Z
    25fe:	21 11       	cpse	r18, r1
            count ++;
    2600:	01 96       	adiw	r24, 0x01	; 1
    2602:	33 96       	adiw	r30, 0x03	; 3
    strcat(statusMsg,"/");
    returnInt(NUM_LIMITS,tempLongString);
    strcat(statusMsg,tempLongString);
    strcat(statusMsg,",CC,");
    count = 0;
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
    2604:	22 e0       	ldi	r18, 0x02	; 2
    2606:	e4 3f       	cpi	r30, 0xF4	; 244
    2608:	f2 07       	cpc	r31, r18
    260a:	71 f7       	brne	.-36     	; 0x25e8 <generalInformation+0x196>
        if (colorChanges[x][0] != 0 || colorChanges[x][1] != 1 || colorChanges[x][2] != 0)
            count ++;
    }
    returnInt(count,tempLongString);
    260c:	66 e1       	ldi	r22, 0x16	; 22
    260e:	71 e0       	ldi	r23, 0x01	; 1
    2610:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg,tempLongString);
    2614:	66 e1       	ldi	r22, 0x16	; 22
    2616:	71 e0       	ldi	r23, 0x01	; 1
    2618:	8a e8       	ldi	r24, 0x8A	; 138
    261a:	93 e0       	ldi	r25, 0x03	; 3
    261c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg,"/");
    2620:	6b e3       	ldi	r22, 0x3B	; 59
    2622:	71 e0       	ldi	r23, 0x01	; 1
    2624:	8a e8       	ldi	r24, 0x8A	; 138
    2626:	93 e0       	ldi	r25, 0x03	; 3
    2628:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(NUM_COLOR_CHANGES,tempLongString);
    262c:	66 e1       	ldi	r22, 0x16	; 22
    262e:	71 e0       	ldi	r23, 0x01	; 1
    2630:	86 e0       	ldi	r24, 0x06	; 6
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg,tempLongString);
    2638:	66 e1       	ldi	r22, 0x16	; 22
    263a:	71 e0       	ldi	r23, 0x01	; 1
    263c:	8a e8       	ldi	r24, 0x8A	; 138
    263e:	93 e0       	ldi	r25, 0x03	; 3
    2640:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    sendMessage(statusMsg);
    2644:	8a e8       	ldi	r24, 0x8A	; 138
    2646:	93 e0       	ldi	r25, 0x03	; 3
    2648:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>

0000264c <generalStatus>:


// sends a general status
// basically an overview of the system

void generalStatus(char * commandReceived) {
    264c:	0f 93       	push	r16
    264e:	1f 93       	push	r17
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	8c 01       	movw	r16, r24
    statusMsg[0] = 0;
    2656:	10 92 8a 03 	sts	0x038A, r1
    tempIntString[0] = commandReceived[2];
    265a:	fc 01       	movw	r30, r24
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[3];
    2662:	83 81       	ldd	r24, Z+3	; 0x03
    2664:	80 93 0a 01 	sts	0x010A, r24

    strcat(statusMsg, "S#");
    2668:	65 ec       	ldi	r22, 0xC5	; 197
    266a:	71 e0       	ldi	r23, 0x01	; 1
    266c:	8a e8       	ldi	r24, 0x8A	; 138
    266e:	93 e0       	ldi	r25, 0x03	; 3
    2670:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    int serialLength = 0;
    //since a 0 serial number is not valid that means to return the serial number
    serialLength = strlen(stringSerial);
    2674:	c2 e0       	ldi	r28, 0x02	; 2
    2676:	d1 e0       	ldi	r29, 0x01	; 1
    2678:	09 90       	ld	r0, Y+
    267a:	00 20       	and	r0, r0
    267c:	e9 f7       	brne	.-6      	; 0x2678 <generalStatus+0x2c>
    267e:	21 97       	sbiw	r28, 0x01	; 1
    2680:	c2 50       	subi	r28, 0x02	; 2
    2682:	d1 40       	sbci	r29, 0x01	; 1
    while (serialLength < 6) {
    2684:	07 c0       	rjmp	.+14     	; 0x2694 <generalStatus+0x48>
        strcat(statusMsg, "0");
    2686:	61 e8       	ldi	r22, 0x81	; 129
    2688:	72 e0       	ldi	r23, 0x02	; 2
    268a:	8a e8       	ldi	r24, 0x8A	; 138
    268c:	93 e0       	ldi	r25, 0x03	; 3
    268e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        serialLength++;
    2692:	21 96       	adiw	r28, 0x01	; 1

    strcat(statusMsg, "S#");
    int serialLength = 0;
    //since a 0 serial number is not valid that means to return the serial number
    serialLength = strlen(stringSerial);
    while (serialLength < 6) {
    2694:	c6 30       	cpi	r28, 0x06	; 6
    2696:	d1 05       	cpc	r29, r1
    2698:	b4 f3       	brlt	.-20     	; 0x2686 <generalStatus+0x3a>
        strcat(statusMsg, "0");
        serialLength++;
    }
    strcat(statusMsg, stringSerial);
    269a:	62 e0       	ldi	r22, 0x02	; 2
    269c:	71 e0       	ldi	r23, 0x01	; 1
    269e:	8a e8       	ldi	r24, 0x8A	; 138
    26a0:	93 e0       	ldi	r25, 0x03	; 3
    26a2:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>

    if (panicMyClockIsNotSet == 1) {
    26a6:	80 91 01 01 	lds	r24, 0x0101
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	19 f4       	brne	.+6      	; 0x26b4 <generalStatus+0x68>
        strcat(statusMsg, " T:xx/xx/xxxx xx:xx:xx");
    26ae:	68 ec       	ldi	r22, 0xC8	; 200
    26b0:	71 e0       	ldi	r23, 0x01	; 1
    26b2:	74 c0       	rjmp	.+232    	; 0x279c <generalStatus+0x150>
    } else {
        strcat(statusMsg, " T:");
    26b4:	6f ed       	ldi	r22, 0xDF	; 223
    26b6:	71 e0       	ldi	r23, 0x01	; 1
    26b8:	8a e8       	ldi	r24, 0x8A	; 138
    26ba:	93 e0       	ldi	r25, 0x03	; 3
    26bc:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        returnInt(globalMonth, tempLongString);
    26c0:	66 e1       	ldi	r22, 0x16	; 22
    26c2:	71 e0       	ldi	r23, 0x01	; 1
    26c4:	80 91 fc 02 	lds	r24, 0x02FC
    26c8:	90 91 fd 02 	lds	r25, 0x02FD
    26cc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempLongString);
    26d0:	66 e1       	ldi	r22, 0x16	; 22
    26d2:	71 e0       	ldi	r23, 0x01	; 1
    26d4:	8a e8       	ldi	r24, 0x8A	; 138
    26d6:	93 e0       	ldi	r25, 0x03	; 3
    26d8:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, "/");
    26dc:	6b e3       	ldi	r22, 0x3B	; 59
    26de:	71 e0       	ldi	r23, 0x01	; 1
    26e0:	8a e8       	ldi	r24, 0x8A	; 138
    26e2:	93 e0       	ldi	r25, 0x03	; 3
    26e4:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        returnInt(globalDay, tempLongString);
    26e8:	66 e1       	ldi	r22, 0x16	; 22
    26ea:	71 e0       	ldi	r23, 0x01	; 1
    26ec:	80 91 fa 02 	lds	r24, 0x02FA
    26f0:	90 91 fb 02 	lds	r25, 0x02FB
    26f4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempLongString);
    26f8:	66 e1       	ldi	r22, 0x16	; 22
    26fa:	71 e0       	ldi	r23, 0x01	; 1
    26fc:	8a e8       	ldi	r24, 0x8A	; 138
    26fe:	93 e0       	ldi	r25, 0x03	; 3
    2700:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, "/");
    2704:	6b e3       	ldi	r22, 0x3B	; 59
    2706:	71 e0       	ldi	r23, 0x01	; 1
    2708:	8a e8       	ldi	r24, 0x8A	; 138
    270a:	93 e0       	ldi	r25, 0x03	; 3
    270c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        returnInt(globalYear, tempLongString);
    2710:	66 e1       	ldi	r22, 0x16	; 22
    2712:	71 e0       	ldi	r23, 0x01	; 1
    2714:	80 91 fe 02 	lds	r24, 0x02FE
    2718:	90 91 ff 02 	lds	r25, 0x02FF
    271c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempLongString);
    2720:	66 e1       	ldi	r22, 0x16	; 22
    2722:	71 e0       	ldi	r23, 0x01	; 1
    2724:	8a e8       	ldi	r24, 0x8A	; 138
    2726:	93 e0       	ldi	r25, 0x03	; 3
    2728:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, " ");
    272c:	65 e4       	ldi	r22, 0x45	; 69
    272e:	72 e0       	ldi	r23, 0x02	; 2
    2730:	8a e8       	ldi	r24, 0x8A	; 138
    2732:	93 e0       	ldi	r25, 0x03	; 3
    2734:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        returnInt(globalHour, tempLongString);
    2738:	66 e1       	ldi	r22, 0x16	; 22
    273a:	71 e0       	ldi	r23, 0x01	; 1
    273c:	80 91 f8 02 	lds	r24, 0x02F8
    2740:	90 91 f9 02 	lds	r25, 0x02F9
    2744:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempLongString);
    2748:	66 e1       	ldi	r22, 0x16	; 22
    274a:	71 e0       	ldi	r23, 0x01	; 1
    274c:	8a e8       	ldi	r24, 0x8A	; 138
    274e:	93 e0       	ldi	r25, 0x03	; 3
    2750:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, ":");
    2754:	61 ee       	ldi	r22, 0xE1	; 225
    2756:	71 e0       	ldi	r23, 0x01	; 1
    2758:	8a e8       	ldi	r24, 0x8A	; 138
    275a:	93 e0       	ldi	r25, 0x03	; 3
    275c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        returnInt(globalMinute, tempLongString);
    2760:	66 e1       	ldi	r22, 0x16	; 22
    2762:	71 e0       	ldi	r23, 0x01	; 1
    2764:	80 91 f6 02 	lds	r24, 0x02F6
    2768:	90 91 f7 02 	lds	r25, 0x02F7
    276c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempLongString);
    2770:	66 e1       	ldi	r22, 0x16	; 22
    2772:	71 e0       	ldi	r23, 0x01	; 1
    2774:	8a e8       	ldi	r24, 0x8A	; 138
    2776:	93 e0       	ldi	r25, 0x03	; 3
    2778:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, ":");
    277c:	61 ee       	ldi	r22, 0xE1	; 225
    277e:	71 e0       	ldi	r23, 0x01	; 1
    2780:	8a e8       	ldi	r24, 0x8A	; 138
    2782:	93 e0       	ldi	r25, 0x03	; 3
    2784:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        returnInt(globalSecond, tempLongString);
    2788:	66 e1       	ldi	r22, 0x16	; 22
    278a:	71 e0       	ldi	r23, 0x01	; 1
    278c:	80 91 f4 02 	lds	r24, 0x02F4
    2790:	90 91 f5 02 	lds	r25, 0x02F5
    2794:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempLongString);
    2798:	66 e1       	ldi	r22, 0x16	; 22
    279a:	71 e0       	ldi	r23, 0x01	; 1
    279c:	8a e8       	ldi	r24, 0x8A	; 138
    279e:	93 e0       	ldi	r25, 0x03	; 3
    27a0:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    }
    sendMessage(statusMsg);
    27a4:	8a e8       	ldi	r24, 0x8A	; 138
    27a6:	93 e0       	ldi	r25, 0x03	; 3
    27a8:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
    statusMsg[0] = 0;
    27ac:	10 92 8a 03 	sts	0x038A, r1
    if (commandReceived[2] == 'q')
    27b0:	f8 01       	movw	r30, r16
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	81 37       	cpi	r24, 0x71	; 113
    27b6:	61 f0       	breq	.+24     	; 0x27d0 <generalStatus+0x184>
        return;

    programsProgrammed();
    27b8:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <programsProgrammed>
    switchesProgrammed();
    27bc:	0e 94 c1 11 	call	0x2382	; 0x2382 <switchesProgrammed>
    inputsProgrammed();
    27c0:	0e 94 8e 11 	call	0x231c	; 0x231c <inputsProgrammed>
    switchesOn();
}
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
        return;

    programsProgrammed();
    switchesProgrammed();
    inputsProgrammed();
    switchesOn();
    27cc:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <switchesOn>
}
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	08 95       	ret

000027da <programDisplay>:
    temp = (duration & 0xff);
    weeklyProgram[programNumber][4] = temp;
    ok();
}

void programDisplay(char * commandReceived) {
    27da:	af 92       	push	r10
    27dc:	bf 92       	push	r11
    27de:	cf 92       	push	r12
    27e0:	df 92       	push	r13
    27e2:	ef 92       	push	r14
    27e4:	ff 92       	push	r15
    27e6:	0f 93       	push	r16
    27e8:	1f 93       	push	r17
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	60 97       	sbiw	r28, 0x10	; 16
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    int x = 0;
    int programNumber = 0;
    tempIntString[0] = commandReceived[3];
    27fe:	fc 01       	movw	r30, r24
    2800:	23 81       	ldd	r18, Z+3	; 0x03
    2802:	20 93 09 01 	sts	0x0109, r18
    tempIntString[1] = commandReceived[4];
    2806:	84 81       	ldd	r24, Z+4	; 0x04
    2808:	80 93 0a 01 	sts	0x010A, r24
    programNumber = atoi(tempIntString);
    280c:	89 e0       	ldi	r24, 0x09	; 9
    280e:	91 e0       	ldi	r25, 0x01	; 1
    2810:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    2814:	8c 01       	movw	r16, r24
    statusMsg[0] = 0;
    2816:	10 92 8a 03 	sts	0x038A, r1
    if (weeklyProgram[programNumber][0] == 255 && weeklyProgram[programNumber][1] == 255) {
    281a:	8a e0       	ldi	r24, 0x0A	; 10
    281c:	80 9f       	mul	r24, r16
    281e:	f0 01       	movw	r30, r0
    2820:	81 9f       	mul	r24, r17
    2822:	f0 0d       	add	r31, r0
    2824:	11 24       	eor	r1, r1
    2826:	e0 54       	subi	r30, 0x40	; 64
    2828:	fc 4f       	sbci	r31, 0xFC	; 252
    282a:	80 81       	ld	r24, Z
    282c:	8f 3f       	cpi	r24, 0xFF	; 255
    282e:	b9 f4       	brne	.+46     	; 0x285e <programDisplay+0x84>
    2830:	81 81       	ldd	r24, Z+1	; 0x01
    2832:	8f 3f       	cpi	r24, 0xFF	; 255
    2834:	a1 f4       	brne	.+40     	; 0x285e <programDisplay+0x84>
        strcat(statusMsg, "P#");
    2836:	63 ee       	ldi	r22, 0xE3	; 227
    2838:	71 e0       	ldi	r23, 0x01	; 1
    283a:	8a e8       	ldi	r24, 0x8A	; 138
    283c:	93 e0       	ldi	r25, 0x03	; 3
    283e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        returnInt(programNumber, tempIntString);
    2842:	69 e0       	ldi	r22, 0x09	; 9
    2844:	71 e0       	ldi	r23, 0x01	; 1
    2846:	c8 01       	movw	r24, r16
    2848:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempIntString);
    284c:	69 e0       	ldi	r22, 0x09	; 9
    284e:	71 e0       	ldi	r23, 0x01	; 1
    2850:	8a e8       	ldi	r24, 0x8A	; 138
    2852:	93 e0       	ldi	r25, 0x03	; 3
    2854:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, "blank.");
    2858:	66 ee       	ldi	r22, 0xE6	; 230
    285a:	71 e0       	ldi	r23, 0x01	; 1
    285c:	10 c1       	rjmp	.+544    	; 0x2a7e <programDisplay+0x2a4>
        sendMessage(statusMsg);
        return;
    }
    char switches[NUM_SWITCHES];
    switches[0] = 0;
    285e:	19 82       	std	Y+1, r1	; 0x01
    int switchCount = 0;
    switchCount = programGetSwitches(programNumber, switches);
    2860:	be 01       	movw	r22, r28
    2862:	6f 5f       	subi	r22, 0xFF	; 255
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	c8 01       	movw	r24, r16
    2868:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <programGetSwitches>
    286c:	6c 01       	movw	r12, r24
    statusMsg[0] = 0;
    286e:	10 92 8a 03 	sts	0x038A, r1
    strcat(statusMsg, "Prog#");
    2872:	6d ee       	ldi	r22, 0xED	; 237
    2874:	71 e0       	ldi	r23, 0x01	; 1
    2876:	8a e8       	ldi	r24, 0x8A	; 138
    2878:	93 e0       	ldi	r25, 0x03	; 3
    287a:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    itoa(programNumber, tempIntString, 10);
    287e:	4a e0       	ldi	r20, 0x0A	; 10
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	69 e0       	ldi	r22, 0x09	; 9
    2884:	71 e0       	ldi	r23, 0x01	; 1
    2886:	c8 01       	movw	r24, r16
    2888:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
    strcat(statusMsg, tempIntString);
    288c:	69 e0       	ldi	r22, 0x09	; 9
    288e:	71 e0       	ldi	r23, 0x01	; 1
    2890:	8a e8       	ldi	r24, 0x8A	; 138
    2892:	93 e0       	ldi	r25, 0x03	; 3
    2894:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    if (switchCount == 0) {
    2898:	c1 14       	cp	r12, r1
    289a:	d1 04       	cpc	r13, r1
    289c:	39 f4       	brne	.+14     	; 0x28ac <programDisplay+0xd2>
        strcat(switches, "S:-");
    289e:	63 ef       	ldi	r22, 0xF3	; 243
    28a0:	71 e0       	ldi	r23, 0x01	; 1
    28a2:	ce 01       	movw	r24, r28
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    28aa:	29 c0       	rjmp	.+82     	; 0x28fe <programDisplay+0x124>
    } else {
        int temp = 0;
        strcat(statusMsg, "S");
    28ac:	67 ef       	ldi	r22, 0xF7	; 247
    28ae:	71 e0       	ldi	r23, 0x01	; 1
    28b0:	8a e8       	ldi	r24, 0x8A	; 138
    28b2:	93 e0       	ldi	r25, 0x03	; 3
    28b4:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    28b8:	ee 24       	eor	r14, r14
    28ba:	e3 94       	inc	r14
    28bc:	f1 2c       	mov	r15, r1
    28be:	ec 0e       	add	r14, r28
    28c0:	fd 1e       	adc	r15, r29
    temp = (duration & 0xff);
    weeklyProgram[programNumber][4] = temp;
    ok();
}

void programDisplay(char * commandReceived) {
    28c2:	57 01       	movw	r10, r14
    if (switchCount == 0) {
        strcat(switches, "S:-");
    } else {
        int temp = 0;
        strcat(statusMsg, "S");
        for (x = 0; x < switchCount; x++) {
    28c4:	16 c0       	rjmp	.+44     	; 0x28f2 <programDisplay+0x118>
            strcat(statusMsg, ":");
    28c6:	61 ee       	ldi	r22, 0xE1	; 225
    28c8:	71 e0       	ldi	r23, 0x01	; 1
    28ca:	8a e8       	ldi	r24, 0x8A	; 138
    28cc:	93 e0       	ldi	r25, 0x03	; 3
    28ce:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            temp = switches[x];
            itoa(temp, tempIntString, 10);
    28d2:	4a e0       	ldi	r20, 0x0A	; 10
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	69 e0       	ldi	r22, 0x09	; 9
    28d8:	71 e0       	ldi	r23, 0x01	; 1
    28da:	f7 01       	movw	r30, r14
    28dc:	81 91       	ld	r24, Z+
    28de:	7f 01       	movw	r14, r30
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
            strcat(statusMsg, tempIntString);
    28e6:	69 e0       	ldi	r22, 0x09	; 9
    28e8:	71 e0       	ldi	r23, 0x01	; 1
    28ea:	8a e8       	ldi	r24, 0x8A	; 138
    28ec:	93 e0       	ldi	r25, 0x03	; 3
    28ee:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    temp = (duration & 0xff);
    weeklyProgram[programNumber][4] = temp;
    ok();
}

void programDisplay(char * commandReceived) {
    28f2:	c7 01       	movw	r24, r14
    28f4:	8a 19       	sub	r24, r10
    28f6:	9b 09       	sbc	r25, r11
    if (switchCount == 0) {
        strcat(switches, "S:-");
    } else {
        int temp = 0;
        strcat(statusMsg, "S");
        for (x = 0; x < switchCount; x++) {
    28f8:	8c 15       	cp	r24, r12
    28fa:	9d 05       	cpc	r25, r13
    28fc:	24 f3       	brlt	.-56     	; 0x28c6 <programDisplay+0xec>
            temp = switches[x];
            itoa(temp, tempIntString, 10);
            strcat(statusMsg, tempIntString);
        }
    }
    sendMessage(statusMsg);
    28fe:	8a e8       	ldi	r24, 0x8A	; 138
    2900:	93 e0       	ldi	r25, 0x03	; 3
    2902:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
    statusMsg[0] = 0;
    2906:	10 92 8a 03 	sts	0x038A, r1
    unsigned int time = 0;
    time = weeklyProgram[programNumber][1];
    290a:	8a e0       	ldi	r24, 0x0A	; 10
    290c:	80 9f       	mul	r24, r16
    290e:	f0 01       	movw	r30, r0
    2910:	81 9f       	mul	r24, r17
    2912:	f0 0d       	add	r31, r0
    2914:	11 24       	eor	r1, r1
    2916:	e0 54       	subi	r30, 0x40	; 64
    2918:	fc 4f       	sbci	r31, 0xFC	; 252
    time <<= 8;
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	80 e0       	ldi	r24, 0x00	; 0
    time |= weeklyProgram[programNumber][2];
    291e:	22 81       	ldd	r18, Z+2	; 0x02
    2920:	ac 01       	movw	r20, r24
    2922:	42 2b       	or	r20, r18
    2924:	9a 01       	movw	r18, r20
    unsigned int hours = (time / 60);
    2926:	5c e3       	ldi	r21, 0x3C	; 60
    2928:	e5 2e       	mov	r14, r21
    292a:	f1 2c       	mov	r15, r1
    292c:	c9 01       	movw	r24, r18
    292e:	b7 01       	movw	r22, r14
    2930:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <__udivmodhi4>
    2934:	8b 01       	movw	r16, r22
    unsigned int minutes = (time - (hours * 60));
    2936:	4c e3       	ldi	r20, 0x3C	; 60
    2938:	46 9f       	mul	r20, r22
    293a:	c0 01       	movw	r24, r0
    293c:	47 9f       	mul	r20, r23
    293e:	90 0d       	add	r25, r0
    2940:	11 24       	eor	r1, r1
    2942:	69 01       	movw	r12, r18
    2944:	c8 1a       	sub	r12, r24
    2946:	d9 0a       	sbc	r13, r25
    time = weeklyProgram[programNumber][3];
    time <<= 8;
    2948:	33 81       	ldd	r19, Z+3	; 0x03
    294a:	20 e0       	ldi	r18, 0x00	; 0
    time |= weeklyProgram[programNumber][4];
    294c:	84 81       	ldd	r24, Z+4	; 0x04
    294e:	a9 01       	movw	r20, r18
    2950:	48 2b       	or	r20, r24
    2952:	ca 01       	movw	r24, r20
    int duration = (time / 60);
    2954:	b7 01       	movw	r22, r14
    2956:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <__udivmodhi4>
    295a:	b6 2e       	mov	r11, r22
    295c:	e7 2e       	mov	r14, r23
    char weekdays = 0;
    weekdays = weeklyProgram[programNumber][0];
    295e:	f0 80       	ld	r15, Z
    strcat(statusMsg, "T:");
    2960:	60 ee       	ldi	r22, 0xE0	; 224
    2962:	71 e0       	ldi	r23, 0x01	; 1
    2964:	8a e8       	ldi	r24, 0x8A	; 138
    2966:	93 e0       	ldi	r25, 0x03	; 3
    2968:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    itoa(hours, tempIntString, 10);
    296c:	4a e0       	ldi	r20, 0x0A	; 10
    296e:	50 e0       	ldi	r21, 0x00	; 0
    2970:	69 e0       	ldi	r22, 0x09	; 9
    2972:	71 e0       	ldi	r23, 0x01	; 1
    2974:	c8 01       	movw	r24, r16
    2976:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
    strcat(statusMsg, tempIntString);
    297a:	69 e0       	ldi	r22, 0x09	; 9
    297c:	71 e0       	ldi	r23, 0x01	; 1
    297e:	8a e8       	ldi	r24, 0x8A	; 138
    2980:	93 e0       	ldi	r25, 0x03	; 3
    2982:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg, ":");
    2986:	61 ee       	ldi	r22, 0xE1	; 225
    2988:	71 e0       	ldi	r23, 0x01	; 1
    298a:	8a e8       	ldi	r24, 0x8A	; 138
    298c:	93 e0       	ldi	r25, 0x03	; 3
    298e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    itoa(minutes, tempIntString, 10);
    2992:	4a e0       	ldi	r20, 0x0A	; 10
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	69 e0       	ldi	r22, 0x09	; 9
    2998:	71 e0       	ldi	r23, 0x01	; 1
    299a:	c6 01       	movw	r24, r12
    299c:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
    strcat(statusMsg, tempIntString);
    29a0:	69 e0       	ldi	r22, 0x09	; 9
    29a2:	71 e0       	ldi	r23, 0x01	; 1
    29a4:	8a e8       	ldi	r24, 0x8A	; 138
    29a6:	93 e0       	ldi	r25, 0x03	; 3
    29a8:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg, " Dur:");
    29ac:	69 ef       	ldi	r22, 0xF9	; 249
    29ae:	71 e0       	ldi	r23, 0x01	; 1
    29b0:	8a e8       	ldi	r24, 0x8A	; 138
    29b2:	93 e0       	ldi	r25, 0x03	; 3
    29b4:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    itoa(duration, tempLongString, 10);
    29b8:	4a e0       	ldi	r20, 0x0A	; 10
    29ba:	50 e0       	ldi	r21, 0x00	; 0
    29bc:	66 e1       	ldi	r22, 0x16	; 22
    29be:	71 e0       	ldi	r23, 0x01	; 1
    29c0:	8b 2d       	mov	r24, r11
    29c2:	9e 2d       	mov	r25, r14
    29c4:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
    strcat(statusMsg, tempLongString);
    29c8:	66 e1       	ldi	r22, 0x16	; 22
    29ca:	71 e0       	ldi	r23, 0x01	; 1
    29cc:	8a e8       	ldi	r24, 0x8A	; 138
    29ce:	93 e0       	ldi	r25, 0x03	; 3
    29d0:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    strcat(statusMsg, "Days:");
    29d4:	6f ef       	ldi	r22, 0xFF	; 255
    29d6:	71 e0       	ldi	r23, 0x01	; 1
    29d8:	8a e8       	ldi	r24, 0x8A	; 138
    29da:	93 e0       	ldi	r25, 0x03	; 3
    29dc:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    if (weekdays == 255) {
    29e0:	5f ef       	ldi	r21, 0xFF	; 255
    29e2:	f5 12       	cpse	r15, r21
    29e4:	03 c0       	rjmp	.+6      	; 0x29ec <programDisplay+0x212>
        strcat(statusMsg, "-------");
    29e6:	65 e0       	ldi	r22, 0x05	; 5
    29e8:	72 e0       	ldi	r23, 0x02	; 2
    29ea:	49 c0       	rjmp	.+146    	; 0x2a7e <programDisplay+0x2a4>
        sendMessage(statusMsg);
        return;
    }
    if (weekdays & 0x40) {
    29ec:	f6 fe       	sbrs	r15, 6
    29ee:	03 c0       	rjmp	.+6      	; 0x29f6 <programDisplay+0x21c>
        strcat(statusMsg, "S");
    29f0:	67 ef       	ldi	r22, 0xF7	; 247
    29f2:	71 e0       	ldi	r23, 0x01	; 1
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <programDisplay+0x220>
    } else {
        strcat(statusMsg, "-");
    29f6:	6b e0       	ldi	r22, 0x0B	; 11
    29f8:	72 e0       	ldi	r23, 0x02	; 2
    29fa:	8a e8       	ldi	r24, 0x8A	; 138
    29fc:	93 e0       	ldi	r25, 0x03	; 3
    29fe:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    }
    if (weekdays & 0x20) {
    2a02:	f5 fe       	sbrs	r15, 5
    2a04:	03 c0       	rjmp	.+6      	; 0x2a0c <programDisplay+0x232>
        strcat(statusMsg, "M");
    2a06:	6d e0       	ldi	r22, 0x0D	; 13
    2a08:	72 e0       	ldi	r23, 0x02	; 2
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <programDisplay+0x236>
    } else {
        strcat(statusMsg, "-");
    2a0c:	6b e0       	ldi	r22, 0x0B	; 11
    2a0e:	72 e0       	ldi	r23, 0x02	; 2
    2a10:	8a e8       	ldi	r24, 0x8A	; 138
    2a12:	93 e0       	ldi	r25, 0x03	; 3
    2a14:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    }
    if (weekdays & 0x10) {
    2a18:	f4 fe       	sbrs	r15, 4
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <programDisplay+0x248>
        strcat(statusMsg, "T");
    2a1c:	6f e0       	ldi	r22, 0x0F	; 15
    2a1e:	72 e0       	ldi	r23, 0x02	; 2
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <programDisplay+0x24c>
    } else {
        strcat(statusMsg, "-");
    2a22:	6b e0       	ldi	r22, 0x0B	; 11
    2a24:	72 e0       	ldi	r23, 0x02	; 2
    2a26:	8a e8       	ldi	r24, 0x8A	; 138
    2a28:	93 e0       	ldi	r25, 0x03	; 3
    2a2a:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    }
    if (weekdays & 0x08) {
    2a2e:	f3 fe       	sbrs	r15, 3
    2a30:	03 c0       	rjmp	.+6      	; 0x2a38 <programDisplay+0x25e>
        strcat(statusMsg, "W");
    2a32:	61 e1       	ldi	r22, 0x11	; 17
    2a34:	72 e0       	ldi	r23, 0x02	; 2
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <programDisplay+0x262>
    } else {
        strcat(statusMsg, "-");
    2a38:	6b e0       	ldi	r22, 0x0B	; 11
    2a3a:	72 e0       	ldi	r23, 0x02	; 2
    2a3c:	8a e8       	ldi	r24, 0x8A	; 138
    2a3e:	93 e0       	ldi	r25, 0x03	; 3
    2a40:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    }
    if (weekdays & 0x04) {
    2a44:	f2 fe       	sbrs	r15, 2
    2a46:	03 c0       	rjmp	.+6      	; 0x2a4e <programDisplay+0x274>
        strcat(statusMsg, "T");
    2a48:	6f e0       	ldi	r22, 0x0F	; 15
    2a4a:	72 e0       	ldi	r23, 0x02	; 2
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <programDisplay+0x278>
    } else {
        strcat(statusMsg, "-");
    2a4e:	6b e0       	ldi	r22, 0x0B	; 11
    2a50:	72 e0       	ldi	r23, 0x02	; 2
    2a52:	8a e8       	ldi	r24, 0x8A	; 138
    2a54:	93 e0       	ldi	r25, 0x03	; 3
    2a56:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    }
    if (weekdays & 0x02) {
    2a5a:	f1 fe       	sbrs	r15, 1
    2a5c:	03 c0       	rjmp	.+6      	; 0x2a64 <programDisplay+0x28a>
        strcat(statusMsg, "F");
    2a5e:	63 e1       	ldi	r22, 0x13	; 19
    2a60:	72 e0       	ldi	r23, 0x02	; 2
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <programDisplay+0x28e>
    } else {
        strcat(statusMsg, "-");
    2a64:	6b e0       	ldi	r22, 0x0B	; 11
    2a66:	72 e0       	ldi	r23, 0x02	; 2
    2a68:	8a e8       	ldi	r24, 0x8A	; 138
    2a6a:	93 e0       	ldi	r25, 0x03	; 3
    2a6c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    }
    if (weekdays & 0x01) {
    2a70:	f0 fe       	sbrs	r15, 0
    2a72:	03 c0       	rjmp	.+6      	; 0x2a7a <programDisplay+0x2a0>
        strcat(statusMsg, "S");
    2a74:	67 ef       	ldi	r22, 0xF7	; 247
    2a76:	71 e0       	ldi	r23, 0x01	; 1
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <programDisplay+0x2a4>
    } else {
        strcat(statusMsg, "-");
    2a7a:	6b e0       	ldi	r22, 0x0B	; 11
    2a7c:	72 e0       	ldi	r23, 0x02	; 2
    2a7e:	8a e8       	ldi	r24, 0x8A	; 138
    2a80:	93 e0       	ldi	r25, 0x03	; 3
    2a82:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    }

    sendMessage(statusMsg);
    2a86:	8a e8       	ldi	r24, 0x8A	; 138
    2a88:	93 e0       	ldi	r25, 0x03	; 3
    2a8a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
}
    2a8e:	60 96       	adiw	r28, 0x10	; 16
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	df 90       	pop	r13
    2aa8:	cf 90       	pop	r12
    2aaa:	bf 90       	pop	r11
    2aac:	af 90       	pop	r10
    2aae:	08 95       	ret

00002ab0 <pwmSummary>:
    ok();
}

// show the pwm values & color change values

void pwmSummary(void) {
    2ab0:	cf 92       	push	r12
    2ab2:	df 92       	push	r13
    2ab4:	ef 92       	push	r14
    2ab6:	ff 92       	push	r15
    2ab8:	0f 93       	push	r16
    2aba:	1f 93       	push	r17
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	1f 92       	push	r1
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    statusMsg[0] = 0;
    2ac6:	10 92 8a 03 	sts	0x038A, r1
    strcat(statusMsg, "Val 0x");
    2aca:	65 e1       	ldi	r22, 0x15	; 21
    2acc:	72 e0       	ldi	r23, 0x02	; 2
    2ace:	8a e8       	ldi	r24, 0x8A	; 138
    2ad0:	93 e0       	ldi	r25, 0x03	; 3
    2ad2:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    2ad6:	0e ea       	ldi	r16, 0xAE	; 174
    2ad8:	13 e0       	ldi	r17, 0x03	; 3
    int x = 0;
    for (x = 0; x < 3; x++) {
    2ada:	e1 2c       	mov	r14, r1
    2adc:	f1 2c       	mov	r15, r1
    2ade:	06 c0       	rjmp	.+12     	; 0x2aec <pwmSummary+0x3c>
        if (x > 0)
            strcat(statusMsg, ",");
    2ae0:	63 ec       	ldi	r22, 0xC3	; 195
    2ae2:	71 e0       	ldi	r23, 0x01	; 1
    2ae4:	8a e8       	ldi	r24, 0x8A	; 138
    2ae6:	93 e0       	ldi	r25, 0x03	; 3
    2ae8:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        returnHexWithout(pwmValues[x], tempLongString);
    2aec:	66 e1       	ldi	r22, 0x16	; 22
    2aee:	71 e0       	ldi	r23, 0x01	; 1
    2af0:	f8 01       	movw	r30, r16
    2af2:	81 91       	ld	r24, Z+
    2af4:	8f 01       	movw	r16, r30
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 c1 07 	call	0xf82	; 0xf82 <returnHexWithout>
        strcat(statusMsg, tempLongString);
    2afc:	66 e1       	ldi	r22, 0x16	; 22
    2afe:	71 e0       	ldi	r23, 0x01	; 1
    2b00:	8a e8       	ldi	r24, 0x8A	; 138
    2b02:	93 e0       	ldi	r25, 0x03	; 3
    2b04:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>

void pwmSummary(void) {
    statusMsg[0] = 0;
    strcat(statusMsg, "Val 0x");
    int x = 0;
    for (x = 0; x < 3; x++) {
    2b08:	ff ef       	ldi	r31, 0xFF	; 255
    2b0a:	ef 1a       	sub	r14, r31
    2b0c:	ff 0a       	sbc	r15, r31
    2b0e:	83 e0       	ldi	r24, 0x03	; 3
    2b10:	e8 16       	cp	r14, r24
    2b12:	f1 04       	cpc	r15, r1
    2b14:	29 f7       	brne	.-54     	; 0x2ae0 <pwmSummary+0x30>
        if (x > 0)
            strcat(statusMsg, ",");
        returnHexWithout(pwmValues[x], tempLongString);
        strcat(statusMsg, tempLongString);
    }
    strcat(statusMsg, " dir ");
    2b16:	6c e1       	ldi	r22, 0x1C	; 28
    2b18:	72 e0       	ldi	r23, 0x02	; 2
    2b1a:	8a e8       	ldi	r24, 0x8A	; 138
    2b1c:	93 e0       	ldi	r25, 0x03	; 3
    2b1e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(pwmdir, tempLongString);
    2b22:	66 e1       	ldi	r22, 0x16	; 22
    2b24:	71 e0       	ldi	r23, 0x01	; 1
    2b26:	80 91 b7 03 	lds	r24, 0x03B7
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg, tempLongString);
    2b30:	66 e1       	ldi	r22, 0x16	; 22
    2b32:	71 e0       	ldi	r23, 0x01	; 1
    2b34:	8a e8       	ldi	r24, 0x8A	; 138
    2b36:	93 e0       	ldi	r25, 0x03	; 3
    2b38:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    sendMessage(statusMsg);
    2b3c:	8a e8       	ldi	r24, 0x8A	; 138
    2b3e:	93 e0       	ldi	r25, 0x03	; 3
    2b40:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
    statusMsg[0] = 0;
    2b44:	10 92 8a 03 	sts	0x038A, r1
    strcat(statusMsg, "Col Ch");
    2b48:	62 e2       	ldi	r22, 0x22	; 34
    2b4a:	72 e0       	ldi	r23, 0x02	; 2
    2b4c:	8a e8       	ldi	r24, 0x8A	; 138
    2b4e:	93 e0       	ldi	r25, 0x03	; 3
    2b50:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    2b54:	70 ee       	ldi	r23, 0xE0	; 224
    2b56:	e7 2e       	mov	r14, r23
    2b58:	72 e0       	ldi	r23, 0x02	; 2
    2b5a:	f7 2e       	mov	r15, r23
    int y = 0;
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
    2b5c:	c1 2c       	mov	r12, r1
    2b5e:	d1 2c       	mov	r13, r1
    2b60:	09 c0       	rjmp	.+18     	; 0x2b74 <pwmSummary+0xc4>
        if (x > 0)
            strcat(statusMsg, ",");
    2b62:	63 ec       	ldi	r22, 0xC3	; 195
    2b64:	71 e0       	ldi	r23, 0x01	; 1
    2b66:	8a e8       	ldi	r24, 0x8A	; 138
    2b68:	93 e0       	ldi	r25, 0x03	; 3
    2b6a:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    2b6e:	e3 e0       	ldi	r30, 0x03	; 3
    2b70:	ee 0e       	add	r14, r30
    2b72:	f1 1c       	adc	r15, r1
        strcat(statusMsg, "0x");
    2b74:	65 e4       	ldi	r22, 0x45	; 69
    2b76:	71 e0       	ldi	r23, 0x01	; 1
    2b78:	8a e8       	ldi	r24, 0x8A	; 138
    2b7a:	93 e0       	ldi	r25, 0x03	; 3
    2b7c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        for (y = 0; y < 3; y++) {
    2b80:	00 e0       	ldi	r16, 0x00	; 0
    2b82:	10 e0       	ldi	r17, 0x00	; 0
    ok();
}

// show the pwm values & color change values

void pwmSummary(void) {
    2b84:	f7 01       	movw	r30, r14
    2b86:	e0 0f       	add	r30, r16
    2b88:	f1 1f       	adc	r31, r17
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        if (x > 0)
            strcat(statusMsg, ",");
        strcat(statusMsg, "0x");
        for (y = 0; y < 3; y++) {
            returnHexWithout(colorChanges[x][y], tempLongString);
    2b8a:	66 e1       	ldi	r22, 0x16	; 22
    2b8c:	71 e0       	ldi	r23, 0x01	; 1
    2b8e:	80 81       	ld	r24, Z
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	0e 94 c1 07 	call	0xf82	; 0xf82 <returnHexWithout>
            strcat(statusMsg, tempLongString);
    2b96:	66 e1       	ldi	r22, 0x16	; 22
    2b98:	71 e0       	ldi	r23, 0x01	; 1
    2b9a:	8a e8       	ldi	r24, 0x8A	; 138
    2b9c:	93 e0       	ldi	r25, 0x03	; 3
    2b9e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    int y = 0;
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        if (x > 0)
            strcat(statusMsg, ",");
        strcat(statusMsg, "0x");
        for (y = 0; y < 3; y++) {
    2ba2:	0f 5f       	subi	r16, 0xFF	; 255
    2ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba6:	03 30       	cpi	r16, 0x03	; 3
    2ba8:	11 05       	cpc	r17, r1
    2baa:	61 f7       	brne	.-40     	; 0x2b84 <pwmSummary+0xd4>
            returnHexWithout(colorChanges[x][y], tempLongString);
            strcat(statusMsg, tempLongString);
        }
        if (strlen(statusMsg) > 25 && (x + 1) < NUM_COLOR_CHANGES) {
    2bac:	ea e8       	ldi	r30, 0x8A	; 138
    2bae:	f3 e0       	ldi	r31, 0x03	; 3
    2bb0:	01 90       	ld	r0, Z+
    2bb2:	00 20       	and	r0, r0
    2bb4:	e9 f7       	brne	.-6      	; 0x2bb0 <pwmSummary+0x100>
    2bb6:	31 97       	sbiw	r30, 0x01	; 1
    2bb8:	ea 58       	subi	r30, 0x8A	; 138
    2bba:	f3 40       	sbci	r31, 0x03	; 3
    2bbc:	7a 97       	sbiw	r30, 0x1a	; 26
    2bbe:	50 f0       	brcs	.+20     	; 0x2bd4 <pwmSummary+0x124>
    2bc0:	f5 e0       	ldi	r31, 0x05	; 5
    2bc2:	cf 16       	cp	r12, r31
    2bc4:	d1 04       	cpc	r13, r1
    2bc6:	31 f0       	breq	.+12     	; 0x2bd4 <pwmSummary+0x124>
            sendMessage(statusMsg);
    2bc8:	8a e8       	ldi	r24, 0x8A	; 138
    2bca:	93 e0       	ldi	r25, 0x03	; 3
    2bcc:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
            statusMsg[6] = 0;
    2bd0:	10 92 90 03 	sts	0x0390, r1
    strcat(statusMsg, tempLongString);
    sendMessage(statusMsg);
    statusMsg[0] = 0;
    strcat(statusMsg, "Col Ch");
    int y = 0;
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
    2bd4:	8f ef       	ldi	r24, 0xFF	; 255
    2bd6:	c8 1a       	sub	r12, r24
    2bd8:	d8 0a       	sbc	r13, r24
    2bda:	e6 e0       	ldi	r30, 0x06	; 6
    2bdc:	ce 16       	cp	r12, r30
    2bde:	d1 04       	cpc	r13, r1
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <pwmSummary+0x134>
    2be2:	bf cf       	rjmp	.-130    	; 0x2b62 <pwmSummary+0xb2>
        if (strlen(statusMsg) > 25 && (x + 1) < NUM_COLOR_CHANGES) {
            sendMessage(statusMsg);
            statusMsg[6] = 0;
        }
    }
    sendMessage(statusMsg);
    2be4:	8a e8       	ldi	r24, 0x8A	; 138
    2be6:	93 e0       	ldi	r25, 0x03	; 3
    2be8:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
    statusMsg[0] = 0;
    2bec:	10 92 8a 03 	sts	0x038A, r1
    2bf0:	00 e4       	ldi	r16, 0x40	; 64
    2bf2:	13 e0       	ldi	r17, 0x03	; 3
    for (x = 0; x < NUM_SWITCHES; x++) {
    2bf4:	e1 2c       	mov	r14, r1
    2bf6:	f1 2c       	mov	r15, r1
        if ((switchStuff[x] >= 200) && (switchStuff[x] <= 220)) {
    2bf8:	f8 01       	movw	r30, r16
    2bfa:	21 91       	ld	r18, Z+
    2bfc:	8f 01       	movw	r16, r30
    2bfe:	82 2f       	mov	r24, r18
    2c00:	88 5c       	subi	r24, 0xC8	; 200
    2c02:	85 31       	cpi	r24, 0x15	; 21
    2c04:	78 f5       	brcc	.+94     	; 0x2c64 <pwmSummary+0x1b4>
            strcat(statusMsg, "PWM ");
    2c06:	69 e2       	ldi	r22, 0x29	; 41
    2c08:	72 e0       	ldi	r23, 0x02	; 2
    2c0a:	8a e8       	ldi	r24, 0x8A	; 138
    2c0c:	93 e0       	ldi	r25, 0x03	; 3
    2c0e:	29 83       	std	Y+1, r18	; 0x01
    2c10:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            if (switchStuff[x] == 200) {
    2c14:	29 81       	ldd	r18, Y+1	; 0x01
    2c16:	28 3c       	cpi	r18, 0xC8	; 200
    2c18:	19 f4       	brne	.+6      	; 0x2c20 <pwmSummary+0x170>
                strcat(statusMsg, "static");
    2c1a:	6e e2       	ldi	r22, 0x2E	; 46
    2c1c:	72 e0       	ldi	r23, 0x02	; 2
    2c1e:	07 c0       	rjmp	.+14     	; 0x2c2e <pwmSummary+0x17e>
            } else if (switchStuff[x] == 202) {
    2c20:	2a 3c       	cpi	r18, 0xCA	; 202
    2c22:	19 f4       	brne	.+6      	; 0x2c2a <pwmSummary+0x17a>
                strcat(statusMsg, "ColCh");
    2c24:	65 e3       	ldi	r22, 0x35	; 53
    2c26:	72 e0       	ldi	r23, 0x02	; 2
    2c28:	02 c0       	rjmp	.+4      	; 0x2c2e <pwmSummary+0x17e>
            } else {
                strcat(statusMsg, "hue");
    2c2a:	6b e3       	ldi	r22, 0x3B	; 59
    2c2c:	72 e0       	ldi	r23, 0x02	; 2
    2c2e:	8a e8       	ldi	r24, 0x8A	; 138
    2c30:	93 e0       	ldi	r25, 0x03	; 3
    2c32:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            }
            strcat(statusMsg, "on sw# ");
    2c36:	6f e3       	ldi	r22, 0x3F	; 63
    2c38:	72 e0       	ldi	r23, 0x02	; 2
    2c3a:	8a e8       	ldi	r24, 0x8A	; 138
    2c3c:	93 e0       	ldi	r25, 0x03	; 3
    2c3e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            returnInt(x, tempLongString);
    2c42:	66 e1       	ldi	r22, 0x16	; 22
    2c44:	71 e0       	ldi	r23, 0x01	; 1
    2c46:	c7 01       	movw	r24, r14
    2c48:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
            strcat(statusMsg, tempLongString);
    2c4c:	66 e1       	ldi	r22, 0x16	; 22
    2c4e:	71 e0       	ldi	r23, 0x01	; 1
    2c50:	8a e8       	ldi	r24, 0x8A	; 138
    2c52:	93 e0       	ldi	r25, 0x03	; 3
    2c54:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
            sendMessage(statusMsg);
    2c58:	8a e8       	ldi	r24, 0x8A	; 138
    2c5a:	93 e0       	ldi	r25, 0x03	; 3
    2c5c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
            statusMsg[0] = 0;
    2c60:	10 92 8a 03 	sts	0x038A, r1
            statusMsg[6] = 0;
        }
    }
    sendMessage(statusMsg);
    statusMsg[0] = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
    2c64:	ff ef       	ldi	r31, 0xFF	; 255
    2c66:	ef 1a       	sub	r14, r31
    2c68:	ff 0a       	sbc	r15, r31
    2c6a:	80 e1       	ldi	r24, 0x10	; 16
    2c6c:	e8 16       	cp	r14, r24
    2c6e:	f1 04       	cpc	r15, r1
    2c70:	19 f6       	brne	.-122    	; 0x2bf8 <pwmSummary+0x148>
            strcat(statusMsg, tempLongString);
            sendMessage(statusMsg);
            statusMsg[0] = 0;
        }
    }
}
    2c72:	0f 90       	pop	r0
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	ff 90       	pop	r15
    2c7e:	ef 90       	pop	r14
    2c80:	df 90       	pop	r13
    2c82:	cf 90       	pop	r12
    2c84:	08 95       	ret

00002c86 <switchDisplay>:
    switchStuff[switchNumber] = 255;
}

// show a summary of the switches

void switchDisplay(char * commandReceived) {
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	a3 97       	sbiw	r28, 0x23	; 35
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    char port[] = {0};
    2c9a:	1b a2       	std	Y+35, r1	; 0x23
    char pin[] = {0};
    2c9c:	1a a2       	std	Y+34, r1	; 0x22
    char direction[] = {0};
    2c9e:	19 a2       	std	Y+33, r1	; 0x21
    int switchNumber = 0;
    int realPin = 0;
    char statusMsg[32];
    switchNumber = getSwitchNumber(commandReceived);
    2ca0:	0e 94 5a 00 	call	0xb4	; 0xb4 <getSwitchNumber>
    statusMsg[0] = 0;
    2ca4:	19 82       	std	Y+1, r1	; 0x01
    // see if this is a pwm switch
    if (switchStuff[switchNumber] >= 200 && switchStuff[switchNumber] <= 220) {
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	e0 5c       	subi	r30, 0xC0	; 192
    2caa:	fc 4f       	sbci	r31, 0xFC	; 252
    2cac:	20 81       	ld	r18, Z
    2cae:	32 2f       	mov	r19, r18
    2cb0:	38 5c       	subi	r19, 0xC8	; 200
    2cb2:	35 31       	cpi	r19, 0x15	; 21
    2cb4:	90 f4       	brcc	.+36     	; 0x2cda <switchDisplay+0x54>
        // yes pwm
        if (switchStuff[switchNumber] % 2 == 0) {
    2cb6:	20 fd       	sbrc	r18, 0
    2cb8:	0d c0       	rjmp	.+26     	; 0x2cd4 <switchDisplay+0x4e>
            if (switchStuff[switchNumber] == 202) {
    2cba:	2a 3c       	cpi	r18, 0xCA	; 202
    2cbc:	19 f4       	brne	.+6      	; 0x2cc4 <switchDisplay+0x3e>
                strcat(statusMsg, "CoC");
    2cbe:	67 e4       	ldi	r22, 0x47	; 71
    2cc0:	72 e0       	ldi	r23, 0x02	; 2
    2cc2:	37 c0       	rjmp	.+110    	; 0x2d32 <switchDisplay+0xac>
            } else if (switchStuff[switchNumber] == 212) {
    2cc4:	24 3d       	cpi	r18, 0xD4	; 212
    2cc6:	19 f4       	brne	.+6      	; 0x2cce <switchDisplay+0x48>
                strcat(statusMsg, "Brt");
    2cc8:	6b e4       	ldi	r22, 0x4B	; 75
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	32 c0       	rjmp	.+100    	; 0x2d32 <switchDisplay+0xac>
            } else {
                strcat(statusMsg, "Fix");
    2cce:	6f e4       	ldi	r22, 0x4F	; 79
    2cd0:	72 e0       	ldi	r23, 0x02	; 2
    2cd2:	2f c0       	rjmp	.+94     	; 0x2d32 <switchDisplay+0xac>
            }
        } else {
            strcat(statusMsg, "Hue");
    2cd4:	63 e5       	ldi	r22, 0x53	; 83
    2cd6:	72 e0       	ldi	r23, 0x02	; 2
    2cd8:	2c c0       	rjmp	.+88     	; 0x2d32 <switchDisplay+0xac>
        }
    } else {
        getPort(switchNumber, port, pin, direction);
    2cda:	9e 01       	movw	r18, r28
    2cdc:	2f 5d       	subi	r18, 0xDF	; 223
    2cde:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce0:	ae 01       	movw	r20, r28
    2ce2:	4e 5d       	subi	r20, 0xDE	; 222
    2ce4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce6:	be 01       	movw	r22, r28
    2ce8:	6d 5d       	subi	r22, 0xDD	; 221
    2cea:	7f 4f       	sbci	r23, 0xFF	; 255
    2cec:	0e 94 65 00 	call	0xca	; 0xca <getPort>
        tempIntString[0] = port[0];
    2cf0:	8b a1       	ldd	r24, Y+35	; 0x23
    2cf2:	80 93 09 01 	sts	0x0109, r24
        tempIntString[1] = 0;
    2cf6:	10 92 0a 01 	sts	0x010A, r1
        strcat(statusMsg, tempIntString);
    2cfa:	69 e0       	ldi	r22, 0x09	; 9
    2cfc:	71 e0       	ldi	r23, 0x01	; 1
    2cfe:	ce 01       	movw	r24, r28
    2d00:	01 96       	adiw	r24, 0x01	; 1
    2d02:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        realPin = pin[0];
        itoa(realPin, tempIntString, 10);
    2d06:	4a e0       	ldi	r20, 0x0A	; 10
    2d08:	50 e0       	ldi	r21, 0x00	; 0
    2d0a:	69 e0       	ldi	r22, 0x09	; 9
    2d0c:	71 e0       	ldi	r23, 0x01	; 1
    2d0e:	8a a1       	ldd	r24, Y+34	; 0x22
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
        strcat(statusMsg, tempIntString);
    2d16:	69 e0       	ldi	r22, 0x09	; 9
    2d18:	71 e0       	ldi	r23, 0x01	; 1
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	01 96       	adiw	r24, 0x01	; 1
    2d1e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        if (direction[0] == 0) {
    2d22:	89 a1       	ldd	r24, Y+33	; 0x21
    2d24:	81 11       	cpse	r24, r1
    2d26:	03 c0       	rjmp	.+6      	; 0x2d2e <switchDisplay+0xa8>
            strcat(statusMsg, "L");
    2d28:	67 e5       	ldi	r22, 0x57	; 87
    2d2a:	72 e0       	ldi	r23, 0x02	; 2
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <switchDisplay+0xac>
        } else {
            strcat(statusMsg, "H");
    2d2e:	69 e5       	ldi	r22, 0x59	; 89
    2d30:	72 e0       	ldi	r23, 0x02	; 2
    2d32:	ce 01       	movw	r24, r28
    2d34:	01 96       	adiw	r24, 0x01	; 1
    2d36:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        }
    }
    sendMessage(statusMsg);
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	01 96       	adiw	r24, 0x01	; 1
    2d3e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>

}
    2d42:	a3 96       	adiw	r28, 0x23	; 35
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	de bf       	out	0x3e, r29	; 62
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	08 95       	ret

00002d54 <ok>:
    strcat(statusMsg, tempIntString);
    sendMessage(statusMsg);
}

void ok(void) {
    sendMessage("ok");
    2d54:	8b e5       	ldi	r24, 0x5B	; 91
    2d56:	92 e0       	ldi	r25, 0x02	; 2
    2d58:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>

00002d5c <clearInput>:
// CI nn = input number

void clearInput(char * commandReceived) {
    int inputNumber = 0;
    volatile unsigned char *thisPort = 0;
    tempIntString[0] = commandReceived[3];
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	23 81       	ldd	r18, Z+3	; 0x03
    2d60:	20 93 09 01 	sts	0x0109, r18
    tempIntString[1] = commandReceived[4];
    2d64:	84 81       	ldd	r24, Z+4	; 0x04
    2d66:	80 93 0a 01 	sts	0x010A, r24
    inputNumber = atoi(tempIntString);
    2d6a:	89 e0       	ldi	r24, 0x09	; 9
    2d6c:	91 e0       	ldi	r25, 0x01	; 1
    2d6e:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    int temp = inputs[inputNumber][0];
    2d72:	e3 e0       	ldi	r30, 0x03	; 3
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	ea 95       	dec	r30
    2d7a:	e1 f7       	brne	.-8      	; 0x2d74 <clearInput+0x18>
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	e0 5a       	subi	r30, 0xA0	; 160
    2d80:	fc 4f       	sbci	r31, 0xFC	; 252
    2d82:	20 81       	ld	r18, Z
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    if (temp > 15 && temp < 32) {
    2d86:	a9 01       	movw	r20, r18
    2d88:	40 51       	subi	r20, 0x10	; 16
    2d8a:	51 09       	sbc	r21, r1
    2d8c:	40 31       	cpi	r20, 0x10	; 16
    2d8e:	51 05       	cpc	r21, r1
    2d90:	20 f4       	brcc	.+8      	; 0x2d9a <clearInput+0x3e>
        thisPort = &PINB;
        temp -= 16;
    2d92:	9a 01       	movw	r18, r20
    tempIntString[0] = commandReceived[3];
    tempIntString[1] = commandReceived[4];
    inputNumber = atoi(tempIntString);
    int temp = inputs[inputNumber][0];
    if (temp > 15 && temp < 32) {
        thisPort = &PINB;
    2d94:	e3 e2       	ldi	r30, 0x23	; 35
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	0f c0       	rjmp	.+30     	; 0x2db8 <clearInput+0x5c>
    } else if (temp < 16) {
        thisPort = &PINA;
        temp -= 0;
#endif
#ifdef PINC
    } else if (temp < 48) {
    2d9a:	20 33       	cpi	r18, 0x30	; 48
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	2c f4       	brge	.+10     	; 0x2daa <clearInput+0x4e>
        thisPort = &PINC;
        temp -= 32;
    2da0:	20 52       	subi	r18, 0x20	; 32
    2da2:	31 09       	sbc	r19, r1
        thisPort = &PINA;
        temp -= 0;
#endif
#ifdef PINC
    } else if (temp < 48) {
        thisPort = &PINC;
    2da4:	e6 e2       	ldi	r30, 0x26	; 38
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	07 c0       	rjmp	.+14     	; 0x2db8 <clearInput+0x5c>
        temp -= 32;
#endif
#ifdef PIND
    } else if (temp < 64) {
    2daa:	20 34       	cpi	r18, 0x40	; 64
    2dac:	31 05       	cpc	r19, r1
    2dae:	9c f4       	brge	.+38     	; 0x2dd6 <clearInput+0x7a>
        thisPort = &PIND;
        temp -= 48;
    2db0:	20 53       	subi	r18, 0x30	; 48
    2db2:	31 09       	sbc	r19, r1
        thisPort = &PINC;
        temp -= 32;
#endif
#ifdef PIND
    } else if (temp < 64) {
        thisPort = &PIND;
    2db4:	e9 e2       	ldi	r30, 0x29	; 41
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    } else {
        ok();
        return;
    }
    // zero out the port
    *thisPort &= ~(1 << temp);
    2db8:	30 81       	ld	r19, Z
    2dba:	41 e0       	ldi	r20, 0x01	; 1
    2dbc:	50 e0       	ldi	r21, 0x00	; 0
    2dbe:	01 c0       	rjmp	.+2      	; 0x2dc2 <clearInput+0x66>
    2dc0:	44 0f       	add	r20, r20
    2dc2:	2a 95       	dec	r18
    2dc4:	ea f7       	brpl	.-6      	; 0x2dc0 <clearInput+0x64>
    2dc6:	40 95       	com	r20
    2dc8:	43 23       	and	r20, r19
    2dca:	40 83       	st	Z, r20
    inputs[inputNumber][0] = 255;
    2dcc:	fc 01       	movw	r30, r24
    2dce:	e0 5a       	subi	r30, 0xA0	; 160
    2dd0:	fc 4f       	sbci	r31, 0xFC	; 252
    2dd2:	2f ef       	ldi	r18, 0xFF	; 255
    2dd4:	20 83       	st	Z, r18
    ok();
    2dd6:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00002dda <setDaylightSavings>:

// Sets up the days we do daylight savings
// DS:MMDD MMDD
// 012345678901

void setDaylightSavings(char * commandReceived) {
    2dda:	ef 92       	push	r14
    2ddc:	ff 92       	push	r15
    2dde:	0f 93       	push	r16
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	ec 01       	movw	r28, r24
    int dlInt;
    tempIntString[0] = commandReceived[3];
    2de8:	f9 e0       	ldi	r31, 0x09	; 9
    2dea:	ef 2e       	mov	r14, r31
    2dec:	f1 e0       	ldi	r31, 0x01	; 1
    2dee:	ff 2e       	mov	r15, r31
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	f7 01       	movw	r30, r14
    2df4:	80 83       	st	Z, r24
    tempIntString[1] = commandReceived[4];
    2df6:	0a e0       	ldi	r16, 0x0A	; 10
    2df8:	11 e0       	ldi	r17, 0x01	; 1
    2dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfc:	f8 01       	movw	r30, r16
    2dfe:	80 83       	st	Z, r24
    dlInt = atoi(tempIntString);
    2e00:	c7 01       	movw	r24, r14
    2e02:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    daylightSavings[0][0] = dlInt;
    2e06:	90 93 5d 04 	sts	0x045D, r25
    2e0a:	80 93 5c 04 	sts	0x045C, r24
    tempIntString[0] = commandReceived[5];
    2e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e10:	f7 01       	movw	r30, r14
    2e12:	80 83       	st	Z, r24
    tempIntString[1] = commandReceived[6];
    2e14:	8e 81       	ldd	r24, Y+6	; 0x06
    2e16:	f8 01       	movw	r30, r16
    2e18:	80 83       	st	Z, r24
    dlInt = atoi(tempIntString);
    2e1a:	c7 01       	movw	r24, r14
    2e1c:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    daylightSavings[0][1] = dlInt;
    2e20:	90 93 5f 04 	sts	0x045F, r25
    2e24:	80 93 5e 04 	sts	0x045E, r24
    tempIntString[0] = commandReceived[8];
    2e28:	88 85       	ldd	r24, Y+8	; 0x08
    2e2a:	f7 01       	movw	r30, r14
    2e2c:	80 83       	st	Z, r24
    tempIntString[1] = commandReceived[9];
    2e2e:	89 85       	ldd	r24, Y+9	; 0x09
    2e30:	f8 01       	movw	r30, r16
    2e32:	80 83       	st	Z, r24
    dlInt = atoi(tempIntString);
    2e34:	c7 01       	movw	r24, r14
    2e36:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    daylightSavings[1][0] = dlInt;
    2e3a:	90 93 61 04 	sts	0x0461, r25
    2e3e:	80 93 60 04 	sts	0x0460, r24
    tempIntString[0] = commandReceived[10];
    2e42:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e44:	f7 01       	movw	r30, r14
    2e46:	80 83       	st	Z, r24
    tempIntString[1] = commandReceived[11];
    2e48:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4a:	f8 01       	movw	r30, r16
    2e4c:	80 83       	st	Z, r24
    dlInt = atoi(tempIntString);
    2e4e:	c7 01       	movw	r24, r14
    2e50:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    daylightSavings[1][1] = dlInt;
    2e54:	90 93 63 04 	sts	0x0463, r25
    2e58:	80 93 62 04 	sts	0x0462, r24
    ok();
}
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	1f 91       	pop	r17
    2e62:	0f 91       	pop	r16
    2e64:	ff 90       	pop	r15
    2e66:	ef 90       	pop	r14
    daylightSavings[1][0] = dlInt;
    tempIntString[0] = commandReceived[10];
    tempIntString[1] = commandReceived[11];
    dlInt = atoi(tempIntString);
    daylightSavings[1][1] = dlInt;
    ok();
    2e68:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00002e6c <clearToEEPROM>:
        }
    }
    ok();
}

void clearToEEPROM(void) {
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    int x = 0;
    clearEEPROM(SERIAL_NUM);
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(DAYLIGHT_SAVE);
    2e78:	86 e0       	ldi	r24, 0x06	; 6
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(RADIO_ADDR_TX);
    2e80:	8e e0       	ldi	r24, 0x0E	; 14
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(RADIO_ADDR_R0);
    2e88:	85 e1       	ldi	r24, 0x15	; 21
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(RADIO_ADDR_R1);
    2e90:	8c e1       	ldi	r24, 0x1C	; 28
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(RADIO_ADDR_R2);
    2e98:	83 e2       	ldi	r24, 0x23	; 35
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(RADIO_ADDR_R3);
    2ea0:	86 e2       	ldi	r24, 0x26	; 38
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(RADIO_ADDR_R4);
    2ea8:	89 e2       	ldi	r24, 0x29	; 41
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(RADIO_ADDR_R5);
    2eb0:	8c e2       	ldi	r24, 0x2C	; 44
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(SWITCH_STUFF);
    2eb8:	80 e3       	ldi	r24, 0x30	; 48
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(PWM_DIR);
    2ec0:	8d e1       	ldi	r24, 0x1D	; 29
    2ec2:	91 e0       	ldi	r25, 0x01	; 1
    2ec4:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(BRIGHTNESS);
    2ec8:	80 e2       	ldi	r24, 0x20	; 32
    2eca:	91 e0       	ldi	r25, 0x01	; 1
    2ecc:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    for (x = 0; x < NUM_INPUTS; x++)
        clearEEPROM((INPUT + (x * INPUT_BYTES)));
    2ed0:	82 e4       	ldi	r24, 0x42	; 66
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2ed8:	8c e4       	ldi	r24, 0x4C	; 76
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2ee0:	86 e5       	ldi	r24, 0x56	; 86
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2ee8:	80 e6       	ldi	r24, 0x60	; 96
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    for (x = 0; x < NUM_LIMITS; x++)
        clearEEPROM((LIMIT + (x * LIMIT_BYTES)));
    2ef0:	8a e6       	ldi	r24, 0x6A	; 106
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2ef8:	8f e6       	ldi	r24, 0x6F	; 111
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2f00:	84 e7       	ldi	r24, 0x74	; 116
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2f08:	89 e7       	ldi	r24, 0x79	; 121
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    clearEEPROM(PWM_VALUE);
    2f10:	8e e7       	ldi	r24, 0x7E	; 126
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    for (x = 0; x < NUM_COLOR_CHANGES; x++)
        clearEEPROM((COLOR_CHANGE + (x * COLOR_CHANGE_BYTES)));
    2f18:	83 e8       	ldi	r24, 0x83	; 131
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2f20:	88 e8       	ldi	r24, 0x88	; 136
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2f28:	8d e8       	ldi	r24, 0x8D	; 141
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2f30:	82 e9       	ldi	r24, 0x92	; 146
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2f38:	87 e9       	ldi	r24, 0x97	; 151
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2f40:	8c e9       	ldi	r24, 0x9C	; 156
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2f48:	c1 ea       	ldi	r28, 0xA1	; 161
    2f4a:	d0 e0       	ldi	r29, 0x00	; 0
    for (x = 0; x < MAX_PROGRAM; x++)
        clearEEPROM((WEEKLY_PROGRAM + (x * WEEKLY_PROGRAM_BYTES)));
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    2f52:	2c 96       	adiw	r28, 0x0c	; 12
    for (x = 0; x < NUM_LIMITS; x++)
        clearEEPROM((LIMIT + (x * LIMIT_BYTES)));
    clearEEPROM(PWM_VALUE);
    for (x = 0; x < NUM_COLOR_CHANGES; x++)
        clearEEPROM((COLOR_CHANGE + (x * COLOR_CHANGE_BYTES)));
    for (x = 0; x < MAX_PROGRAM; x++)
    2f54:	c9 31       	cpi	r28, 0x19	; 25
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	d8 07       	cpc	r29, r24
    2f5a:	c1 f7       	brne	.-16     	; 0x2f4c <clearToEEPROM+0xe0>
        clearEEPROM((WEEKLY_PROGRAM + (x * WEEKLY_PROGRAM_BYTES)));
    clearEEPROM(TWEAK_TIMER);
    2f5c:	89 e1       	ldi	r24, 0x19	; 25
    2f5e:	91 e0       	ldi	r25, 0x01	; 1
    2f60:	0e 94 be 03 	call	0x77c	; 0x77c <clearEEPROM>
    ok();
}
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    for (x = 0; x < NUM_COLOR_CHANGES; x++)
        clearEEPROM((COLOR_CHANGE + (x * COLOR_CHANGE_BYTES)));
    for (x = 0; x < MAX_PROGRAM; x++)
        clearEEPROM((WEEKLY_PROGRAM + (x * WEEKLY_PROGRAM_BYTES)));
    clearEEPROM(TWEAK_TIMER);
    ok();
    2f68:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00002f6c <saveToEEPROM>:
void clearEEPROM(int memLocation) {
    uint16_t marker = 0x0000; // blank it out
    eeprom_update_word((uint16_t*) memLocation, marker);
}

void saveToEEPROM(void) {
    2f6c:	bf 92       	push	r11
    2f6e:	cf 92       	push	r12
    2f70:	df 92       	push	r13
    2f72:	ef 92       	push	r14
    2f74:	ff 92       	push	r15
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	2e 97       	sbiw	r28, 0x0e	; 14
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    char tempStuff[14];
    int x = 0;
    // Go through the addresses and assign them if set
    if (tx_addr > 0) {
    2f8e:	b0 90 24 04 	lds	r11, 0x0424
    2f92:	c0 90 25 04 	lds	r12, 0x0425
    2f96:	d0 90 26 04 	lds	r13, 0x0426
    2f9a:	e0 90 27 04 	lds	r14, 0x0427
    2f9e:	f0 90 28 04 	lds	r15, 0x0428
    2fa2:	b0 91 29 04 	lds	r27, 0x0429
    2fa6:	f0 91 2a 04 	lds	r31, 0x042A
    2faa:	e0 91 2b 04 	lds	r30, 0x042B
    2fae:	2b 2d       	mov	r18, r11
    2fb0:	3c 2d       	mov	r19, r12
    2fb2:	4d 2d       	mov	r20, r13
    2fb4:	5e 2d       	mov	r21, r14
    2fb6:	6f 2d       	mov	r22, r15
    2fb8:	7b 2f       	mov	r23, r27
    2fba:	8f 2f       	mov	r24, r31
    2fbc:	9e 2f       	mov	r25, r30
    2fbe:	a0 e0       	ldi	r26, 0x00	; 0
    2fc0:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <__cmpdi2_s8>
    2fc4:	61 f0       	breq	.+24     	; 0x2fde <saveToEEPROM+0x72>
        unformatAddress(tx_addr, tempStuff);
    2fc6:	8e 01       	movw	r16, r28
    2fc8:	0f 5f       	subi	r16, 0xFF	; 255
    2fca:	1f 4f       	sbci	r17, 0xFF	; 255
    2fcc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
        writeEEPROM(tempStuff, RADIO_ADDR_TX, RADIO_ADDR_TX_BYTES);
    2fd0:	47 e0       	ldi	r20, 0x07	; 7
    2fd2:	50 e0       	ldi	r21, 0x00	; 0
    2fd4:	6e e0       	ldi	r22, 0x0E	; 14
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	c8 01       	movw	r24, r16
    2fda:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    }
    if (rx_addr_p0 > 0) {
    2fde:	b0 90 2c 04 	lds	r11, 0x042C
    2fe2:	c0 90 2d 04 	lds	r12, 0x042D
    2fe6:	d0 90 2e 04 	lds	r13, 0x042E
    2fea:	e0 90 2f 04 	lds	r14, 0x042F
    2fee:	f0 90 30 04 	lds	r15, 0x0430
    2ff2:	b0 91 31 04 	lds	r27, 0x0431
    2ff6:	f0 91 32 04 	lds	r31, 0x0432
    2ffa:	e0 91 33 04 	lds	r30, 0x0433
    2ffe:	2b 2d       	mov	r18, r11
    3000:	3c 2d       	mov	r19, r12
    3002:	4d 2d       	mov	r20, r13
    3004:	5e 2d       	mov	r21, r14
    3006:	6f 2d       	mov	r22, r15
    3008:	7b 2f       	mov	r23, r27
    300a:	8f 2f       	mov	r24, r31
    300c:	9e 2f       	mov	r25, r30
    300e:	a0 e0       	ldi	r26, 0x00	; 0
    3010:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <__cmpdi2_s8>
    3014:	61 f0       	breq	.+24     	; 0x302e <saveToEEPROM+0xc2>
        unformatAddress(rx_addr_p0, tempStuff);
    3016:	8e 01       	movw	r16, r28
    3018:	0f 5f       	subi	r16, 0xFF	; 255
    301a:	1f 4f       	sbci	r17, 0xFF	; 255
    301c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
        writeEEPROM(tempStuff, RADIO_ADDR_R0, RADIO_ADDR_R0_BYTES);
    3020:	47 e0       	ldi	r20, 0x07	; 7
    3022:	50 e0       	ldi	r21, 0x00	; 0
    3024:	65 e1       	ldi	r22, 0x15	; 21
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	c8 01       	movw	r24, r16
    302a:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    }
    if (rx_addr_p1 > 0) {
    302e:	b0 90 34 04 	lds	r11, 0x0434
    3032:	c0 90 35 04 	lds	r12, 0x0435
    3036:	d0 90 36 04 	lds	r13, 0x0436
    303a:	e0 90 37 04 	lds	r14, 0x0437
    303e:	f0 90 38 04 	lds	r15, 0x0438
    3042:	b0 91 39 04 	lds	r27, 0x0439
    3046:	f0 91 3a 04 	lds	r31, 0x043A
    304a:	e0 91 3b 04 	lds	r30, 0x043B
    304e:	2b 2d       	mov	r18, r11
    3050:	3c 2d       	mov	r19, r12
    3052:	4d 2d       	mov	r20, r13
    3054:	5e 2d       	mov	r21, r14
    3056:	6f 2d       	mov	r22, r15
    3058:	7b 2f       	mov	r23, r27
    305a:	8f 2f       	mov	r24, r31
    305c:	9e 2f       	mov	r25, r30
    305e:	a0 e0       	ldi	r26, 0x00	; 0
    3060:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <__cmpdi2_s8>
    3064:	61 f0       	breq	.+24     	; 0x307e <saveToEEPROM+0x112>
        unformatAddress(rx_addr_p1, tempStuff);
    3066:	8e 01       	movw	r16, r28
    3068:	0f 5f       	subi	r16, 0xFF	; 255
    306a:	1f 4f       	sbci	r17, 0xFF	; 255
    306c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <unformatAddress>
        writeEEPROM(tempStuff, RADIO_ADDR_R1, RADIO_ADDR_R1_BYTES);
    3070:	47 e0       	ldi	r20, 0x07	; 7
    3072:	50 e0       	ldi	r21, 0x00	; 0
    3074:	6c e1       	ldi	r22, 0x1C	; 28
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	c8 01       	movw	r24, r16
    307a:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    }
    if (rx_addr_p2 > 0) {
    307e:	e0 91 3c 04 	lds	r30, 0x043C
    3082:	30 91 3d 04 	lds	r19, 0x043D
    3086:	40 91 3e 04 	lds	r20, 0x043E
    308a:	50 91 3f 04 	lds	r21, 0x043F
    308e:	60 91 40 04 	lds	r22, 0x0440
    3092:	70 91 41 04 	lds	r23, 0x0441
    3096:	2e 2f       	mov	r18, r30
    3098:	80 91 42 04 	lds	r24, 0x0442
    309c:	90 91 43 04 	lds	r25, 0x0443
    30a0:	a0 e0       	ldi	r26, 0x00	; 0
    30a2:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <__cmpdi2_s8>
    30a6:	49 f0       	breq	.+18     	; 0x30ba <saveToEEPROM+0x14e>
        tempStuff[0] = rx_addr_p2;
    30a8:	e9 83       	std	Y+1, r30	; 0x01
        writeEEPROM(tempStuff, RADIO_ADDR_R2, RADIO_ADDR_R2_BYTES);
    30aa:	43 e0       	ldi	r20, 0x03	; 3
    30ac:	50 e0       	ldi	r21, 0x00	; 0
    30ae:	63 e2       	ldi	r22, 0x23	; 35
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	ce 01       	movw	r24, r28
    30b4:	01 96       	adiw	r24, 0x01	; 1
    30b6:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    }
    if (rx_addr_p3 > 0) {
    30ba:	e0 91 44 04 	lds	r30, 0x0444
    30be:	30 91 45 04 	lds	r19, 0x0445
    30c2:	40 91 46 04 	lds	r20, 0x0446
    30c6:	50 91 47 04 	lds	r21, 0x0447
    30ca:	60 91 48 04 	lds	r22, 0x0448
    30ce:	70 91 49 04 	lds	r23, 0x0449
    30d2:	2e 2f       	mov	r18, r30
    30d4:	80 91 4a 04 	lds	r24, 0x044A
    30d8:	90 91 4b 04 	lds	r25, 0x044B
    30dc:	a0 e0       	ldi	r26, 0x00	; 0
    30de:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <__cmpdi2_s8>
    30e2:	49 f0       	breq	.+18     	; 0x30f6 <saveToEEPROM+0x18a>
        tempStuff[0] = rx_addr_p3;
    30e4:	e9 83       	std	Y+1, r30	; 0x01
        writeEEPROM(tempStuff, RADIO_ADDR_R3, RADIO_ADDR_R3_BYTES);
    30e6:	43 e0       	ldi	r20, 0x03	; 3
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	66 e2       	ldi	r22, 0x26	; 38
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	ce 01       	movw	r24, r28
    30f0:	01 96       	adiw	r24, 0x01	; 1
    30f2:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    }
    if (rx_addr_p4 > 0) {
    30f6:	e0 91 4c 04 	lds	r30, 0x044C
    30fa:	30 91 4d 04 	lds	r19, 0x044D
    30fe:	40 91 4e 04 	lds	r20, 0x044E
    3102:	50 91 4f 04 	lds	r21, 0x044F
    3106:	60 91 50 04 	lds	r22, 0x0450
    310a:	70 91 51 04 	lds	r23, 0x0451
    310e:	2e 2f       	mov	r18, r30
    3110:	80 91 52 04 	lds	r24, 0x0452
    3114:	90 91 53 04 	lds	r25, 0x0453
    3118:	a0 e0       	ldi	r26, 0x00	; 0
    311a:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <__cmpdi2_s8>
    311e:	49 f0       	breq	.+18     	; 0x3132 <saveToEEPROM+0x1c6>
        tempStuff[0] = rx_addr_p4;
    3120:	e9 83       	std	Y+1, r30	; 0x01
        writeEEPROM(tempStuff, RADIO_ADDR_R4, RADIO_ADDR_R4_BYTES);
    3122:	43 e0       	ldi	r20, 0x03	; 3
    3124:	50 e0       	ldi	r21, 0x00	; 0
    3126:	69 e2       	ldi	r22, 0x29	; 41
    3128:	70 e0       	ldi	r23, 0x00	; 0
    312a:	ce 01       	movw	r24, r28
    312c:	01 96       	adiw	r24, 0x01	; 1
    312e:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    }
    if (rx_addr_p5 > 0) {
    3132:	e0 91 54 04 	lds	r30, 0x0454
    3136:	30 91 55 04 	lds	r19, 0x0455
    313a:	40 91 56 04 	lds	r20, 0x0456
    313e:	50 91 57 04 	lds	r21, 0x0457
    3142:	60 91 58 04 	lds	r22, 0x0458
    3146:	70 91 59 04 	lds	r23, 0x0459
    314a:	2e 2f       	mov	r18, r30
    314c:	80 91 5a 04 	lds	r24, 0x045A
    3150:	90 91 5b 04 	lds	r25, 0x045B
    3154:	a0 e0       	ldi	r26, 0x00	; 0
    3156:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <__cmpdi2_s8>
    315a:	49 f0       	breq	.+18     	; 0x316e <saveToEEPROM+0x202>
        tempStuff[0] = rx_addr_p5;
    315c:	e9 83       	std	Y+1, r30	; 0x01
        writeEEPROM(tempStuff, RADIO_ADDR_R5, RADIO_ADDR_R5_BYTES);
    315e:	43 e0       	ldi	r20, 0x03	; 3
    3160:	50 e0       	ldi	r21, 0x00	; 0
    3162:	6c e2       	ldi	r22, 0x2C	; 44
    3164:	70 e0       	ldi	r23, 0x00	; 0
    3166:	ce 01       	movw	r24, r28
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    }

    if (tweakTimer != 0) {
    316e:	80 91 1f 01 	lds	r24, 0x011F
    3172:	90 91 20 01 	lds	r25, 0x0120
    3176:	a0 91 21 01 	lds	r26, 0x0121
    317a:	b0 91 22 01 	lds	r27, 0x0122
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	a1 05       	cpc	r26, r1
    3182:	b1 05       	cpc	r27, r1
    3184:	51 f0       	breq	.+20     	; 0x319a <saveToEEPROM+0x22e>
        tempStuff[0] = tweakTimer >> 8;
    3186:	99 83       	std	Y+1, r25	; 0x01
        tempStuff[1] = (tweakTimer & 0xff);
    3188:	8a 83       	std	Y+2, r24	; 0x02
        writeEEPROM(tempStuff, TWEAK_TIMER, TWEAK_TIMER_BYTES);
    318a:	44 e0       	ldi	r20, 0x04	; 4
    318c:	50 e0       	ldi	r21, 0x00	; 0
    318e:	69 e1       	ldi	r22, 0x19	; 25
    3190:	71 e0       	ldi	r23, 0x01	; 1
    3192:	ce 01       	movw	r24, r28
    3194:	01 96       	adiw	r24, 0x01	; 1
    3196:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    }



    if (daylightSavings[0][0] > 0) {
    319a:	80 91 5c 04 	lds	r24, 0x045C
    319e:	90 91 5d 04 	lds	r25, 0x045D
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	e1 f0       	breq	.+56     	; 0x31de <saveToEEPROM+0x272>
        tempStuff[0] = (daylightSavings[0][0] >> 8);
    31a6:	99 83       	std	Y+1, r25	; 0x01
        tempStuff[1] = (daylightSavings[0][0] & 0xff);
    31a8:	8a 83       	std	Y+2, r24	; 0x02
        tempStuff[2] = (daylightSavings[0][1] >> 8);
    31aa:	80 91 5e 04 	lds	r24, 0x045E
    31ae:	90 91 5f 04 	lds	r25, 0x045F
    31b2:	9b 83       	std	Y+3, r25	; 0x03
        tempStuff[3] = (daylightSavings[0][1] & 0xff);
    31b4:	8c 83       	std	Y+4, r24	; 0x04
        tempStuff[4] = (daylightSavings[1][0] >> 8);
    31b6:	80 91 60 04 	lds	r24, 0x0460
    31ba:	90 91 61 04 	lds	r25, 0x0461
    31be:	9d 83       	std	Y+5, r25	; 0x05
        tempStuff[5] = (daylightSavings[1][0] & 0xff);
    31c0:	8e 83       	std	Y+6, r24	; 0x06
        tempStuff[6] = (daylightSavings[1][1] >> 8);
    31c2:	80 91 62 04 	lds	r24, 0x0462
    31c6:	90 91 63 04 	lds	r25, 0x0463
    31ca:	9f 83       	std	Y+7, r25	; 0x07
        tempStuff[7] = (daylightSavings[1][1] & 0xff);
    31cc:	88 87       	std	Y+8, r24	; 0x08
        writeEEPROM(tempStuff, DAYLIGHT_SAVE, DAYLIGHT_SAVE_BYTES);
    31ce:	4a e0       	ldi	r20, 0x0A	; 10
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	66 e0       	ldi	r22, 0x06	; 6
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	ce 01       	movw	r24, r28
    31d8:	01 96       	adiw	r24, 0x01	; 1
    31da:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    }
    if (serial > 0) {
    31de:	60 91 86 03 	lds	r22, 0x0386
    31e2:	70 91 87 03 	lds	r23, 0x0387
    31e6:	80 91 88 03 	lds	r24, 0x0388
    31ea:	90 91 89 03 	lds	r25, 0x0389
    31ee:	16 16       	cp	r1, r22
    31f0:	17 06       	cpc	r1, r23
    31f2:	18 06       	cpc	r1, r24
    31f4:	19 06       	cpc	r1, r25
    31f6:	7c f4       	brge	.+30     	; 0x3216 <saveToEEPROM+0x2aa>
        ltoa(serial, tempStuff, 10);
    31f8:	2a e0       	ldi	r18, 0x0A	; 10
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	ae 01       	movw	r20, r28
    31fe:	4f 5f       	subi	r20, 0xFF	; 255
    3200:	5f 4f       	sbci	r21, 0xFF	; 255
    3202:	0e 94 1d 31 	call	0x623a	; 0x623a <ltoa>
        writeEEPROM(tempStuff, SERIAL_NUM, SERIAL_NUM_BYTES);
    3206:	48 e0       	ldi	r20, 0x08	; 8
    3208:	50 e0       	ldi	r21, 0x00	; 0
    320a:	60 e0       	ldi	r22, 0x00	; 0
    320c:	70 e0       	ldi	r23, 0x00	; 0
    320e:	ce 01       	movw	r24, r28
    3210:	01 96       	adiw	r24, 0x01	; 1
    3212:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    3216:	e0 e4       	ldi	r30, 0x40	; 64
    3218:	f3 e0       	ldi	r31, 0x03	; 3
    }
    char setupaSwitch = 0;
    char setupPWM = 0;
    321a:	10 e0       	ldi	r17, 0x00	; 0
    }
    if (serial > 0) {
        ltoa(serial, tempStuff, 10);
        writeEEPROM(tempStuff, SERIAL_NUM, SERIAL_NUM_BYTES);
    }
    char setupaSwitch = 0;
    321c:	80 e0       	ldi	r24, 0x00	; 0
    char setupPWM = 0;

    for (x = 0; x < NUM_SWITCHES; x++) {
        if (switchStuff[x] < 255)
    321e:	91 91       	ld	r25, Z+
    3220:	9f 3f       	cpi	r25, 0xFF	; 255
    3222:	09 f0       	breq	.+2      	; 0x3226 <saveToEEPROM+0x2ba>
            setupaSwitch = 1;
    3224:	81 e0       	ldi	r24, 0x01	; 1
        if (switchStuff[x] >= 200 && switchStuff[x] <= 230)
    3226:	98 5c       	subi	r25, 0xC8	; 200
    3228:	9f 31       	cpi	r25, 0x1F	; 31
    322a:	08 f4       	brcc	.+2      	; 0x322e <saveToEEPROM+0x2c2>
            setupPWM = 1;
    322c:	11 e0       	ldi	r17, 0x01	; 1
        writeEEPROM(tempStuff, SERIAL_NUM, SERIAL_NUM_BYTES);
    }
    char setupaSwitch = 0;
    char setupPWM = 0;

    for (x = 0; x < NUM_SWITCHES; x++) {
    322e:	93 e0       	ldi	r25, 0x03	; 3
    3230:	e0 35       	cpi	r30, 0x50	; 80
    3232:	f9 07       	cpc	r31, r25
    3234:	a1 f7       	brne	.-24     	; 0x321e <saveToEEPROM+0x2b2>
        if (switchStuff[x] < 255)
            setupaSwitch = 1;
        if (switchStuff[x] >= 200 && switchStuff[x] <= 230)
            setupPWM = 1;
    }
    if (setupaSwitch == 1) {
    3236:	81 30       	cpi	r24, 0x01	; 1
    3238:	81 f4       	brne	.+32     	; 0x325a <saveToEEPROM+0x2ee>
        writeEEPROM(switchStuff, SWITCH_STUFF, SWITCH_STUFF_BYTES);
    323a:	42 e1       	ldi	r20, 0x12	; 18
    323c:	50 e0       	ldi	r21, 0x00	; 0
    323e:	60 e3       	ldi	r22, 0x30	; 48
    3240:	70 e0       	ldi	r23, 0x00	; 0
    3242:	80 e4       	ldi	r24, 0x40	; 64
    3244:	93 e0       	ldi	r25, 0x03	; 3
    3246:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
        writeEEPROM(switchBright, BRIGHTNESS, BRIGHTNESS_BYTES);
    324a:	42 e1       	ldi	r20, 0x12	; 18
    324c:	50 e0       	ldi	r21, 0x00	; 0
    324e:	60 e2       	ldi	r22, 0x20	; 32
    3250:	71 e0       	ldi	r23, 0x01	; 1
    3252:	80 e5       	ldi	r24, 0x50	; 80
    3254:	93 e0       	ldi	r25, 0x03	; 3
    3256:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    }
    tempStuff[0] = pwmdir;
    325a:	80 91 b7 03 	lds	r24, 0x03B7
    325e:	89 83       	std	Y+1, r24	; 0x01
    if (setupPWM == 1)
    3260:	11 30       	cpi	r17, 0x01	; 1
    3262:	41 f4       	brne	.+16     	; 0x3274 <saveToEEPROM+0x308>
        writeEEPROM(tempStuff, PWM_DIR, PWM_DIR_BYTES);
    3264:	43 e0       	ldi	r20, 0x03	; 3
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	6d e1       	ldi	r22, 0x1D	; 29
    326a:	71 e0       	ldi	r23, 0x01	; 1
    326c:	ce 01       	movw	r24, r28
    326e:	01 96       	adiw	r24, 0x01	; 1
    3270:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    3274:	00 ec       	ldi	r16, 0xC0	; 192
    3276:	e0 2e       	mov	r14, r16
    3278:	03 e0       	ldi	r16, 0x03	; 3
    327a:	f0 2e       	mov	r15, r16
    327c:	81 ec       	ldi	r24, 0xC1	; 193
    327e:	c8 2e       	mov	r12, r24
    3280:	83 e0       	ldi	r24, 0x03	; 3
    3282:	d8 2e       	mov	r13, r24

    for (x = 0; x < NUM_SWITCHES; x++) {
        if (switchStuff[x] < 255)
            setupaSwitch = 1;
        if (switchStuff[x] >= 200 && switchStuff[x] <= 230)
            setupPWM = 1;
    3284:	01 ea       	ldi	r16, 0xA1	; 161
    3286:	10 e0       	ldi	r17, 0x00	; 0


    // save the programs
    int y = 0;
    for (x = 0; x < MAX_PROGRAM; x++) {
        memoryMarker = (WEEKLY_PROGRAM + (x * WEEKLY_PROGRAM_BYTES));
    3288:	b8 01       	movw	r22, r16
        if (weeklyProgram[x][0] != 255 || weeklyProgram[x][1] != 255) {
    328a:	f7 01       	movw	r30, r14
    328c:	80 81       	ld	r24, Z
    328e:	8f 3f       	cpi	r24, 0xFF	; 255
    3290:	21 f4       	brne	.+8      	; 0x329a <saveToEEPROM+0x32e>
    3292:	f6 01       	movw	r30, r12
    3294:	80 81       	ld	r24, Z
    3296:	8f 3f       	cpi	r24, 0xFF	; 255
    3298:	99 f0       	breq	.+38     	; 0x32c0 <saveToEEPROM+0x354>
    329a:	fe 01       	movw	r30, r28
    329c:	31 96       	adiw	r30, 0x01	; 1

    for (x = 0; x < NUM_SWITCHES; x++) {
        if (switchStuff[x] < 255)
            setupaSwitch = 1;
        if (switchStuff[x] >= 200 && switchStuff[x] <= 230)
            setupPWM = 1;
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
void clearEEPROM(int memLocation) {
    uint16_t marker = 0x0000; // blank it out
    eeprom_update_word((uint16_t*) memLocation, marker);
}

void saveToEEPROM(void) {
    32a2:	d7 01       	movw	r26, r14
    32a4:	a8 0f       	add	r26, r24
    32a6:	b9 1f       	adc	r27, r25
    int y = 0;
    for (x = 0; x < MAX_PROGRAM; x++) {
        memoryMarker = (WEEKLY_PROGRAM + (x * WEEKLY_PROGRAM_BYTES));
        if (weeklyProgram[x][0] != 255 || weeklyProgram[x][1] != 255) {
            for (y = 0; y < 10; y++)
                tempStuff[y] = weeklyProgram[x][y];
    32a8:	2c 91       	ld	r18, X
    32aa:	21 93       	st	Z+, r18
    // save the programs
    int y = 0;
    for (x = 0; x < MAX_PROGRAM; x++) {
        memoryMarker = (WEEKLY_PROGRAM + (x * WEEKLY_PROGRAM_BYTES));
        if (weeklyProgram[x][0] != 255 || weeklyProgram[x][1] != 255) {
            for (y = 0; y < 10; y++)
    32ac:	01 96       	adiw	r24, 0x01	; 1
    32ae:	8a 30       	cpi	r24, 0x0A	; 10
    32b0:	91 05       	cpc	r25, r1
    32b2:	b9 f7       	brne	.-18     	; 0x32a2 <saveToEEPROM+0x336>
                tempStuff[y] = weeklyProgram[x][y];
            writeEEPROM(tempStuff, memoryMarker, WEEKLY_PROGRAM_BYTES);
    32b4:	4c e0       	ldi	r20, 0x0C	; 12
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	ce 01       	movw	r24, r28
    32ba:	01 96       	adiw	r24, 0x01	; 1
    32bc:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    32c0:	fa e0       	ldi	r31, 0x0A	; 10
    32c2:	ef 0e       	add	r14, r31
    32c4:	f1 1c       	adc	r15, r1
    32c6:	8a e0       	ldi	r24, 0x0A	; 10
    32c8:	c8 0e       	add	r12, r24
    32ca:	d1 1c       	adc	r13, r1
    32cc:	04 5f       	subi	r16, 0xF4	; 244
    32ce:	1f 4f       	sbci	r17, 0xFF	; 255



    // save the programs
    int y = 0;
    for (x = 0; x < MAX_PROGRAM; x++) {
    32d0:	09 31       	cpi	r16, 0x19	; 25
    32d2:	91 e0       	ldi	r25, 0x01	; 1
    32d4:	19 07       	cpc	r17, r25
    32d6:	c1 f6       	brne	.-80     	; 0x3288 <saveToEEPROM+0x31c>
    32d8:	10 e6       	ldi	r17, 0x60	; 96
    32da:	e1 2e       	mov	r14, r17
    32dc:	13 e0       	ldi	r17, 0x03	; 3
    32de:	f1 2e       	mov	r15, r17
    32e0:	02 e4       	ldi	r16, 0x42	; 66
    32e2:	10 e0       	ldi	r17, 0x00	; 0
    }

    // save the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
        memoryMarker = (INPUT + (x * INPUT_BYTES));
        if (inputs[x][0] != 255) {
    32e4:	f7 01       	movw	r30, r14
    32e6:	80 81       	ld	r24, Z
    32e8:	8f 3f       	cpi	r24, 0xFF	; 255
    32ea:	a1 f0       	breq	.+40     	; 0x3314 <saveToEEPROM+0x3a8>
    32ec:	fe 01       	movw	r30, r28
    32ee:	31 96       	adiw	r30, 0x01	; 1
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	90 e0       	ldi	r25, 0x00	; 0
void clearEEPROM(int memLocation) {
    uint16_t marker = 0x0000; // blank it out
    eeprom_update_word((uint16_t*) memLocation, marker);
}

void saveToEEPROM(void) {
    32f4:	d7 01       	movw	r26, r14
    32f6:	a8 0f       	add	r26, r24
    32f8:	b9 1f       	adc	r27, r25
    // save the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
        memoryMarker = (INPUT + (x * INPUT_BYTES));
        if (inputs[x][0] != 255) {
            for (y = 0; y < 8; y++) {
                tempStuff[y] = inputs[x][y];
    32fa:	2c 91       	ld	r18, X
    32fc:	21 93       	st	Z+, r18

    // save the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
        memoryMarker = (INPUT + (x * INPUT_BYTES));
        if (inputs[x][0] != 255) {
            for (y = 0; y < 8; y++) {
    32fe:	01 96       	adiw	r24, 0x01	; 1
    3300:	88 30       	cpi	r24, 0x08	; 8
    3302:	91 05       	cpc	r25, r1
    3304:	b9 f7       	brne	.-18     	; 0x32f4 <saveToEEPROM+0x388>
                tempStuff[y] = inputs[x][y];
            }
            writeEEPROM(tempStuff, memoryMarker, INPUT_BYTES);
    3306:	4a e0       	ldi	r20, 0x0A	; 10
    3308:	50 e0       	ldi	r21, 0x00	; 0
    330a:	b8 01       	movw	r22, r16
    330c:	ce 01       	movw	r24, r28
    330e:	01 96       	adiw	r24, 0x01	; 1
    3310:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    3314:	f8 e0       	ldi	r31, 0x08	; 8
    3316:	ef 0e       	add	r14, r31
    3318:	f1 1c       	adc	r15, r1
    331a:	06 5f       	subi	r16, 0xF6	; 246
    331c:	1f 4f       	sbci	r17, 0xFF	; 255
            writeEEPROM(tempStuff, memoryMarker, WEEKLY_PROGRAM_BYTES);
        }
    }

    // save the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
    331e:	0a 36       	cpi	r16, 0x6A	; 106
    3320:	11 05       	cpc	r17, r1
    3322:	01 f7       	brne	.-64     	; 0x32e4 <saveToEEPROM+0x378>
    3324:	04 e6       	ldi	r16, 0x64	; 100
    3326:	14 e0       	ldi	r17, 0x04	; 4
    3328:	ba e6       	ldi	r27, 0x6A	; 106
    332a:	eb 2e       	mov	r14, r27
    332c:	f1 2c       	mov	r15, r1
    }

    // save the time limits
    for (x = 0; x < NUM_LIMITS; x++) {
        memoryMarker = (LIMIT + (x * LIMIT_BYTES));
        if (timeLimits[x][2] > 0) {
    332e:	f8 01       	movw	r30, r16
    3330:	80 85       	ldd	r24, Z+8	; 0x08
    3332:	91 85       	ldd	r25, Z+9	; 0x09
    3334:	a2 85       	ldd	r26, Z+10	; 0x0a
    3336:	b3 85       	ldd	r27, Z+11	; 0x0b
    3338:	00 97       	sbiw	r24, 0x00	; 0
    333a:	a1 05       	cpc	r26, r1
    333c:	b1 05       	cpc	r27, r1
    333e:	61 f0       	breq	.+24     	; 0x3358 <saveToEEPROM+0x3ec>
            for (y = 0; y < 3; y++) {
                tempStuff[y] = timeLimits[x][y];
    3340:	20 81       	ld	r18, Z
    3342:	29 83       	std	Y+1, r18	; 0x01
    3344:	24 81       	ldd	r18, Z+4	; 0x04
    3346:	2a 83       	std	Y+2, r18	; 0x02
    3348:	8b 83       	std	Y+3, r24	; 0x03
            }
            writeEEPROM(tempStuff, memoryMarker, INPUT_BYTES);
    334a:	4a e0       	ldi	r20, 0x0A	; 10
    334c:	50 e0       	ldi	r21, 0x00	; 0
    334e:	b7 01       	movw	r22, r14
    3350:	ce 01       	movw	r24, r28
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    3358:	04 5f       	subi	r16, 0xF4	; 244
    335a:	1f 4f       	sbci	r17, 0xFF	; 255
    335c:	f5 e0       	ldi	r31, 0x05	; 5
    335e:	ef 0e       	add	r14, r31
    3360:	f1 1c       	adc	r15, r1
            writeEEPROM(tempStuff, memoryMarker, INPUT_BYTES);
        }
    }

    // save the time limits
    for (x = 0; x < NUM_LIMITS; x++) {
    3362:	8e e7       	ldi	r24, 0x7E	; 126
    3364:	e8 16       	cp	r14, r24
    3366:	f1 04       	cpc	r15, r1
    3368:	11 f7       	brne	.-60     	; 0x332e <saveToEEPROM+0x3c2>
    }


    // save the pwm value bytes
    memoryMarker = (PWM_VALUE);
    if (pwmValues[0] != 0 || pwmValues[1] != 0 || pwmValues[2] != 0) {
    336a:	80 91 ae 03 	lds	r24, 0x03AE
    336e:	81 11       	cpse	r24, r1
    3370:	04 c0       	rjmp	.+8      	; 0x337a <saveToEEPROM+0x40e>
    3372:	90 91 af 03 	lds	r25, 0x03AF
    3376:	99 23       	and	r25, r25
    3378:	b1 f0       	breq	.+44     	; 0x33a6 <saveToEEPROM+0x43a>
        for (y = 0; y < 3; y++) {
            tempStuff[y] = pwmValues[y];
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	80 91 af 03 	lds	r24, 0x03AF
    3380:	8a 83       	std	Y+2, r24	; 0x02
    3382:	80 91 b0 03 	lds	r24, 0x03B0
    3386:	8b 83       	std	Y+3, r24	; 0x03
        }
        writeEEPROM(tempStuff, memoryMarker, PWM_VALUE_BYTES);
    3388:	45 e0       	ldi	r20, 0x05	; 5
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	6e e7       	ldi	r22, 0x7E	; 126
    338e:	70 e0       	ldi	r23, 0x00	; 0
    3390:	ce 01       	movw	r24, r28
    3392:	01 96       	adiw	r24, 0x01	; 1
    3394:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    3398:	a2 e6       	ldi	r26, 0x62	; 98
    339a:	ea 2e       	mov	r14, r26
    339c:	a3 e0       	ldi	r26, 0x03	; 3
    339e:	fa 2e       	mov	r15, r26
            writeEEPROM(tempStuff, memoryMarker, WEEKLY_PROGRAM_BYTES);
        }
    }

    // save the inputs
    for (x = 0; x < NUM_INPUTS; x++) {
    33a0:	03 e8       	ldi	r16, 0x83	; 131
    33a2:	10 e0       	ldi	r17, 0x00	; 0
    33a4:	05 c0       	rjmp	.+10     	; 0x33b0 <saveToEEPROM+0x444>
    }


    // save the pwm value bytes
    memoryMarker = (PWM_VALUE);
    if (pwmValues[0] != 0 || pwmValues[1] != 0 || pwmValues[2] != 0) {
    33a6:	90 91 b0 03 	lds	r25, 0x03B0
    33aa:	91 11       	cpse	r25, r1
    33ac:	e6 cf       	rjmp	.-52     	; 0x337a <saveToEEPROM+0x40e>
    33ae:	f4 cf       	rjmp	.-24     	; 0x3398 <saveToEEPROM+0x42c>
        writeEEPROM(tempStuff, memoryMarker, PWM_VALUE_BYTES);
    }

    // save the color change
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        memoryMarker = (COLOR_CHANGE + (x * COLOR_CHANGE_BYTES));
    33b0:	b8 01       	movw	r22, r16
        if (colorChanges[0][0] != 0 || colorChanges[0][1] != 1 || colorChanges[0][2] != 0) {
    33b2:	80 91 e0 02 	lds	r24, 0x02E0
    33b6:	81 11       	cpse	r24, r1
    33b8:	04 c0       	rjmp	.+8      	; 0x33c2 <saveToEEPROM+0x456>
    33ba:	80 91 e1 02 	lds	r24, 0x02E1
    33be:	81 30       	cpi	r24, 0x01	; 1
    33c0:	91 f0       	breq	.+36     	; 0x33e6 <saveToEEPROM+0x47a>
void clearEEPROM(int memLocation) {
    uint16_t marker = 0x0000; // blank it out
    eeprom_update_word((uint16_t*) memLocation, marker);
}

void saveToEEPROM(void) {
    33c2:	f7 01       	movw	r30, r14
    33c4:	32 97       	sbiw	r30, 0x02	; 2
    // save the color change
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        memoryMarker = (COLOR_CHANGE + (x * COLOR_CHANGE_BYTES));
        if (colorChanges[0][0] != 0 || colorChanges[0][1] != 1 || colorChanges[0][2] != 0) {
            for (y = 0; y < 3; y++) {
                tempStuff[y] = inputs[x][y];
    33c6:	80 81       	ld	r24, Z
    33c8:	89 83       	std	Y+1, r24	; 0x01
void clearEEPROM(int memLocation) {
    uint16_t marker = 0x0000; // blank it out
    eeprom_update_word((uint16_t*) memLocation, marker);
}

void saveToEEPROM(void) {
    33ca:	f7 01       	movw	r30, r14
    33cc:	31 97       	sbiw	r30, 0x01	; 1
    // save the color change
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        memoryMarker = (COLOR_CHANGE + (x * COLOR_CHANGE_BYTES));
        if (colorChanges[0][0] != 0 || colorChanges[0][1] != 1 || colorChanges[0][2] != 0) {
            for (y = 0; y < 3; y++) {
                tempStuff[y] = inputs[x][y];
    33ce:	80 81       	ld	r24, Z
    33d0:	8a 83       	std	Y+2, r24	; 0x02
    33d2:	f7 01       	movw	r30, r14
    33d4:	80 81       	ld	r24, Z
    33d6:	8b 83       	std	Y+3, r24	; 0x03
            }
            writeEEPROM(tempStuff, memoryMarker, COLOR_CHANGE_BYTES);
    33d8:	45 e0       	ldi	r20, 0x05	; 5
    33da:	50 e0       	ldi	r21, 0x00	; 0
    33dc:	ce 01       	movw	r24, r28
    33de:	01 96       	adiw	r24, 0x01	; 1
    33e0:	0e 94 ae 03 	call	0x75c	; 0x75c <writeEEPROM>
    33e4:	04 c0       	rjmp	.+8      	; 0x33ee <saveToEEPROM+0x482>
    }

    // save the color change
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        memoryMarker = (COLOR_CHANGE + (x * COLOR_CHANGE_BYTES));
        if (colorChanges[0][0] != 0 || colorChanges[0][1] != 1 || colorChanges[0][2] != 0) {
    33e6:	80 91 e2 02 	lds	r24, 0x02E2
    33ea:	81 11       	cpse	r24, r1
    33ec:	ea cf       	rjmp	.-44     	; 0x33c2 <saveToEEPROM+0x456>
    33ee:	f8 e0       	ldi	r31, 0x08	; 8
    33f0:	ef 0e       	add	r14, r31
    33f2:	f1 1c       	adc	r15, r1
    33f4:	0b 5f       	subi	r16, 0xFB	; 251
    33f6:	1f 4f       	sbci	r17, 0xFF	; 255
        }
        writeEEPROM(tempStuff, memoryMarker, PWM_VALUE_BYTES);
    }

    // save the color change
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
    33f8:	01 3a       	cpi	r16, 0xA1	; 161
    33fa:	11 05       	cpc	r17, r1
    33fc:	c9 f6       	brne	.-78     	; 0x33b0 <saveToEEPROM+0x444>
                tempStuff[y] = inputs[x][y];
            }
            writeEEPROM(tempStuff, memoryMarker, COLOR_CHANGE_BYTES);
        }
    }
    ok();
    33fe:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <ok>
}
    3402:	2e 96       	adiw	r28, 0x0e	; 14
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	ff 90       	pop	r15
    3418:	ef 90       	pop	r14
    341a:	df 90       	pop	r13
    341c:	cf 90       	pop	r12
    341e:	bf 90       	pop	r11
    3420:	08 95       	ret

00003422 <pwmValueSet>:

// set up the values for a solid pwm
// PV:P#,vvv,vvv,vvv
// 01234567890123456

void pwmValueSet(char * commandReceived) {
    3422:	cf 92       	push	r12
    3424:	df 92       	push	r13
    3426:	ef 92       	push	r14
    3428:	ff 92       	push	r15
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	ec 01       	movw	r28, r24
    tempLongString[3] = 0;
    3434:	10 92 19 01 	sts	0x0119, r1
    tempLongString[0] = commandReceived[6];
    3438:	96 e1       	ldi	r25, 0x16	; 22
    343a:	c9 2e       	mov	r12, r25
    343c:	91 e0       	ldi	r25, 0x01	; 1
    343e:	d9 2e       	mov	r13, r25
    3440:	8e 81       	ldd	r24, Y+6	; 0x06
    3442:	f6 01       	movw	r30, r12
    3444:	80 83       	st	Z, r24
    tempLongString[1] = commandReceived[7];
    3446:	27 e1       	ldi	r18, 0x17	; 23
    3448:	e2 2e       	mov	r14, r18
    344a:	21 e0       	ldi	r18, 0x01	; 1
    344c:	f2 2e       	mov	r15, r18
    344e:	8f 81       	ldd	r24, Y+7	; 0x07
    3450:	f7 01       	movw	r30, r14
    3452:	80 83       	st	Z, r24
    tempLongString[2] = commandReceived[8];
    3454:	08 e1       	ldi	r16, 0x18	; 24
    3456:	11 e0       	ldi	r17, 0x01	; 1
    3458:	88 85       	ldd	r24, Y+8	; 0x08
    345a:	f8 01       	movw	r30, r16
    345c:	80 83       	st	Z, r24
    pwmValues[0] = atoi(tempLongString);
    345e:	c6 01       	movw	r24, r12
    3460:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3464:	80 93 ae 03 	sts	0x03AE, r24
    tempLongString[0] = commandReceived[10];
    3468:	8a 85       	ldd	r24, Y+10	; 0x0a
    346a:	f6 01       	movw	r30, r12
    346c:	80 83       	st	Z, r24
    tempLongString[1] = commandReceived[11];
    346e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3470:	f7 01       	movw	r30, r14
    3472:	80 83       	st	Z, r24
    tempLongString[2] = commandReceived[12];
    3474:	8c 85       	ldd	r24, Y+12	; 0x0c
    3476:	f8 01       	movw	r30, r16
    3478:	80 83       	st	Z, r24
    pwmValues[1] = atoi(tempLongString);
    347a:	c6 01       	movw	r24, r12
    347c:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3480:	80 93 af 03 	sts	0x03AF, r24
    tempLongString[0] = commandReceived[14];
    3484:	8e 85       	ldd	r24, Y+14	; 0x0e
    3486:	f6 01       	movw	r30, r12
    3488:	80 83       	st	Z, r24
    tempLongString[1] = commandReceived[15];
    348a:	8f 85       	ldd	r24, Y+15	; 0x0f
    348c:	f7 01       	movw	r30, r14
    348e:	80 83       	st	Z, r24
    tempLongString[2] = commandReceived[16];
    3490:	88 89       	ldd	r24, Y+16	; 0x10
    3492:	f8 01       	movw	r30, r16
    3494:	80 83       	st	Z, r24
    pwmValues[2] = atoi(tempLongString);
    3496:	c6 01       	movw	r24, r12
    3498:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    349c:	80 93 b0 03 	sts	0x03B0, r24
    statusMsg[0] = 0;
    34a0:	10 92 8a 03 	sts	0x038A, r1
    ok();
}
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	1f 91       	pop	r17
    34aa:	0f 91       	pop	r16
    34ac:	ff 90       	pop	r15
    34ae:	ef 90       	pop	r14
    34b0:	df 90       	pop	r13
    34b2:	cf 90       	pop	r12
    tempLongString[0] = commandReceived[14];
    tempLongString[1] = commandReceived[15];
    tempLongString[2] = commandReceived[16];
    pwmValues[2] = atoi(tempLongString);
    statusMsg[0] = 0;
    ok();
    34b4:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

000034b8 <setHueSpeed>:

// Changes the hue speed
// HS:xx

void setHueSpeed(char * commandReceived) {
    tempIntString[0] = commandReceived[3];
    34b8:	fc 01       	movw	r30, r24
    34ba:	23 81       	ldd	r18, Z+3	; 0x03
    34bc:	20 93 09 01 	sts	0x0109, r18
    tempIntString[1] = commandReceived[4];
    34c0:	84 81       	ldd	r24, Z+4	; 0x04
    34c2:	80 93 0a 01 	sts	0x010A, r24
    int programNumber = 0;
    programNumber = atoi(tempIntString);
    34c6:	89 e0       	ldi	r24, 0x09	; 9
    34c8:	91 e0       	ldi	r25, 0x01	; 1
    34ca:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    if (programNumber > 0)
    34ce:	18 16       	cp	r1, r24
    34d0:	19 06       	cpc	r1, r25
    34d2:	24 f4       	brge	.+8      	; 0x34dc <setHueSpeed+0x24>
        hueSpeed = programNumber;
    34d4:	90 93 1e 01 	sts	0x011E, r25
    34d8:	80 93 1d 01 	sts	0x011D, r24
    ok();
    34dc:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

000034e0 <cycleHue>:

// This just sets up the times for the PWM hues
// CH:P#TTTTT 
// 0123456789

void cycleHue(char * commandReceived) {
    34e0:	fc 01       	movw	r30, r24
    // right now we just have 1 pwm but I could add more
    tempLongString[0] = commandReceived[5];
    34e2:	85 81       	ldd	r24, Z+5	; 0x05
    34e4:	80 93 16 01 	sts	0x0116, r24
    tempLongString[1] = commandReceived[6];
    34e8:	86 81       	ldd	r24, Z+6	; 0x06
    34ea:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[7];
    34ee:	87 81       	ldd	r24, Z+7	; 0x07
    34f0:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[8];
    34f4:	80 85       	ldd	r24, Z+8	; 0x08
    34f6:	80 93 19 01 	sts	0x0119, r24
    int programNumber = 0;
    programNumber = atoi(tempLongString);
    34fa:	86 e1       	ldi	r24, 0x16	; 22
    34fc:	91 e0       	ldi	r25, 0x01	; 1
    34fe:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    if (programNumber > 0)
    3502:	18 16       	cp	r1, r24
    3504:	19 06       	cpc	r1, r25
    3506:	24 f4       	brge	.+8      	; 0x3510 <cycleHue+0x30>
        colorChangeSpeed = programNumber;
    3508:	90 93 1c 01 	sts	0x011C, r25
    350c:	80 93 1b 01 	sts	0x011B, r24
    ok();
    3510:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00003514 <switchClear>:
// 01234

void switchClear(char * commandReceived) {
    int switchNumber = 0;
    // get switch number
    switchNumber = getSwitchNumber(commandReceived);
    3514:	0e 94 5a 00 	call	0xb4	; 0xb4 <getSwitchNumber>
    clearTheSwitch(switchNumber);
    3518:	0e 94 d5 00 	call	0x1aa	; 0x1aa <clearTheSwitch>
    ok();
    351c:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00003520 <clockTweak>:
}

// take in 3 digits to tweak the clock time
// CT xxxx

void clockTweak(char * commandReceived) {
    3520:	fc 01       	movw	r30, r24
    int x = 0;
    for (x = 0; x < 4; x++) {
        tempLongString[x] = commandReceived[(x + 3)];
    3522:	83 81       	ldd	r24, Z+3	; 0x03
    3524:	80 93 16 01 	sts	0x0116, r24
    3528:	84 81       	ldd	r24, Z+4	; 0x04
    352a:	80 93 17 01 	sts	0x0117, r24
    352e:	85 81       	ldd	r24, Z+5	; 0x05
    3530:	80 93 18 01 	sts	0x0118, r24
    3534:	86 81       	ldd	r24, Z+6	; 0x06
    3536:	80 93 19 01 	sts	0x0119, r24
    }
    int adjustment = atoi(tempLongString);
    353a:	86 e1       	ldi	r24, 0x16	; 22
    353c:	91 e0       	ldi	r25, 0x01	; 1
    353e:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    if (adjustment == 0) {
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	e1 f4       	brne	.+56     	; 0x357e <clockTweak+0x5e>
        itoa(tweakTimer, tempLongString, 10);
    3546:	4a e0       	ldi	r20, 0x0A	; 10
    3548:	50 e0       	ldi	r21, 0x00	; 0
    354a:	66 e1       	ldi	r22, 0x16	; 22
    354c:	71 e0       	ldi	r23, 0x01	; 1
    354e:	80 91 1f 01 	lds	r24, 0x011F
    3552:	90 91 20 01 	lds	r25, 0x0120
    3556:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
        statusMsg[0] = 0;
    355a:	10 92 8a 03 	sts	0x038A, r1
        strcat(statusMsg, "Curr Tweak:");
    355e:	6e e5       	ldi	r22, 0x5E	; 94
    3560:	72 e0       	ldi	r23, 0x02	; 2
    3562:	8a e8       	ldi	r24, 0x8A	; 138
    3564:	93 e0       	ldi	r25, 0x03	; 3
    3566:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, tempLongString);
    356a:	66 e1       	ldi	r22, 0x16	; 22
    356c:	71 e0       	ldi	r23, 0x01	; 1
    356e:	8a e8       	ldi	r24, 0x8A	; 138
    3570:	93 e0       	ldi	r25, 0x03	; 3
    3572:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        sendMessage(statusMsg);
    3576:	8a e8       	ldi	r24, 0x8A	; 138
    3578:	93 e0       	ldi	r25, 0x03	; 3
    357a:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>
        return;
    }
    tweakTimer += adjustment;
    357e:	aa 27       	eor	r26, r26
    3580:	97 fd       	sbrc	r25, 7
    3582:	a0 95       	com	r26
    3584:	ba 2f       	mov	r27, r26
    3586:	40 91 1f 01 	lds	r20, 0x011F
    358a:	50 91 20 01 	lds	r21, 0x0120
    358e:	60 91 21 01 	lds	r22, 0x0121
    3592:	70 91 22 01 	lds	r23, 0x0122
    3596:	48 0f       	add	r20, r24
    3598:	59 1f       	adc	r21, r25
    359a:	6a 1f       	adc	r22, r26
    359c:	7b 1f       	adc	r23, r27
    359e:	40 93 1f 01 	sts	0x011F, r20
    35a2:	50 93 20 01 	sts	0x0120, r21
    35a6:	60 93 21 01 	sts	0x0121, r22
    35aa:	70 93 22 01 	sts	0x0122, r23
    ok();
    35ae:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

000035b2 <brightnessSet>:

// sets the pwm brightness value
// bs 16

void brightnessSet(char * commandReceived) {
    int brightValue = getSwitchNumber(commandReceived);
    35b2:	0e 94 5a 00 	call	0xb4	; 0xb4 <getSwitchNumber>
    35b6:	9c 01       	movw	r18, r24
    35b8:	80 91 15 01 	lds	r24, 0x0115
    if (brightValue == 0) {
    35bc:	21 15       	cp	r18, r1
    35be:	31 05       	cpc	r19, r1
    35c0:	79 f5       	brne	.+94     	; 0x3620 <brightnessSet+0x6e>
        // display the brightness
        itoa(oldBright, tempIntString, 10);
    35c2:	4a e0       	ldi	r20, 0x0A	; 10
    35c4:	50 e0       	ldi	r21, 0x00	; 0
    35c6:	69 e0       	ldi	r22, 0x09	; 9
    35c8:	71 e0       	ldi	r23, 0x01	; 1
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
        statusMsg[0] = 0;
    35d0:	10 92 8a 03 	sts	0x038A, r1
        strcat(statusMsg, "Set @");
    35d4:	6a e6       	ldi	r22, 0x6A	; 106
    35d6:	72 e0       	ldi	r23, 0x02	; 2
    35d8:	8a e8       	ldi	r24, 0x8A	; 138
    35da:	93 e0       	ldi	r25, 0x03	; 3
    35dc:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, tempIntString);
    35e0:	69 e0       	ldi	r22, 0x09	; 9
    35e2:	71 e0       	ldi	r23, 0x01	; 1
    35e4:	8a e8       	ldi	r24, 0x8A	; 138
    35e6:	93 e0       	ldi	r25, 0x03	; 3
    35e8:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, "B@");
    35ec:	60 e7       	ldi	r22, 0x70	; 112
    35ee:	72 e0       	ldi	r23, 0x02	; 2
    35f0:	8a e8       	ldi	r24, 0x8A	; 138
    35f2:	93 e0       	ldi	r25, 0x03	; 3
    35f4:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        itoa(bright, tempIntString, 10);
    35f8:	4a e0       	ldi	r20, 0x0A	; 10
    35fa:	50 e0       	ldi	r21, 0x00	; 0
    35fc:	69 e0       	ldi	r22, 0x09	; 9
    35fe:	71 e0       	ldi	r23, 0x01	; 1
    3600:	80 91 13 01 	lds	r24, 0x0113
    3604:	90 91 14 01 	lds	r25, 0x0114
    3608:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
        strcat(statusMsg, tempIntString);
    360c:	69 e0       	ldi	r22, 0x09	; 9
    360e:	71 e0       	ldi	r23, 0x01	; 1
    3610:	8a e8       	ldi	r24, 0x8A	; 138
    3612:	93 e0       	ldi	r25, 0x03	; 3
    3614:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        sendMessage(statusMsg);
    3618:	8a e8       	ldi	r24, 0x8A	; 138
    361a:	93 e0       	ldi	r25, 0x03	; 3
    361c:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>
    3620:	21 31       	cpi	r18, 0x11	; 17
    3622:	31 05       	cpc	r19, r1
    3624:	14 f0       	brlt	.+4      	; 0x362a <brightnessSet+0x78>
    3626:	20 e1       	ldi	r18, 0x10	; 16
    3628:	30 e0       	ldi	r19, 0x00	; 0
    } else {
        if (brightValue > 16)
            brightValue = 16;
        if (oldBright == bright) {
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	40 91 13 01 	lds	r20, 0x0113
    3630:	50 91 14 01 	lds	r21, 0x0114
    3634:	84 17       	cp	r24, r20
    3636:	95 07       	cpc	r25, r21
    3638:	21 f4       	brne	.+8      	; 0x3642 <brightnessSet+0x90>
            // currently not being overridden
            bright = brightValue;
    363a:	30 93 14 01 	sts	0x0114, r19
    363e:	20 93 13 01 	sts	0x0113, r18
        }
        oldBright = brightValue;
    3642:	20 93 15 01 	sts	0x0115, r18
        switchChanged = 1;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	80 93 81 03 	sts	0x0381, r24
        ok();
    364c:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00003650 <fail>:
    sendMessage("DI:##Ppx?##DuraPO  CI xx");
    sendMessage("HE RH GS");
#endif
}

void fail(int failCode) {
    3650:	cf 93       	push	r28
    3652:	df 93       	push	r29
    3654:	ec 01       	movw	r28, r24
    statusMsg[0] = 0;
    3656:	10 92 8a 03 	sts	0x038A, r1
    strcat(statusMsg, "fail 0x");
    365a:	63 e7       	ldi	r22, 0x73	; 115
    365c:	72 e0       	ldi	r23, 0x02	; 2
    365e:	8a e8       	ldi	r24, 0x8A	; 138
    3660:	93 e0       	ldi	r25, 0x03	; 3
    3662:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnHex(failCode, tempIntString);
    3666:	69 e0       	ldi	r22, 0x09	; 9
    3668:	71 e0       	ldi	r23, 0x01	; 1
    366a:	ce 01       	movw	r24, r28
    366c:	0e 94 93 07 	call	0xf26	; 0xf26 <returnHex>
    strcat(statusMsg, tempIntString);
    3670:	69 e0       	ldi	r22, 0x09	; 9
    3672:	71 e0       	ldi	r23, 0x01	; 1
    3674:	8a e8       	ldi	r24, 0x8A	; 138
    3676:	93 e0       	ldi	r25, 0x03	; 3
    3678:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    sendMessage(statusMsg);
    367c:	8a e8       	ldi	r24, 0x8A	; 138
    367e:	93 e0       	ldi	r25, 0x03	; 3
}
    3680:	df 91       	pop	r29
    3682:	cf 91       	pop	r28
void fail(int failCode) {
    statusMsg[0] = 0;
    strcat(statusMsg, "fail 0x");
    returnHex(failCode, tempIntString);
    strcat(statusMsg, tempIntString);
    sendMessage(statusMsg);
    3684:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>

00003688 <setDigitalInput>:
// DI:##Ppx?##DuraPO
// 012345678901234567890
// #=digital in num, P=Port,p=pin, x=High or Low, ?='P'rog or 'S'witch,
// ## = prog/switch num, Durat.=duration in seconds, POLL=poll time in sec or 0 for 1/10

void setDigitalInput(char * commandReceived) {
    3688:	5f 92       	push	r5
    368a:	6f 92       	push	r6
    368c:	7f 92       	push	r7
    368e:	8f 92       	push	r8
    3690:	9f 92       	push	r9
    3692:	af 92       	push	r10
    3694:	bf 92       	push	r11
    3696:	cf 92       	push	r12
    3698:	df 92       	push	r13
    369a:	ef 92       	push	r14
    369c:	ff 92       	push	r15
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	cf 93       	push	r28
    36a4:	df 93       	push	r29
    36a6:	ec 01       	movw	r28, r24
    volatile unsigned char *realPort = 0;
    char pin = 0;
    inputNumber = pollTime = outputNum = duration = 0;
    int switchNumber = 0;
    int temp = 0;
    tempIntString[0] = commandReceived[3];
    36a8:	8b 81       	ldd	r24, Y+3	; 0x03
    36aa:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[4];
    36ae:	8c 81       	ldd	r24, Y+4	; 0x04
    36b0:	80 93 0a 01 	sts	0x010A, r24
    inputNumber = atoi(tempIntString);
    36b4:	89 e0       	ldi	r24, 0x09	; 9
    36b6:	91 e0       	ldi	r25, 0x01	; 1
    36b8:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    36bc:	7c 01       	movw	r14, r24
    if (inputNumber >= NUM_INPUTS) {
    36be:	84 e0       	ldi	r24, 0x04	; 4
    36c0:	e8 16       	cp	r14, r24
    36c2:	f1 04       	cpc	r15, r1
    36c4:	1c f0       	brlt	.+6      	; 0x36cc <setDigitalInput+0x44>
        fail(0x11);
    36c6:	81 e1       	ldi	r24, 0x11	; 17
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	10 c0       	rjmp	.+32     	; 0x36ec <setDigitalInput+0x64>
        return;
    }
    tempIntString[0] = '0';
    36cc:	80 e3       	ldi	r24, 0x30	; 48
    36ce:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[6];
    36d2:	8e 81       	ldd	r24, Y+6	; 0x06
    36d4:	80 93 0a 01 	sts	0x010A, r24
    pin = atoi(tempIntString);
    36d8:	89 e0       	ldi	r24, 0x09	; 9
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    36e0:	6c 01       	movw	r12, r24
    if (pin > 7) {
    36e2:	e7 e0       	ldi	r30, 0x07	; 7
    36e4:	e8 17       	cp	r30, r24
    36e6:	98 f4       	brcc	.+38     	; 0x370e <setDigitalInput+0x86>
        fail(0x04);
    36e8:	84 e0       	ldi	r24, 0x04	; 4
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    *realPort |= (1 << pin);

    ok();
    // DI:##Ppx?##DuraPO
    // 012345678901234567890
}
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
    36f4:	ff 90       	pop	r15
    36f6:	ef 90       	pop	r14
    36f8:	df 90       	pop	r13
    36fa:	cf 90       	pop	r12
    36fc:	bf 90       	pop	r11
    36fe:	af 90       	pop	r10
    3700:	9f 90       	pop	r9
    3702:	8f 90       	pop	r8
    3704:	7f 90       	pop	r7
    3706:	6f 90       	pop	r6
    3708:	5f 90       	pop	r5
    }
    tempIntString[0] = '0';
    tempIntString[1] = commandReceived[6];
    pin = atoi(tempIntString);
    if (pin > 7) {
        fail(0x04);
    370a:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <fail>
        return;
    }

    tempIntString[0] = commandReceived[9];
    370e:	89 85       	ldd	r24, Y+9	; 0x09
    3710:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[10];
    3714:	8a 85       	ldd	r24, Y+10	; 0x0a
    3716:	80 93 0a 01 	sts	0x010A, r24
    switchNumber = atoi(tempIntString);
    371a:	89 e0       	ldi	r24, 0x09	; 9
    371c:	91 e0       	ldi	r25, 0x01	; 1
    371e:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3722:	8c 01       	movw	r16, r24

    tempIntString[0] = commandReceived[15];
    3724:	8f 85       	ldd	r24, Y+15	; 0x0f
    3726:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[16];
    372a:	88 89       	ldd	r24, Y+16	; 0x10
    372c:	80 93 0a 01 	sts	0x010A, r24
    pollTime = atoi(tempIntString);
    3730:	89 e0       	ldi	r24, 0x09	; 9
    3732:	91 e0       	ldi	r25, 0x01	; 1
    3734:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3738:	4c 01       	movw	r8, r24

    tempLongString[0] = commandReceived[11];
    373a:	8b 85       	ldd	r24, Y+11	; 0x0b
    373c:	80 93 16 01 	sts	0x0116, r24
    tempLongString[1] = commandReceived[12];
    3740:	8c 85       	ldd	r24, Y+12	; 0x0c
    3742:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[13];
    3746:	8d 85       	ldd	r24, Y+13	; 0x0d
    3748:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[14];
    374c:	8e 85       	ldd	r24, Y+14	; 0x0e
    374e:	80 93 19 01 	sts	0x0119, r24
    duration = atoi(tempLongString);
    3752:	86 e1       	ldi	r24, 0x16	; 22
    3754:	91 e0       	ldi	r25, 0x01	; 1
    3756:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    375a:	58 2e       	mov	r5, r24
    // if we are activating a program
    if (commandReceived[8] == 'P' || commandReceived[8] == 'p') {
    375c:	28 85       	ldd	r18, Y+8	; 0x08
    375e:	20 35       	cpi	r18, 0x50	; 80
    3760:	11 f0       	breq	.+4      	; 0x3766 <setDigitalInput+0xde>
    3762:	20 37       	cpi	r18, 0x70	; 112
    3764:	11 f4       	brne	.+4      	; 0x376a <setDigitalInput+0xe2>
        switchNumber += 128;
    3766:	00 58       	subi	r16, 0x80	; 128
    3768:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    temp = pin * 2;
    376a:	b6 01       	movw	r22, r12
    376c:	77 27       	eor	r23, r23
    376e:	9b 01       	movw	r18, r22
    3770:	22 0f       	add	r18, r18
    3772:	33 1f       	adc	r19, r19
    if (commandReceived[5] == 'B' || commandReceived[5] == 'b') {
    3774:	4d 81       	ldd	r20, Y+5	; 0x05
    3776:	42 34       	cpi	r20, 0x42	; 66
    3778:	11 f0       	breq	.+4      	; 0x377e <setDigitalInput+0xf6>
    377a:	42 36       	cpi	r20, 0x62	; 98
    377c:	41 f4       	brne	.+16     	; 0x378e <setDigitalInput+0x106>
        realDDR = &DDRB;
        realPort = &PORTB;
        temp += 16;
    377e:	20 5f       	subi	r18, 0xF0	; 240
    3780:	3f 4f       	sbci	r19, 0xFF	; 255
        switchNumber += 128;
    }
    temp = pin * 2;
    if (commandReceived[5] == 'B' || commandReceived[5] == 'b') {
        realDDR = &DDRB;
        realPort = &PORTB;
    3782:	a5 e2       	ldi	r26, 0x25	; 37
    3784:	6a 2e       	mov	r6, r26
    3786:	71 2c       	mov	r7, r1
    if (commandReceived[8] == 'P' || commandReceived[8] == 'p') {
        switchNumber += 128;
    }
    temp = pin * 2;
    if (commandReceived[5] == 'B' || commandReceived[5] == 'b') {
        realDDR = &DDRB;
    3788:	a4 e2       	ldi	r26, 0x24	; 36
    378a:	b0 e0       	ldi	r27, 0x00	; 0
        realPort = &PORTB;
        temp += 16;
    378c:	1c c0       	rjmp	.+56     	; 0x37c6 <setDigitalInput+0x13e>
        realDDR = &DDRA;
        realPort = &PORTA;
        temp += 0;
#endif        
#ifdef PORTC
    } else if (commandReceived[5] == 'C' || commandReceived[5] == 'c') {
    378e:	43 34       	cpi	r20, 0x43	; 67
    3790:	11 f0       	breq	.+4      	; 0x3796 <setDigitalInput+0x10e>
    3792:	43 36       	cpi	r20, 0x63	; 99
    3794:	41 f4       	brne	.+16     	; 0x37a6 <setDigitalInput+0x11e>
        realDDR = &DDRC;
        realPort = &PORTC;
        temp += 32;
    3796:	20 5e       	subi	r18, 0xE0	; 224
    3798:	3f 4f       	sbci	r19, 0xFF	; 255
        temp += 0;
#endif        
#ifdef PORTC
    } else if (commandReceived[5] == 'C' || commandReceived[5] == 'c') {
        realDDR = &DDRC;
        realPort = &PORTC;
    379a:	f8 e2       	ldi	r31, 0x28	; 40
    379c:	6f 2e       	mov	r6, r31
    379e:	71 2c       	mov	r7, r1
        realPort = &PORTA;
        temp += 0;
#endif        
#ifdef PORTC
    } else if (commandReceived[5] == 'C' || commandReceived[5] == 'c') {
        realDDR = &DDRC;
    37a0:	a7 e2       	ldi	r26, 0x27	; 39
    37a2:	b0 e0       	ldi	r27, 0x00	; 0
        realPort = &PORTC;
        temp += 32;
    37a4:	10 c0       	rjmp	.+32     	; 0x37c6 <setDigitalInput+0x13e>
#endif        
#ifdef PORTD
    } else if (commandReceived[5] == 'D' || commandReceived[5] == 'd') {
    37a6:	44 34       	cpi	r20, 0x44	; 68
    37a8:	11 f0       	breq	.+4      	; 0x37ae <setDigitalInput+0x126>
    37aa:	44 36       	cpi	r20, 0x64	; 100
    37ac:	41 f4       	brne	.+16     	; 0x37be <setDigitalInput+0x136>
        realDDR = &DDRD;
        realPort = &PORTD;
        temp += 48;
    37ae:	20 5d       	subi	r18, 0xD0	; 208
    37b0:	3f 4f       	sbci	r19, 0xFF	; 255
        temp += 32;
#endif        
#ifdef PORTD
    } else if (commandReceived[5] == 'D' || commandReceived[5] == 'd') {
        realDDR = &DDRD;
        realPort = &PORTD;
    37b2:	eb e2       	ldi	r30, 0x2B	; 43
    37b4:	6e 2e       	mov	r6, r30
    37b6:	71 2c       	mov	r7, r1
        realPort = &PORTC;
        temp += 32;
#endif        
#ifdef PORTD
    } else if (commandReceived[5] == 'D' || commandReceived[5] == 'd') {
        realDDR = &DDRD;
    37b8:	aa e2       	ldi	r26, 0x2A	; 42
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	04 c0       	rjmp	.+8      	; 0x37c6 <setDigitalInput+0x13e>

void setDigitalInput(char * commandReceived) {
    int x = 0;
    int inputNumber, pollTime, outputNum, duration;
    volatile unsigned char *realDDR = 0;
    volatile unsigned char *realPort = 0;
    37be:	61 2c       	mov	r6, r1
    37c0:	71 2c       	mov	r7, r1
// ## = prog/switch num, Durat.=duration in seconds, POLL=poll time in sec or 0 for 1/10

void setDigitalInput(char * commandReceived) {
    int x = 0;
    int inputNumber, pollTime, outputNum, duration;
    volatile unsigned char *realDDR = 0;
    37c2:	a0 e0       	ldi	r26, 0x00	; 0
    37c4:	b0 e0       	ldi	r27, 0x00	; 0
    37c6:	40 e4       	ldi	r20, 0x40	; 64
    37c8:	53 e0       	ldi	r21, 0x03	; 3
    // 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG
    // pin is abs(value/2)-the base - PINB3 = (22-16)/2  PINB3 (22-16)%2 = 0 - low (23-16)%2 = 1 - high
    // port is C.  This is analog in so its not normal but need to set the DDR anyway
    // get the pin
    for (x = 0; x < NUM_SWITCHES; x++) {
        if (switchStuff[x] == temp || switchStuff[x] == (temp + 1)) {
    37ca:	59 01       	movw	r10, r18
    37cc:	ff ef       	ldi	r31, 0xFF	; 255
    37ce:	af 1a       	sub	r10, r31
    37d0:	bf 0a       	sbc	r11, r31
    37d2:	fa 01       	movw	r30, r20
    37d4:	c1 90       	ld	r12, Z+
    37d6:	af 01       	movw	r20, r30
    37d8:	d1 2c       	mov	r13, r1
    37da:	c2 16       	cp	r12, r18
    37dc:	d3 06       	cpc	r13, r19
    37de:	19 f0       	breq	.+6      	; 0x37e6 <setDigitalInput+0x15e>
    37e0:	ca 14       	cp	r12, r10
    37e2:	db 04       	cpc	r13, r11
    37e4:	19 f4       	brne	.+6      	; 0x37ec <setDigitalInput+0x164>
            fail(0x12);
    37e6:	82 e1       	ldi	r24, 0x12	; 18
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	80 cf       	rjmp	.-256    	; 0x36ec <setDigitalInput+0x64>
    // value of 0-15 = PORTA, 16-31 = PORTB, 32-47 = PORTC, 
    // 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG
    // pin is abs(value/2)-the base - PINB3 = (22-16)/2  PINB3 (22-16)%2 = 0 - low (23-16)%2 = 1 - high
    // port is C.  This is analog in so its not normal but need to set the DDR anyway
    // get the pin
    for (x = 0; x < NUM_SWITCHES; x++) {
    37ec:	f3 e0       	ldi	r31, 0x03	; 3
    37ee:	40 35       	cpi	r20, 0x50	; 80
    37f0:	5f 07       	cpc	r21, r31
    37f2:	79 f7       	brne	.-34     	; 0x37d2 <setDigitalInput+0x14a>
            fail(0x12);
            return;
        }
    }

    inputs[inputNumber][0] = temp;
    37f4:	a7 01       	movw	r20, r14
    37f6:	33 e0       	ldi	r19, 0x03	; 3
    37f8:	44 0f       	add	r20, r20
    37fa:	55 1f       	adc	r21, r21
    37fc:	3a 95       	dec	r19
    37fe:	e1 f7       	brne	.-8      	; 0x37f8 <setDigitalInput+0x170>
    3800:	70 e6       	ldi	r23, 0x60	; 96
    3802:	e7 2e       	mov	r14, r23
    3804:	73 e0       	ldi	r23, 0x03	; 3
    3806:	f7 2e       	mov	r15, r23
    3808:	e4 0e       	add	r14, r20
    380a:	f5 1e       	adc	r15, r21
    380c:	f7 01       	movw	r30, r14
    380e:	20 83       	st	Z, r18

    if (commandReceived[7] == 'H' || commandReceived[7] == 'h' ||
    3810:	2f 81       	ldd	r18, Y+7	; 0x07
    3812:	28 34       	cpi	r18, 0x48	; 72
    3814:	21 f0       	breq	.+8      	; 0x381e <setDigitalInput+0x196>
    3816:	28 36       	cpi	r18, 0x68	; 104
    3818:	11 f0       	breq	.+4      	; 0x381e <setDigitalInput+0x196>
    381a:	21 33       	cpi	r18, 0x31	; 49
    381c:	39 f4       	brne	.+14     	; 0x382c <setDigitalInput+0x1a4>
            commandReceived[7] == '1') {
        inputs[inputNumber][1] = 0;
    381e:	ea 01       	movw	r28, r20
    3820:	c0 5a       	subi	r28, 0xA0	; 160
    3822:	dc 4f       	sbci	r29, 0xFC	; 252
    3824:	19 82       	std	Y+1, r1	; 0x01
        inputs[inputNumber][2] = 255;
    3826:	2f ef       	ldi	r18, 0xFF	; 255
    3828:	2a 83       	std	Y+2, r18	; 0x02
    382a:	04 c0       	rjmp	.+8      	; 0x3834 <setDigitalInput+0x1ac>
    } else {
        inputs[inputNumber][1] = 255;
    382c:	2f ef       	ldi	r18, 0xFF	; 255
    382e:	f7 01       	movw	r30, r14
    3830:	21 83       	std	Z+1, r18	; 0x01
        inputs[inputNumber][2] = 0;
    3832:	12 82       	std	Z+2, r1	; 0x02
    }
    inputs[inputNumber][3] = switchNumber;
    3834:	ea 01       	movw	r28, r20
    3836:	c0 5a       	subi	r28, 0xA0	; 160
    3838:	dc 4f       	sbci	r29, 0xFC	; 252
    383a:	0b 83       	std	Y+3, r16	; 0x03
    temp = duration >> 8;
    inputs[inputNumber][4] = temp;
    383c:	9c 83       	std	Y+4, r25	; 0x04
    temp = duration & 0xff;
    inputs[inputNumber][5] = temp;
    383e:	5d 82       	std	Y+5, r5	; 0x05

    if (pollTime > 255)
        pollTime = 255;
    inputs[inputNumber][6] = pollTime;
    3840:	94 01       	movw	r18, r8
    3842:	2f 3f       	cpi	r18, 0xFF	; 255
    3844:	31 05       	cpc	r19, r1
    3846:	19 f0       	breq	.+6      	; 0x384e <setDigitalInput+0x1c6>
    3848:	14 f0       	brlt	.+4      	; 0x384e <setDigitalInput+0x1c6>
    384a:	2f ef       	ldi	r18, 0xFF	; 255
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	2e 83       	std	Y+6, r18	; 0x06

    *realDDR &= ~(1 << pin);
    3850:	8c 91       	ld	r24, X
    3852:	21 e0       	ldi	r18, 0x01	; 1
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	01 c0       	rjmp	.+2      	; 0x385a <setDigitalInput+0x1d2>
    3858:	22 0f       	add	r18, r18
    385a:	6a 95       	dec	r22
    385c:	ea f7       	brpl	.-6      	; 0x3858 <setDigitalInput+0x1d0>
    385e:	92 2f       	mov	r25, r18
    3860:	90 95       	com	r25
    3862:	89 23       	and	r24, r25
    3864:	8c 93       	st	X, r24
    *realPort |= (1 << pin);
    3866:	f3 01       	movw	r30, r6
    3868:	80 81       	ld	r24, Z
    386a:	82 2b       	or	r24, r18
    386c:	80 83       	st	Z, r24

    ok();
    // DI:##Ppx?##DuraPO
    // 012345678901234567890
}
    386e:	df 91       	pop	r29
    3870:	cf 91       	pop	r28
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    3876:	ff 90       	pop	r15
    3878:	ef 90       	pop	r14
    387a:	df 90       	pop	r13
    387c:	cf 90       	pop	r12
    387e:	bf 90       	pop	r11
    3880:	af 90       	pop	r10
    3882:	9f 90       	pop	r9
    3884:	8f 90       	pop	r8
    3886:	7f 90       	pop	r7
    3888:	6f 90       	pop	r6
    388a:	5f 90       	pop	r5
    inputs[inputNumber][6] = pollTime;

    *realDDR &= ~(1 << pin);
    *realPort |= (1 << pin);

    ok();
    388c:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00003890 <setAnalogInput>:
// AI:##PpLLLHHH?##DuraPOw
// 0123456789012345678901234
// int Port/pin like switches, low%,high%, switch/program, dur, poll time
// inputs[NUM_INPUTS]

void setAnalogInput(char * commandReceived) {
    3890:	2f 92       	push	r2
    3892:	3f 92       	push	r3
    3894:	4f 92       	push	r4
    3896:	5f 92       	push	r5
    3898:	6f 92       	push	r6
    389a:	7f 92       	push	r7
    389c:	8f 92       	push	r8
    389e:	9f 92       	push	r9
    38a0:	af 92       	push	r10
    38a2:	bf 92       	push	r11
    38a4:	cf 92       	push	r12
    38a6:	df 92       	push	r13
    38a8:	ef 92       	push	r14
    38aa:	ff 92       	push	r15
    38ac:	0f 93       	push	r16
    38ae:	1f 93       	push	r17
    38b0:	cf 93       	push	r28
    38b2:	df 93       	push	r29
    38b4:	00 d0       	rcall	.+0      	; 0x38b6 <setAnalogInput+0x26>
    38b6:	1f 92       	push	r1
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	9b 83       	std	Y+3, r25	; 0x03
    38be:	8a 83       	std	Y+2, r24	; 0x02
    char pin = 0;
    inputNumber = lowPercent = highPercent = pollTime = outputNum = duration = 0;
    int switchNumber = 0;
    long temp = 0;
    char whichRGB = 0;
    tempIntString[0] = commandReceived[3];
    38c0:	dc 01       	movw	r26, r24
    38c2:	13 96       	adiw	r26, 0x03	; 3
    38c4:	8c 91       	ld	r24, X
    38c6:	13 97       	sbiw	r26, 0x03	; 3
    38c8:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[4];
    38cc:	14 96       	adiw	r26, 0x04	; 4
    38ce:	8c 91       	ld	r24, X
    38d0:	80 93 0a 01 	sts	0x010A, r24
    inputNumber = atoi(tempIntString);
    38d4:	89 e0       	ldi	r24, 0x09	; 9
    38d6:	91 e0       	ldi	r25, 0x01	; 1
    38d8:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    38dc:	8c 01       	movw	r16, r24
    if (inputNumber >= NUM_INPUTS) {
    38de:	84 30       	cpi	r24, 0x04	; 4
    38e0:	91 05       	cpc	r25, r1
    38e2:	1c f0       	brlt	.+6      	; 0x38ea <setAnalogInput+0x5a>
        fail(0x11);
    38e4:	81 e1       	ldi	r24, 0x11	; 17
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	13 c0       	rjmp	.+38     	; 0x3910 <setAnalogInput+0x80>
        return;
    }
    tempIntString[0] = '0';
    38ea:	50 e3       	ldi	r21, 0x30	; 48
    38ec:	b5 2e       	mov	r11, r21
    38ee:	b0 92 09 01 	sts	0x0109, r11
    tempIntString[1] = commandReceived[6];
    38f2:	ea 81       	ldd	r30, Y+2	; 0x02
    38f4:	fb 81       	ldd	r31, Y+3	; 0x03
    38f6:	86 81       	ldd	r24, Z+6	; 0x06
    38f8:	80 93 0a 01 	sts	0x010A, r24
    pin = atoi(tempIntString);
    38fc:	89 e0       	ldi	r24, 0x09	; 9
    38fe:	91 e0       	ldi	r25, 0x01	; 1
    3900:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3904:	6c 01       	movw	r12, r24
    if (pin > 7) {
    3906:	f7 e0       	ldi	r31, 0x07	; 7
    3908:	f8 17       	cp	r31, r24
    390a:	c8 f4       	brcc	.+50     	; 0x393e <setAnalogInput+0xae>
        fail(0x04);
    390c:	84 e0       	ldi	r24, 0x04	; 4
    390e:	90 e0       	ldi	r25, 0x00	; 0
    // Set prescaler 1/32. why not... ;-)
    ADCSRA |= (1 << ADPS2) || (1 << ADPS0);


    ok();
}
    3910:	0f 90       	pop	r0
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	1f 91       	pop	r17
    391c:	0f 91       	pop	r16
    391e:	ff 90       	pop	r15
    3920:	ef 90       	pop	r14
    3922:	df 90       	pop	r13
    3924:	cf 90       	pop	r12
    3926:	bf 90       	pop	r11
    3928:	af 90       	pop	r10
    392a:	9f 90       	pop	r9
    392c:	8f 90       	pop	r8
    392e:	7f 90       	pop	r7
    3930:	6f 90       	pop	r6
    3932:	5f 90       	pop	r5
    3934:	4f 90       	pop	r4
    3936:	3f 90       	pop	r3
    3938:	2f 90       	pop	r2
    }
    tempIntString[0] = '0';
    tempIntString[1] = commandReceived[6];
    pin = atoi(tempIntString);
    if (pin > 7) {
        fail(0x04);
    393a:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <fail>
        return;
    }

    tempIntString[0] = commandReceived[14];
    393e:	aa 81       	ldd	r26, Y+2	; 0x02
    3940:	bb 81       	ldd	r27, Y+3	; 0x03
    3942:	1e 96       	adiw	r26, 0x0e	; 14
    3944:	8c 91       	ld	r24, X
    3946:	1e 97       	sbiw	r26, 0x0e	; 14
    3948:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[15];
    394c:	1f 96       	adiw	r26, 0x0f	; 15
    394e:	8c 91       	ld	r24, X
    3950:	80 93 0a 01 	sts	0x010A, r24
    switchNumber = atoi(tempIntString);
    3954:	89 e0       	ldi	r24, 0x09	; 9
    3956:	91 e0       	ldi	r25, 0x01	; 1
    3958:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    395c:	7c 01       	movw	r14, r24

    tempIntString[0] = commandReceived[20];
    395e:	ea 81       	ldd	r30, Y+2	; 0x02
    3960:	fb 81       	ldd	r31, Y+3	; 0x03
    3962:	84 89       	ldd	r24, Z+20	; 0x14
    3964:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[21];
    3968:	85 89       	ldd	r24, Z+21	; 0x15
    396a:	80 93 0a 01 	sts	0x010A, r24
    pollTime = atoi(tempIntString);
    396e:	89 e0       	ldi	r24, 0x09	; 9
    3970:	91 e0       	ldi	r25, 0x01	; 1
    3972:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3976:	78 2e       	mov	r7, r24
    3978:	89 2e       	mov	r8, r25

    tempIntString[0] = '0';
    397a:	b0 92 09 01 	sts	0x0109, r11
    tempIntString[1] = commandReceived[22];
    397e:	aa 81       	ldd	r26, Y+2	; 0x02
    3980:	bb 81       	ldd	r27, Y+3	; 0x03
    3982:	56 96       	adiw	r26, 0x16	; 22
    3984:	8c 91       	ld	r24, X
    3986:	80 93 0a 01 	sts	0x010A, r24
    whichRGB = atoi(tempIntString);
    398a:	89 e0       	ldi	r24, 0x09	; 9
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3992:	98 2e       	mov	r9, r24

    tempLongString[0] = '0';
    3994:	b0 92 16 01 	sts	0x0116, r11
    tempLongString[1] = commandReceived[7];
    3998:	ea 81       	ldd	r30, Y+2	; 0x02
    399a:	fb 81       	ldd	r31, Y+3	; 0x03
    399c:	87 81       	ldd	r24, Z+7	; 0x07
    399e:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[8];
    39a2:	80 85       	ldd	r24, Z+8	; 0x08
    39a4:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[9];
    39a8:	81 85       	ldd	r24, Z+9	; 0x09
    39aa:	80 93 19 01 	sts	0x0119, r24
    lowPercent = atoi(tempLongString);
    39ae:	86 e1       	ldi	r24, 0x16	; 22
    39b0:	91 e0       	ldi	r25, 0x01	; 1
    39b2:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    39b6:	5c 01       	movw	r10, r24
    tempLongString[1] = commandReceived[10];
    39b8:	aa 81       	ldd	r26, Y+2	; 0x02
    39ba:	bb 81       	ldd	r27, Y+3	; 0x03
    39bc:	1a 96       	adiw	r26, 0x0a	; 10
    39be:	8c 91       	ld	r24, X
    39c0:	1a 97       	sbiw	r26, 0x0a	; 10
    39c2:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[11];
    39c6:	1b 96       	adiw	r26, 0x0b	; 11
    39c8:	8c 91       	ld	r24, X
    39ca:	1b 97       	sbiw	r26, 0x0b	; 11
    39cc:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[12];
    39d0:	1c 96       	adiw	r26, 0x0c	; 12
    39d2:	8c 91       	ld	r24, X
    39d4:	80 93 19 01 	sts	0x0119, r24
    highPercent = atoi(tempLongString);
    39d8:	86 e1       	ldi	r24, 0x16	; 22
    39da:	91 e0       	ldi	r25, 0x01	; 1
    39dc:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    39e0:	2c 01       	movw	r4, r24

    tempLongString[0] = commandReceived[16];
    39e2:	ea 81       	ldd	r30, Y+2	; 0x02
    39e4:	fb 81       	ldd	r31, Y+3	; 0x03
    39e6:	80 89       	ldd	r24, Z+16	; 0x10
    39e8:	80 93 16 01 	sts	0x0116, r24
    tempLongString[1] = commandReceived[17];
    39ec:	81 89       	ldd	r24, Z+17	; 0x11
    39ee:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[18];
    39f2:	82 89       	ldd	r24, Z+18	; 0x12
    39f4:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[19];
    39f8:	83 89       	ldd	r24, Z+19	; 0x13
    39fa:	80 93 19 01 	sts	0x0119, r24
    duration = atoi(tempLongString);
    39fe:	86 e1       	ldi	r24, 0x16	; 22
    3a00:	91 e0       	ldi	r25, 0x01	; 1
    3a02:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3a06:	68 2e       	mov	r6, r24
    3a08:	99 83       	std	Y+1, r25	; 0x01
    // pLHsDDP p int pin/port like sw, L%,H% (0,255 - digital), s - 0-127=switch, 128-255 = prog
    // 0123456
    // dur in seconds, poll time in secs or  0 for continuous. 
    // #= analogIn num, p=pin, LLL=low%, HHH=High%,? = 'P'rog or 'S', ## = num
    // Durat. = duration in seconds, POLL = poll time in seconds or 0 for 1/10
    if (commandReceived[5] != 'C' && commandReceived[5] != 'c') {
    3a0a:	aa 81       	ldd	r26, Y+2	; 0x02
    3a0c:	bb 81       	ldd	r27, Y+3	; 0x03
    3a0e:	15 96       	adiw	r26, 0x05	; 5
    3a10:	8c 91       	ld	r24, X
    3a12:	83 34       	cpi	r24, 0x43	; 67
    3a14:	29 f0       	breq	.+10     	; 0x3a20 <setAnalogInput+0x190>
    3a16:	83 36       	cpi	r24, 0x63	; 99
    3a18:	19 f0       	breq	.+6      	; 0x3a20 <setAnalogInput+0x190>
        fail(0x03);
    3a1a:	83 e0       	ldi	r24, 0x03	; 3
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	78 cf       	rjmp	.-272    	; 0x3910 <setAnalogInput+0x80>
    // value of 0-15 = PORTA, 16-31 = PORTB, 32-47 = PORTC, 
    // 48-63 = PORTD, 64-79 = PORTE, 80-95 = PORTF, 96-112 = PORTG
    // pin is abs(value/2)-the base - PINB3 = (22-16)/2  PINB3 (22-16)%2 = 0 - low (23-16)%2 = 1 - high
    // port is C.  This is analog in so its not normal but need to set the DDR anyway
    // get the pin
    temp = pin * 2;
    3a20:	dd 24       	eor	r13, r13
    3a22:	c6 01       	movw	r24, r12
    3a24:	88 0f       	add	r24, r24
    3a26:	99 1f       	adc	r25, r25
    3a28:	aa 27       	eor	r26, r26
    3a2a:	97 fd       	sbrc	r25, 7
    3a2c:	a0 95       	com	r26
    3a2e:	ba 2f       	mov	r27, r26
    // add # for port C
    temp += 32;
    3a30:	80 96       	adiw	r24, 0x20	; 32
    3a32:	a1 1d       	adc	r26, r1
    3a34:	b1 1d       	adc	r27, r1
    3a36:	e0 e4       	ldi	r30, 0x40	; 64
    3a38:	f3 e0       	ldi	r31, 0x03	; 3
    for (x = 0; x < NUM_SWITCHES; x++) {
        if (switchStuff[x] == temp) {
    3a3a:	41 91       	ld	r20, Z+
    3a3c:	50 e0       	ldi	r21, 0x00	; 0
    3a3e:	60 e0       	ldi	r22, 0x00	; 0
    3a40:	70 e0       	ldi	r23, 0x00	; 0
    3a42:	48 17       	cp	r20, r24
    3a44:	59 07       	cpc	r21, r25
    3a46:	6a 07       	cpc	r22, r26
    3a48:	7b 07       	cpc	r23, r27
    3a4a:	19 f4       	brne	.+6      	; 0x3a52 <setAnalogInput+0x1c2>

            fail(0x12);
    3a4c:	82 e1       	ldi	r24, 0x12	; 18
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	5f cf       	rjmp	.-322    	; 0x3910 <setAnalogInput+0x80>
    // port is C.  This is analog in so its not normal but need to set the DDR anyway
    // get the pin
    temp = pin * 2;
    // add # for port C
    temp += 32;
    for (x = 0; x < NUM_SWITCHES; x++) {
    3a52:	23 e0       	ldi	r18, 0x03	; 3
    3a54:	e0 35       	cpi	r30, 0x50	; 80
    3a56:	f2 07       	cpc	r31, r18
    3a58:	81 f7       	brne	.-32     	; 0x3a3a <setAnalogInput+0x1aa>

            fail(0x12);
            return;
        }
    }
    inputs[inputNumber][0] = temp;
    3a5a:	93 e0       	ldi	r25, 0x03	; 3
    3a5c:	00 0f       	add	r16, r16
    3a5e:	11 1f       	adc	r17, r17
    3a60:	9a 95       	dec	r25
    3a62:	e1 f7       	brne	.-8      	; 0x3a5c <setAnalogInput+0x1cc>
    3a64:	20 e6       	ldi	r18, 0x60	; 96
    3a66:	22 2e       	mov	r2, r18
    3a68:	23 e0       	ldi	r18, 0x03	; 3
    3a6a:	32 2e       	mov	r3, r18
    3a6c:	20 0e       	add	r2, r16
    3a6e:	31 1e       	adc	r3, r17
    3a70:	f1 01       	movw	r30, r2
    3a72:	80 83       	st	Z, r24
    DDRC &= ~(1 << pin);
    3a74:	27 b1       	in	r18, 0x07	; 7
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	01 c0       	rjmp	.+2      	; 0x3a7e <setAnalogInput+0x1ee>
    3a7c:	88 0f       	add	r24, r24
    3a7e:	ca 94       	dec	r12
    3a80:	ea f7       	brpl	.-6      	; 0x3a7c <setAnalogInput+0x1ec>
    3a82:	80 95       	com	r24
    3a84:	82 23       	and	r24, r18
    3a86:	87 b9       	out	0x07, r24	; 7
    temp = lowPercent;
    temp = temp * 255;
    3a88:	2f ef       	ldi	r18, 0xFF	; 255
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	d5 01       	movw	r26, r10
    3a8e:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <__usmulhisi3>
    temp = temp / 100;
    3a92:	34 e6       	ldi	r19, 0x64	; 100
    3a94:	a3 2e       	mov	r10, r19
    3a96:	b1 2c       	mov	r11, r1
    3a98:	c1 2c       	mov	r12, r1
    3a9a:	d1 2c       	mov	r13, r1
    3a9c:	a6 01       	movw	r20, r12
    3a9e:	95 01       	movw	r18, r10
    3aa0:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__divmodsi4>
    inputs[inputNumber][1] = temp;
    3aa4:	d1 01       	movw	r26, r2
    3aa6:	11 96       	adiw	r26, 0x01	; 1
    3aa8:	2c 93       	st	X, r18
    temp = highPercent;
    temp = temp * 255;
    3aaa:	2f ef       	ldi	r18, 0xFF	; 255
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	d2 01       	movw	r26, r4
    3ab0:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <__usmulhisi3>
    temp = temp / 100;
    3ab4:	a6 01       	movw	r20, r12
    3ab6:	95 01       	movw	r18, r10
    3ab8:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__divmodsi4>
    if (temp == 255) // if the top is 255 we need it to be 254 so its not digital
    3abc:	2f 3f       	cpi	r18, 0xFF	; 255
    3abe:	31 05       	cpc	r19, r1
    3ac0:	41 05       	cpc	r20, r1
    3ac2:	51 05       	cpc	r21, r1
    3ac4:	21 f4       	brne	.+8      	; 0x3ace <setAnalogInput+0x23e>
        temp = 254;
    3ac6:	2e ef       	ldi	r18, 0xFE	; 254
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	40 e0       	ldi	r20, 0x00	; 0
    3acc:	50 e0       	ldi	r21, 0x00	; 0

    inputs[inputNumber][2] = temp;
    3ace:	f8 01       	movw	r30, r16
    3ad0:	e0 5a       	subi	r30, 0xA0	; 160
    3ad2:	fc 4f       	sbci	r31, 0xFC	; 252
    3ad4:	22 83       	std	Z+2, r18	; 0x02
    // 128 switches and 128 programs possible
    if (commandReceived[13] == 'P' || commandReceived[13] == 'p') {
    3ad6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ad8:	fb 81       	ldd	r31, Y+3	; 0x03
    3ada:	85 85       	ldd	r24, Z+13	; 0x0d
    3adc:	80 35       	cpi	r24, 0x50	; 80
    3ade:	11 f0       	breq	.+4      	; 0x3ae4 <setAnalogInput+0x254>
    3ae0:	80 37       	cpi	r24, 0x70	; 112
    3ae2:	19 f4       	brne	.+6      	; 0x3aea <setAnalogInput+0x25a>
        switchNumber += 128;
    3ae4:	f0 e8       	ldi	r31, 0x80	; 128
    3ae6:	ef 0e       	add	r14, r31
    3ae8:	f1 1c       	adc	r15, r1
    }
    inputs[inputNumber][3] = switchNumber;
    3aea:	f8 01       	movw	r30, r16
    3aec:	e0 5a       	subi	r30, 0xA0	; 160
    3aee:	fc 4f       	sbci	r31, 0xFC	; 252
    3af0:	e3 82       	std	Z+3, r14	; 0x03
    temp = duration >> 8;
    inputs[inputNumber][4] = temp;
    3af2:	29 81       	ldd	r18, Y+1	; 0x01
    3af4:	24 83       	std	Z+4, r18	; 0x04
    temp = duration & 0xff;
    inputs[inputNumber][5] = temp;
    3af6:	65 82       	std	Z+5, r6	; 0x05


    if (pollTime > 255)
        pollTime = 255;
    inputs[inputNumber][6] = pollTime;
    3af8:	87 2d       	mov	r24, r7
    3afa:	98 2d       	mov	r25, r8
    3afc:	8f 3f       	cpi	r24, 0xFF	; 255
    3afe:	91 05       	cpc	r25, r1
    3b00:	19 f0       	breq	.+6      	; 0x3b08 <setAnalogInput+0x278>
    3b02:	14 f0       	brlt	.+4      	; 0x3b08 <setAnalogInput+0x278>
    3b04:	8f ef       	ldi	r24, 0xFF	; 255
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	86 83       	std	Z+6, r24	; 0x06

    // if we are using a RGB switch then which ones do we activate (mask)
    if (whichRGB > 7)
        whichRGB = 7;
    inputs[inputNumber][7] = whichRGB;
    3b0a:	f8 01       	movw	r30, r16
    3b0c:	e0 5a       	subi	r30, 0xA0	; 160
    3b0e:	fc 4f       	sbci	r31, 0xFC	; 252
    3b10:	89 2d       	mov	r24, r9
    3b12:	88 30       	cpi	r24, 0x08	; 8
    3b14:	08 f0       	brcs	.+2      	; 0x3b18 <setAnalogInput+0x288>
    3b16:	87 e0       	ldi	r24, 0x07	; 7
    3b18:	87 83       	std	Z+7, r24	; 0x07


    // set ADMUX when we do a conversion
    // Set prescaler 1/32. why not... ;-)
    ADCSRA |= (1 << ADPS2) || (1 << ADPS0);
    3b1a:	80 91 7a 00 	lds	r24, 0x007A
    3b1e:	81 60       	ori	r24, 0x01	; 1
    3b20:	80 93 7a 00 	sts	0x007A, r24


    ok();
}
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	ff 90       	pop	r15
    3b34:	ef 90       	pop	r14
    3b36:	df 90       	pop	r13
    3b38:	cf 90       	pop	r12
    3b3a:	bf 90       	pop	r11
    3b3c:	af 90       	pop	r10
    3b3e:	9f 90       	pop	r9
    3b40:	8f 90       	pop	r8
    3b42:	7f 90       	pop	r7
    3b44:	6f 90       	pop	r6
    3b46:	5f 90       	pop	r5
    3b48:	4f 90       	pop	r4
    3b4a:	3f 90       	pop	r3
    3b4c:	2f 90       	pop	r2
    // set ADMUX when we do a conversion
    // Set prescaler 1/32. why not... ;-)
    ADCSRA |= (1 << ADPS2) || (1 << ADPS0);


    ok();
    3b4e:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00003b52 <startProgram>:

// takes in a program number and time and turns on the program
// SP P#Durat.
// 01234567890

void startProgram(char * commandReceived) {
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	ec 01       	movw	r28, r24
    unsigned long duration;
    int programNumber = 0;
    // get switch number
    tempIntString[0] = commandReceived[3];
    3b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5e:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[4];
    3b62:	8c 81       	ldd	r24, Y+4	; 0x04
    3b64:	80 93 0a 01 	sts	0x010A, r24
    programNumber = atoi(tempIntString);
    3b68:	89 e0       	ldi	r24, 0x09	; 9
    3b6a:	91 e0       	ldi	r25, 0x01	; 1
    3b6c:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3b70:	8c 01       	movw	r16, r24
    if (programNumber >= MAX_PROGRAM) {
    3b72:	8a 30       	cpi	r24, 0x0A	; 10
    3b74:	91 05       	cpc	r25, r1
    3b76:	44 f0       	brlt	.+16     	; 0x3b88 <startProgram+0x36>
        fail(2);
    3b78:	82 e0       	ldi	r24, 0x02	; 2
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    tempHugeString[4] = commandReceived[9];
    tempHugeString[5] = commandReceived[10];
    duration = atol(tempHugeString);
    startTheProgram(programNumber, duration, 0);
    ok();
}
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    // get switch number
    tempIntString[0] = commandReceived[3];
    tempIntString[1] = commandReceived[4];
    programNumber = atoi(tempIntString);
    if (programNumber >= MAX_PROGRAM) {
        fail(2);
    3b84:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <fail>
        return;
    }
    // get duration
    tempHugeString[0] = commandReceived[5];
    3b88:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8a:	80 93 0c 01 	sts	0x010C, r24
    tempHugeString[1] = commandReceived[6];
    3b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b90:	80 93 0d 01 	sts	0x010D, r24
    tempHugeString[2] = commandReceived[7];
    3b94:	8f 81       	ldd	r24, Y+7	; 0x07
    3b96:	80 93 0e 01 	sts	0x010E, r24
    tempHugeString[3] = commandReceived[8];
    3b9a:	88 85       	ldd	r24, Y+8	; 0x08
    3b9c:	80 93 0f 01 	sts	0x010F, r24
    tempHugeString[4] = commandReceived[9];
    3ba0:	89 85       	ldd	r24, Y+9	; 0x09
    3ba2:	80 93 10 01 	sts	0x0110, r24
    tempHugeString[5] = commandReceived[10];
    3ba6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ba8:	80 93 11 01 	sts	0x0111, r24
    duration = atol(tempHugeString);
    3bac:	8c e0       	ldi	r24, 0x0C	; 12
    3bae:	91 e0       	ldi	r25, 0x01	; 1
    3bb0:	0e 94 a0 30 	call	0x6140	; 0x6140 <atol>
    startTheProgram(programNumber, duration, 0);
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	a9 01       	movw	r20, r18
    3bba:	c8 01       	movw	r24, r16
    3bbc:	0e 94 02 03 	call	0x604	; 0x604 <startTheProgram>
    ok();
}
    3bc0:	df 91       	pop	r29
    3bc2:	cf 91       	pop	r28
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    tempHugeString[3] = commandReceived[8];
    tempHugeString[4] = commandReceived[9];
    tempHugeString[5] = commandReceived[10];
    duration = atol(tempHugeString);
    startTheProgram(programNumber, duration, 0);
    ok();
    3bc8:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00003bcc <programSetTime>:
// DssddSSSSP
// 0123456789   
// PT:P#HHMMDur.
// 0123456789012

void programSetTime(char * commandReceived) {
    3bcc:	af 92       	push	r10
    3bce:	bf 92       	push	r11
    3bd0:	cf 92       	push	r12
    3bd2:	df 92       	push	r13
    3bd4:	ef 92       	push	r14
    3bd6:	ff 92       	push	r15
    3bd8:	0f 93       	push	r16
    3bda:	1f 93       	push	r17
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
    3be0:	ec 01       	movw	r28, r24
    int programNumber = 0;
    int hours = 0;
    int minutes = 0;
    int startTime = 0;
    int duration = 0;
    tempIntString[0] = commandReceived[3];
    3be2:	8b 81       	ldd	r24, Y+3	; 0x03
    3be4:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[4];
    3be8:	fc 80       	ldd	r15, Y+4	; 0x04
    3bea:	f0 92 0a 01 	sts	0x010A, r15
    programNumber = atoi(tempIntString);
    3bee:	89 e0       	ldi	r24, 0x09	; 9
    3bf0:	91 e0       	ldi	r25, 0x01	; 1
    3bf2:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3bf6:	8c 01       	movw	r16, r24
    if (programNumber >= MAX_PROGRAM || (programNumber == 0 && commandReceived[4] != '0')) {
    3bf8:	8a 30       	cpi	r24, 0x0A	; 10
    3bfa:	91 05       	cpc	r25, r1
    3bfc:	2c f4       	brge	.+10     	; 0x3c08 <programSetTime+0x3c>
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	31 f4       	brne	.+12     	; 0x3c0e <programSetTime+0x42>
    3c02:	20 e3       	ldi	r18, 0x30	; 48
    3c04:	f2 16       	cp	r15, r18
    3c06:	19 f0       	breq	.+6      	; 0x3c0e <programSetTime+0x42>
        fail(2);
    3c08:	82 e0       	ldi	r24, 0x02	; 2
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	10 c0       	rjmp	.+32     	; 0x3c2e <programSetTime+0x62>
    }
    // check for valid program
    // The day mask maxes out at 127 - the high but shouldn't be set if it is valid
    // unless it is a overflow program in which case the first switch will be set
    // 255 = not set
    if (weeklyProgram[programNumber][0] == 255 && weeklyProgram[programNumber][1] == 255) {
    3c0e:	8a e0       	ldi	r24, 0x0A	; 10
    3c10:	80 9f       	mul	r24, r16
    3c12:	f0 01       	movw	r30, r0
    3c14:	81 9f       	mul	r24, r17
    3c16:	f0 0d       	add	r31, r0
    3c18:	11 24       	eor	r1, r1
    3c1a:	e0 54       	subi	r30, 0x40	; 64
    3c1c:	fc 4f       	sbci	r31, 0xFC	; 252
    3c1e:	80 81       	ld	r24, Z
    3c20:	8f 3f       	cpi	r24, 0xFF	; 255
    3c22:	89 f4       	brne	.+34     	; 0x3c46 <programSetTime+0x7a>
    3c24:	81 81       	ldd	r24, Z+1	; 0x01
    3c26:	8f 3f       	cpi	r24, 0xFF	; 255
    3c28:	71 f4       	brne	.+28     	; 0x3c46 <programSetTime+0x7a>
        fail(0x0d);
    3c2a:	8d e0       	ldi	r24, 0x0D	; 13
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    temp = (duration >> 8);
    weeklyProgram[programNumber][3] = temp;
    temp = (duration & 0xff);
    weeklyProgram[programNumber][4] = temp;
    ok();
}
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	1f 91       	pop	r17
    3c34:	0f 91       	pop	r16
    3c36:	ff 90       	pop	r15
    3c38:	ef 90       	pop	r14
    3c3a:	df 90       	pop	r13
    3c3c:	cf 90       	pop	r12
    3c3e:	bf 90       	pop	r11
    3c40:	af 90       	pop	r10
    // check for valid program
    // The day mask maxes out at 127 - the high but shouldn't be set if it is valid
    // unless it is a overflow program in which case the first switch will be set
    // 255 = not set
    if (weeklyProgram[programNumber][0] == 255 && weeklyProgram[programNumber][1] == 255) {
        fail(0x0d);
    3c42:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <fail>
        return;
    }
    tempIntString[0] = commandReceived[5];
    3c46:	8d 81       	ldd	r24, Y+5	; 0x05
    3c48:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[6];
    3c4c:	ae 80       	ldd	r10, Y+6	; 0x06
    3c4e:	a0 92 0a 01 	sts	0x010A, r10
    hours = atoi(tempIntString);
    3c52:	89 e0       	ldi	r24, 0x09	; 9
    3c54:	91 e0       	ldi	r25, 0x01	; 1
    3c56:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3c5a:	6c 01       	movw	r12, r24
    tempIntString[0] = commandReceived[7];
    3c5c:	8f 81       	ldd	r24, Y+7	; 0x07
    3c5e:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[8];
    3c62:	b8 84       	ldd	r11, Y+8	; 0x08
    3c64:	b0 92 0a 01 	sts	0x010A, r11
    minutes = atoi(tempIntString);
    3c68:	89 e0       	ldi	r24, 0x09	; 9
    3c6a:	91 e0       	ldi	r25, 0x01	; 1
    3c6c:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3c70:	7c 01       	movw	r14, r24
    tempLongString[0] = commandReceived[9];
    3c72:	89 85       	ldd	r24, Y+9	; 0x09
    3c74:	80 93 16 01 	sts	0x0116, r24
    tempLongString[1] = commandReceived[10];
    3c78:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c7a:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[11];
    3c7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c80:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[12];
    3c84:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c86:	80 93 19 01 	sts	0x0119, r24
    duration = atoi(tempLongString);
    3c8a:	86 e1       	ldi	r24, 0x16	; 22
    3c8c:	91 e0       	ldi	r25, 0x01	; 1
    3c8e:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    if (hours >= 24 || (hours == 0 && commandReceived[6] != '0')) {
    3c92:	28 e1       	ldi	r18, 0x18	; 24
    3c94:	c2 16       	cp	r12, r18
    3c96:	d1 04       	cpc	r13, r1
    3c98:	34 f4       	brge	.+12     	; 0x3ca6 <programSetTime+0xda>
    3c9a:	c1 14       	cp	r12, r1
    3c9c:	d1 04       	cpc	r13, r1
    3c9e:	31 f4       	brne	.+12     	; 0x3cac <programSetTime+0xe0>
    3ca0:	20 e3       	ldi	r18, 0x30	; 48
    3ca2:	a2 16       	cp	r10, r18
    3ca4:	19 f0       	breq	.+6      	; 0x3cac <programSetTime+0xe0>
        fail(9);
    3ca6:	89 e0       	ldi	r24, 0x09	; 9
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	c1 cf       	rjmp	.-126    	; 0x3c2e <programSetTime+0x62>
        return;
    }
    if (minutes >= 60 || (minutes == 0 && commandReceived[8] != '0')) {
    3cac:	2c e3       	ldi	r18, 0x3C	; 60
    3cae:	e2 16       	cp	r14, r18
    3cb0:	f1 04       	cpc	r15, r1
    3cb2:	34 f4       	brge	.+12     	; 0x3cc0 <programSetTime+0xf4>
    3cb4:	e1 14       	cp	r14, r1
    3cb6:	f1 04       	cpc	r15, r1
    3cb8:	31 f4       	brne	.+12     	; 0x3cc6 <programSetTime+0xfa>
    3cba:	20 e3       	ldi	r18, 0x30	; 48
    3cbc:	b2 16       	cp	r11, r18
    3cbe:	19 f0       	breq	.+6      	; 0x3cc6 <programSetTime+0xfa>
        fail(0x0a);
    3cc0:	8a e0       	ldi	r24, 0x0A	; 10
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	b4 cf       	rjmp	.-152    	; 0x3c2e <programSetTime+0x62>
        return;
    }
    if (duration == 0) {
    3cc6:	00 97       	sbiw	r24, 0x00	; 0
    3cc8:	19 f4       	brne	.+6      	; 0x3cd0 <programSetTime+0x104>
        fail(0x0b);
    3cca:	8b e0       	ldi	r24, 0x0B	; 11
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	af cf       	rjmp	.-162    	; 0x3c2e <programSetTime+0x62>
        return;
    }
    duration *= 60; // convert to seconds
    3cd0:	6c e3       	ldi	r22, 0x3C	; 60
    3cd2:	68 9f       	mul	r22, r24
    3cd4:	a0 01       	movw	r20, r0
    3cd6:	69 9f       	mul	r22, r25
    3cd8:	50 0d       	add	r21, r0
    3cda:	11 24       	eor	r1, r1
    startTime = (hours * 60);
    3cdc:	6c 9d       	mul	r22, r12
    3cde:	90 01       	movw	r18, r0
    3ce0:	6d 9d       	mul	r22, r13
    3ce2:	30 0d       	add	r19, r0
    3ce4:	11 24       	eor	r1, r1
    startTime += minutes; // stored in minutes
    3ce6:	2e 0d       	add	r18, r14
    3ce8:	3f 1d       	adc	r19, r15
    int temp = 0;
    temp = (startTime >> 8);
    weeklyProgram[programNumber][1] = temp;
    3cea:	8a e0       	ldi	r24, 0x0A	; 10
    3cec:	80 9f       	mul	r24, r16
    3cee:	f0 01       	movw	r30, r0
    3cf0:	81 9f       	mul	r24, r17
    3cf2:	f0 0d       	add	r31, r0
    3cf4:	11 24       	eor	r1, r1
    3cf6:	e0 54       	subi	r30, 0x40	; 64
    3cf8:	fc 4f       	sbci	r31, 0xFC	; 252
    3cfa:	31 83       	std	Z+1, r19	; 0x01
    temp = (startTime & 0xff);
    weeklyProgram[programNumber][2] = temp;
    3cfc:	22 83       	std	Z+2, r18	; 0x02
    temp = (duration >> 8);
    weeklyProgram[programNumber][3] = temp;
    3cfe:	53 83       	std	Z+3, r21	; 0x03
    temp = (duration & 0xff);
    3d00:	55 27       	eor	r21, r21
    weeklyProgram[programNumber][4] = temp;
    3d02:	44 83       	std	Z+4, r20	; 0x04
    ok();
}
    3d04:	df 91       	pop	r29
    3d06:	cf 91       	pop	r28
    3d08:	1f 91       	pop	r17
    3d0a:	0f 91       	pop	r16
    3d0c:	ff 90       	pop	r15
    3d0e:	ef 90       	pop	r14
    3d10:	df 90       	pop	r13
    3d12:	cf 90       	pop	r12
    3d14:	bf 90       	pop	r11
    3d16:	af 90       	pop	r10
    weeklyProgram[programNumber][2] = temp;
    temp = (duration >> 8);
    weeklyProgram[programNumber][3] = temp;
    temp = (duration & 0xff);
    weeklyProgram[programNumber][4] = temp;
    ok();
    3d18:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00003d1c <programSetDays>:

// Sets the days a program will run
// PD:P#SMTWTFS
// 012345678901

void programSetDays(char * commandReceived) {
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    3d2c:	28 97       	sbiw	r28, 0x08	; 8
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
    3d38:	7c 01       	movw	r14, r24
    char tempReallyLongString[] = "0000000";
    3d3a:	88 e0       	ldi	r24, 0x08	; 8
    3d3c:	eb e7       	ldi	r30, 0x7B	; 123
    3d3e:	f2 e0       	ldi	r31, 0x02	; 2
    3d40:	de 01       	movw	r26, r28
    3d42:	11 96       	adiw	r26, 0x01	; 1
    3d44:	01 90       	ld	r0, Z+
    3d46:	0d 92       	st	X+, r0
    3d48:	8a 95       	dec	r24
    3d4a:	e1 f7       	brne	.-8      	; 0x3d44 <programSetDays+0x28>
    int programNumber = 0;
    long weekLong = 0;
    tempIntString[0] = commandReceived[3];
    3d4c:	f7 01       	movw	r30, r14
    3d4e:	83 81       	ldd	r24, Z+3	; 0x03
    3d50:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[4];
    3d54:	84 81       	ldd	r24, Z+4	; 0x04
    3d56:	80 93 0a 01 	sts	0x010A, r24
    programNumber = atoi(tempIntString);
    3d5a:	89 e0       	ldi	r24, 0x09	; 9
    3d5c:	91 e0       	ldi	r25, 0x01	; 1
    3d5e:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3d62:	8c 01       	movw	r16, r24
    tempReallyLongString[0] = commandReceived[5];
    3d64:	f7 01       	movw	r30, r14
    3d66:	85 81       	ldd	r24, Z+5	; 0x05
    3d68:	89 83       	std	Y+1, r24	; 0x01
    tempReallyLongString[1] = commandReceived[6];
    3d6a:	86 81       	ldd	r24, Z+6	; 0x06
    3d6c:	8a 83       	std	Y+2, r24	; 0x02
    tempReallyLongString[2] = commandReceived[7];
    3d6e:	87 81       	ldd	r24, Z+7	; 0x07
    3d70:	8b 83       	std	Y+3, r24	; 0x03
    tempReallyLongString[3] = commandReceived[8];
    3d72:	80 85       	ldd	r24, Z+8	; 0x08
    3d74:	8c 83       	std	Y+4, r24	; 0x04
    tempReallyLongString[4] = commandReceived[9];
    3d76:	81 85       	ldd	r24, Z+9	; 0x09
    3d78:	8d 83       	std	Y+5, r24	; 0x05
    tempReallyLongString[5] = commandReceived[10];
    3d7a:	82 85       	ldd	r24, Z+10	; 0x0a
    3d7c:	8e 83       	std	Y+6, r24	; 0x06
    tempReallyLongString[6] = commandReceived[11];
    3d7e:	83 85       	ldd	r24, Z+11	; 0x0b
    3d80:	8f 83       	std	Y+7, r24	; 0x07
    weekLong = strtol(tempReallyLongString, 0, 2);
    3d82:	42 e0       	ldi	r20, 0x02	; 2
    3d84:	50 e0       	ldi	r21, 0x00	; 0
    3d86:	60 e0       	ldi	r22, 0x00	; 0
    3d88:	70 e0       	ldi	r23, 0x00	; 0
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	01 96       	adiw	r24, 0x01	; 1
    3d8e:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <strtol>
    if ((programNumber >= MAX_PROGRAM) || (programNumber == 0 && commandReceived[4] != '0')) {
    3d92:	0a 30       	cpi	r16, 0x0A	; 10
    3d94:	11 05       	cpc	r17, r1
    3d96:	3c f4       	brge	.+14     	; 0x3da6 <programSetDays+0x8a>
    3d98:	01 15       	cp	r16, r1
    3d9a:	11 05       	cpc	r17, r1
    3d9c:	39 f4       	brne	.+14     	; 0x3dac <programSetDays+0x90>
    3d9e:	f7 01       	movw	r30, r14
    3da0:	24 81       	ldd	r18, Z+4	; 0x04
    3da2:	20 33       	cpi	r18, 0x30	; 48
    3da4:	19 f0       	breq	.+6      	; 0x3dac <programSetDays+0x90>
        fail(2);
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	1e c0       	rjmp	.+60     	; 0x3de8 <programSetDays+0xcc>
    }
    // check for valid program
    // The day mask maxes out at 127 - the high but shouldn't be set if it is valid
    // unless it is a overflow program in which case the first switch will be set
    // 255 = not set
    if (weeklyProgram[programNumber][0] == 255 && weeklyProgram[programNumber][1] == 255) {
    3dac:	2a e0       	ldi	r18, 0x0A	; 10
    3dae:	20 9f       	mul	r18, r16
    3db0:	f0 01       	movw	r30, r0
    3db2:	21 9f       	mul	r18, r17
    3db4:	f0 0d       	add	r31, r0
    3db6:	11 24       	eor	r1, r1
    3db8:	e0 54       	subi	r30, 0x40	; 64
    3dba:	fc 4f       	sbci	r31, 0xFC	; 252
    3dbc:	20 81       	ld	r18, Z
    3dbe:	2f 3f       	cpi	r18, 0xFF	; 255
    3dc0:	31 f4       	brne	.+12     	; 0x3dce <programSetDays+0xb2>
    3dc2:	21 81       	ldd	r18, Z+1	; 0x01
    3dc4:	2f 3f       	cpi	r18, 0xFF	; 255
    3dc6:	19 f4       	brne	.+6      	; 0x3dce <programSetDays+0xb2>
        fail(0x0d);
    3dc8:	8d e0       	ldi	r24, 0x0D	; 13
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	0d c0       	rjmp	.+26     	; 0x3de8 <programSetDays+0xcc>
        return;
    }
    if ((weekLong & 0x7f) == 0) {
    3dce:	ab 01       	movw	r20, r22
    3dd0:	bc 01       	movw	r22, r24
    3dd2:	4f 77       	andi	r20, 0x7F	; 127
    3dd4:	55 27       	eor	r21, r21
    3dd6:	66 27       	eor	r22, r22
    3dd8:	77 27       	eor	r23, r23
    3dda:	41 15       	cp	r20, r1
    3ddc:	51 05       	cpc	r21, r1
    3dde:	61 05       	cpc	r22, r1
    3de0:	71 05       	cpc	r23, r1
    3de2:	29 f4       	brne	.+10     	; 0x3dee <programSetDays+0xd2>
        fail(0x0f);
    3de4:	8f e0       	ldi	r24, 0x0F	; 15
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	0e 94 28 1b 	call	0x3650	; 0x3650 <fail>
    3dec:	0b c0       	rjmp	.+22     	; 0x3e04 <programSetDays+0xe8>
        return;
    }
    char weekdays = (weekLong & 0x7f);
    weeklyProgram[programNumber][0] = weekdays;
    3dee:	8a e0       	ldi	r24, 0x0A	; 10
    3df0:	80 9f       	mul	r24, r16
    3df2:	f0 01       	movw	r30, r0
    3df4:	81 9f       	mul	r24, r17
    3df6:	f0 0d       	add	r31, r0
    3df8:	11 24       	eor	r1, r1
    3dfa:	e0 54       	subi	r30, 0x40	; 64
    3dfc:	fc 4f       	sbci	r31, 0xFC	; 252
    }
    if ((weekLong & 0x7f) == 0) {
        fail(0x0f);
        return;
    }
    char weekdays = (weekLong & 0x7f);
    3dfe:	40 83       	st	Z, r20
    weeklyProgram[programNumber][0] = weekdays;
    ok();
    3e00:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <ok>
}
    3e04:	28 96       	adiw	r28, 0x08	; 8
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	cd bf       	out	0x3d, r28	; 61
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	ff 90       	pop	r15
    3e1a:	ef 90       	pop	r14
    3e1c:	08 95       	ret

00003e1e <programAddSwitch>:
// DssddSSSSP
// 0123456789
// PA:P#S#
// 0123456

void programAddSwitch(char * commandReceived) {
    3e1e:	cf 92       	push	r12
    3e20:	df 92       	push	r13
    3e22:	ef 92       	push	r14
    3e24:	ff 92       	push	r15
    3e26:	0f 93       	push	r16
    3e28:	1f 93       	push	r17
    3e2a:	cf 93       	push	r28
    3e2c:	df 93       	push	r29
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62
    3e32:	60 97       	sbiw	r28, 0x10	; 16
    3e34:	0f b6       	in	r0, 0x3f	; 63
    3e36:	f8 94       	cli
    3e38:	de bf       	out	0x3e, r29	; 62
    3e3a:	0f be       	out	0x3f, r0	; 63
    3e3c:	cd bf       	out	0x3d, r28	; 61
    3e3e:	7c 01       	movw	r14, r24
    int programNumber = 0;
    int switchNumber = 0;
    tempIntString[0] = commandReceived[3];
    3e40:	fc 01       	movw	r30, r24
    3e42:	83 81       	ldd	r24, Z+3	; 0x03
    3e44:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[4];
    3e48:	84 81       	ldd	r24, Z+4	; 0x04
    3e4a:	80 93 0a 01 	sts	0x010A, r24
    programNumber = atoi(tempIntString);
    3e4e:	89 e0       	ldi	r24, 0x09	; 9
    3e50:	91 e0       	ldi	r25, 0x01	; 1
    3e52:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3e56:	8c 01       	movw	r16, r24
    tempIntString[0] = commandReceived[5];
    3e58:	f7 01       	movw	r30, r14
    3e5a:	85 81       	ldd	r24, Z+5	; 0x05
    3e5c:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[6];
    3e60:	86 81       	ldd	r24, Z+6	; 0x06
    3e62:	80 93 0a 01 	sts	0x010A, r24
    switchNumber = atoi(tempIntString);
    3e66:	89 e0       	ldi	r24, 0x09	; 9
    3e68:	91 e0       	ldi	r25, 0x01	; 1
    3e6a:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    3e6e:	6c 01       	movw	r12, r24
    char switches[NUM_SWITCHES];
    switches[0] = 0;
    3e70:	19 82       	std	Y+1, r1	; 0x01
    int switchCount = programGetSwitches(programNumber, switches);
    3e72:	be 01       	movw	r22, r28
    3e74:	6f 5f       	subi	r22, 0xFF	; 255
    3e76:	7f 4f       	sbci	r23, 0xFF	; 255
    3e78:	c8 01       	movw	r24, r16
    3e7a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <programGetSwitches>
    3e7e:	fe 01       	movw	r30, r28
    3e80:	31 96       	adiw	r30, 0x01	; 1
// DssddSSSSP
// 0123456789
// PA:P#S#
// 0123456

void programAddSwitch(char * commandReceived) {
    3e82:	af 01       	movw	r20, r30
    char switches[NUM_SWITCHES];
    switches[0] = 0;
    int switchCount = programGetSwitches(programNumber, switches);
    int x = 0;
    // see if the switch is already there
    for (x = 0; x < switchCount; x++) {
    3e84:	08 c0       	rjmp	.+16     	; 0x3e96 <programAddSwitch+0x78>
        if (switches[x] == switchNumber) {
    3e86:	21 91       	ld	r18, Z+
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	2c 15       	cp	r18, r12
    3e8c:	3d 05       	cpc	r19, r13
    3e8e:	19 f4       	brne	.+6      	; 0x3e96 <programAddSwitch+0x78>
            fail(0x0c);
    3e90:	8c e0       	ldi	r24, 0x0C	; 12
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	68 c0       	rjmp	.+208    	; 0x3f66 <programAddSwitch+0x148>
// DssddSSSSP
// 0123456789
// PA:P#S#
// 0123456

void programAddSwitch(char * commandReceived) {
    3e96:	9f 01       	movw	r18, r30
    3e98:	24 1b       	sub	r18, r20
    3e9a:	35 0b       	sbc	r19, r21
    char switches[NUM_SWITCHES];
    switches[0] = 0;
    int switchCount = programGetSwitches(programNumber, switches);
    int x = 0;
    // see if the switch is already there
    for (x = 0; x < switchCount; x++) {
    3e9c:	28 17       	cp	r18, r24
    3e9e:	39 07       	cpc	r19, r25
    3ea0:	94 f3       	brlt	.-28     	; 0x3e86 <programAddSwitch+0x68>
            return;
        }
    }

    // check validity 
    if ((programNumber >= MAX_PROGRAM) || (programNumber == 0 && commandReceived[4] != '0')) {
    3ea2:	0a 30       	cpi	r16, 0x0A	; 10
    3ea4:	11 05       	cpc	r17, r1
    3ea6:	3c f4       	brge	.+14     	; 0x3eb6 <programAddSwitch+0x98>
    3ea8:	01 15       	cp	r16, r1
    3eaa:	11 05       	cpc	r17, r1
    3eac:	39 f4       	brne	.+14     	; 0x3ebc <programAddSwitch+0x9e>
    3eae:	f7 01       	movw	r30, r14
    3eb0:	84 81       	ldd	r24, Z+4	; 0x04
    3eb2:	80 33       	cpi	r24, 0x30	; 48
    3eb4:	19 f0       	breq	.+6      	; 0x3ebc <programAddSwitch+0x9e>
        fail(2);
    3eb6:	82 e0       	ldi	r24, 0x02	; 2
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	55 c0       	rjmp	.+170    	; 0x3f66 <programAddSwitch+0x148>
        return;
    }
    if ((switchNumber >= NUM_SWITCHES) || (switchNumber == 0 && commandReceived[6] != '0')) {
    3ebc:	f0 e1       	ldi	r31, 0x10	; 16
    3ebe:	cf 16       	cp	r12, r31
    3ec0:	d1 04       	cpc	r13, r1
    3ec2:	3c f4       	brge	.+14     	; 0x3ed2 <programAddSwitch+0xb4>
    3ec4:	c1 14       	cp	r12, r1
    3ec6:	d1 04       	cpc	r13, r1
    3ec8:	39 f4       	brne	.+14     	; 0x3ed8 <programAddSwitch+0xba>
    3eca:	f7 01       	movw	r30, r14
    3ecc:	86 81       	ldd	r24, Z+6	; 0x06
    3ece:	80 33       	cpi	r24, 0x30	; 48
    3ed0:	19 f0       	breq	.+6      	; 0x3ed8 <programAddSwitch+0xba>
        fail(1);
    3ed2:	81 e0       	ldi	r24, 0x01	; 1
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	47 c0       	rjmp	.+142    	; 0x3f66 <programAddSwitch+0x148>
    }
    // check for valid program
    // The day mask maxes out at 127 - the high but shouldn't be set if it is valid
    // unless it is a overflow program in which case the first switch will be set
    // 255 = not set
    if (weeklyProgram[programNumber][0] == 255 && weeklyProgram[programNumber][1] == 255) {
    3ed8:	8a e0       	ldi	r24, 0x0A	; 10
    3eda:	80 9f       	mul	r24, r16
    3edc:	f0 01       	movw	r30, r0
    3ede:	81 9f       	mul	r24, r17
    3ee0:	f0 0d       	add	r31, r0
    3ee2:	11 24       	eor	r1, r1
    3ee4:	e0 54       	subi	r30, 0x40	; 64
    3ee6:	fc 4f       	sbci	r31, 0xFC	; 252
    3ee8:	80 81       	ld	r24, Z
    3eea:	8f 3f       	cpi	r24, 0xFF	; 255
    3eec:	31 f4       	brne	.+12     	; 0x3efa <programAddSwitch+0xdc>
    3eee:	81 81       	ldd	r24, Z+1	; 0x01
    3ef0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ef2:	19 f4       	brne	.+6      	; 0x3efa <programAddSwitch+0xdc>
        fail(0x0d);
    3ef4:	8d e0       	ldi	r24, 0x0D	; 13
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	36 c0       	rjmp	.+108    	; 0x3f66 <programAddSwitch+0x148>
    }
    int noSwitchYet = 1;
    int blankSwitch = 0;
    int overflowProgram = 255;
    // prepare number string for output later
    itoa(programNumber, tempIntString, 10);
    3efa:	4a e0       	ldi	r20, 0x0A	; 10
    3efc:	50 e0       	ldi	r21, 0x00	; 0
    3efe:	69 e0       	ldi	r22, 0x09	; 9
    3f00:	71 e0       	ldi	r23, 0x01	; 1
    3f02:	c8 01       	movw	r24, r16
    3f04:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
    // see if our program has a valid switch
    blankSwitch = findOpenSwitch(programNumber);
    3f08:	c8 01       	movw	r24, r16
    3f0a:	0e 94 b8 02 	call	0x570	; 0x570 <findOpenSwitch>
    while (noSwitchYet == 1) {
        if (blankSwitch == 0) {
    3f0e:	00 97       	sbiw	r24, 0x00	; 0
    3f10:	c9 f5       	brne	.+114    	; 0x3f84 <programAddSwitch+0x166>
            // our program is full.  Find or make another one
            // first check if we already are overflowing.
            overflowProgram = weeklyProgram[programNumber][9];
    3f12:	4a e0       	ldi	r20, 0x0A	; 10
    3f14:	40 9f       	mul	r20, r16
    3f16:	f0 01       	movw	r30, r0
    3f18:	41 9f       	mul	r20, r17
    3f1a:	f0 0d       	add	r31, r0
    3f1c:	11 24       	eor	r1, r1
    3f1e:	e0 54       	subi	r30, 0x40	; 64
    3f20:	fc 4f       	sbci	r31, 0xFC	; 252
    3f22:	81 85       	ldd	r24, Z+9	; 0x09
    3f24:	90 e0       	ldi	r25, 0x00	; 0
            if (overflowProgram == 255) {
    3f26:	8f 3f       	cpi	r24, 0xFF	; 255
    3f28:	91 05       	cpc	r25, r1
    3f2a:	51 f5       	brne	.+84     	; 0x3f80 <programAddSwitch+0x162>
    3f2c:	2f ef       	ldi	r18, 0xFF	; 255
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	89 e0       	ldi	r24, 0x09	; 9
    3f32:	90 e0       	ldi	r25, 0x00	; 0
                // find blank program slot
                int possibleBlank = 255;
                // yeah I know but programNumber 0 won't be an overflow so there
                for (x = (MAX_PROGRAM - 1); x > 0; x--) {
                    // dont want it to wrap though 0 is a valid program
                    if (weeklyProgram[x][0] == 255 && weeklyProgram[x][5] == 255) {
    3f34:	48 9f       	mul	r20, r24
    3f36:	f0 01       	movw	r30, r0
    3f38:	49 9f       	mul	r20, r25
    3f3a:	f0 0d       	add	r31, r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	e0 54       	subi	r30, 0x40	; 64
    3f40:	fc 4f       	sbci	r31, 0xFC	; 252
    3f42:	50 81       	ld	r21, Z
    3f44:	5f 3f       	cpi	r21, 0xFF	; 255
    3f46:	31 f4       	brne	.+12     	; 0x3f54 <programAddSwitch+0x136>
    3f48:	55 81       	ldd	r21, Z+5	; 0x05
    3f4a:	5f 3f       	cpi	r21, 0xFF	; 255
    3f4c:	19 f4       	brne	.+6      	; 0x3f54 <programAddSwitch+0x136>
    3f4e:	9c 01       	movw	r18, r24
                        // this is blank
                        possibleBlank = x;
                        // end the loop
                        x = 0;
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	90 e0       	ldi	r25, 0x00	; 0
            if (overflowProgram == 255) {
                // no overflow.  Need to create one.
                // find blank program slot
                int possibleBlank = 255;
                // yeah I know but programNumber 0 won't be an overflow so there
                for (x = (MAX_PROGRAM - 1); x > 0; x--) {
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	18 16       	cp	r1, r24
    3f58:	19 06       	cpc	r1, r25
    3f5a:	64 f3       	brlt	.-40     	; 0x3f34 <programAddSwitch+0x116>
                        possibleBlank = x;
                        // end the loop
                        x = 0;
                    }
                }
                if (possibleBlank == 255) {
    3f5c:	2f 3f       	cpi	r18, 0xFF	; 255
    3f5e:	31 05       	cpc	r19, r1
    3f60:	29 f4       	brne	.+10     	; 0x3f6c <programAddSwitch+0x14e>
                    // oh oh, no room
                    fail(0x0e);
    3f62:	8e e0       	ldi	r24, 0x0E	; 14
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 28 1b 	call	0x3650	; 0x3650 <fail>
    3f6a:	19 c0       	rjmp	.+50     	; 0x3f9e <programAddSwitch+0x180>
                    return;
                }
                // now record the overflow and move forward
                weeklyProgram[programNumber][9] = possibleBlank;
    3f6c:	40 9f       	mul	r20, r16
    3f6e:	f0 01       	movw	r30, r0
    3f70:	41 9f       	mul	r20, r17
    3f72:	f0 0d       	add	r31, r0
    3f74:	11 24       	eor	r1, r1
    3f76:	e0 54       	subi	r30, 0x40	; 64
    3f78:	fc 4f       	sbci	r31, 0xFC	; 252
    3f7a:	21 87       	std	Z+9, r18	; 0x09
    3f7c:	89 01       	movw	r16, r18
    3f7e:	ca cf       	rjmp	.-108    	; 0x3f14 <programAddSwitch+0xf6>
    while (noSwitchYet == 1) {
        if (blankSwitch == 0) {
            // our program is full.  Find or make another one
            // first check if we already are overflowing.
            overflowProgram = weeklyProgram[programNumber][9];
            if (overflowProgram == 255) {
    3f80:	8c 01       	movw	r16, r24
    3f82:	c8 cf       	rjmp	.-112    	; 0x3f14 <programAddSwitch+0xf6>
        } else { // if(blankSwitch == 0)
            // we have a program and a slot.  move on.
            noSwitchYet = 0;
        }
    }
    weeklyProgram[programNumber][blankSwitch] = switchNumber;
    3f84:	2a e0       	ldi	r18, 0x0A	; 10
    3f86:	20 9f       	mul	r18, r16
    3f88:	f0 01       	movw	r30, r0
    3f8a:	21 9f       	mul	r18, r17
    3f8c:	f0 0d       	add	r31, r0
    3f8e:	11 24       	eor	r1, r1
    3f90:	e8 0f       	add	r30, r24
    3f92:	f9 1f       	adc	r31, r25
    3f94:	e0 54       	subi	r30, 0x40	; 64
    3f96:	fc 4f       	sbci	r31, 0xFC	; 252
    3f98:	c0 82       	st	Z, r12
    ok();
    3f9a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <ok>
}
    3f9e:	60 96       	adiw	r28, 0x10	; 16
    3fa0:	0f b6       	in	r0, 0x3f	; 63
    3fa2:	f8 94       	cli
    3fa4:	de bf       	out	0x3e, r29	; 62
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	ff 90       	pop	r15
    3fb4:	ef 90       	pop	r14
    3fb6:	df 90       	pop	r13
    3fb8:	cf 90       	pop	r12
    3fba:	08 95       	ret

00003fbc <clearProgram>:
// clears an existing program
// the clearTheProgram does the work so this is the interface
// CP:P#
// 01234

void clearProgram(char * commandReceived) {
    3fbc:	0f 93       	push	r16
    3fbe:	1f 93       	push	r17
    3fc0:	cf 93       	push	r28
    3fc2:	df 93       	push	r29
    3fc4:	8c 01       	movw	r16, r24
    int programNumber = getSwitchNumber(commandReceived);
    3fc6:	0e 94 5a 00 	call	0xb4	; 0xb4 <getSwitchNumber>
    3fca:	ec 01       	movw	r28, r24
    if (programNumber >= MAX_PROGRAM || (programNumber == 0 && commandReceived[4] != '0')) {
    3fcc:	8a 30       	cpi	r24, 0x0A	; 10
    3fce:	91 05       	cpc	r25, r1
    3fd0:	34 f4       	brge	.+12     	; 0x3fde <clearProgram+0x22>
    3fd2:	00 97       	sbiw	r24, 0x00	; 0
    3fd4:	61 f4       	brne	.+24     	; 0x3fee <clearProgram+0x32>
    3fd6:	f8 01       	movw	r30, r16
    3fd8:	84 81       	ldd	r24, Z+4	; 0x04
    3fda:	80 33       	cpi	r24, 0x30	; 48
    3fdc:	41 f0       	breq	.+16     	; 0x3fee <clearProgram+0x32>
        fail(2);
    3fde:	82 e0       	ldi	r24, 0x02	; 2
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    } else {
        itoa(programNumber, tempIntString, 10);
        ok();
        clearTheProgram(programNumber);
    }
}
    3fe2:	df 91       	pop	r29
    3fe4:	cf 91       	pop	r28
    3fe6:	1f 91       	pop	r17
    3fe8:	0f 91       	pop	r16
// 01234

void clearProgram(char * commandReceived) {
    int programNumber = getSwitchNumber(commandReceived);
    if (programNumber >= MAX_PROGRAM || (programNumber == 0 && commandReceived[4] != '0')) {
        fail(2);
    3fea:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <fail>
    } else {
        itoa(programNumber, tempIntString, 10);
    3fee:	4a e0       	ldi	r20, 0x0A	; 10
    3ff0:	50 e0       	ldi	r21, 0x00	; 0
    3ff2:	69 e0       	ldi	r22, 0x09	; 9
    3ff4:	71 e0       	ldi	r23, 0x01	; 1
    3ff6:	ce 01       	movw	r24, r28
    3ff8:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
        ok();
    3ffc:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <ok>
        clearTheProgram(programNumber);
    4000:	ce 01       	movw	r24, r28
    }
}
    4002:	df 91       	pop	r29
    4004:	cf 91       	pop	r28
    4006:	1f 91       	pop	r17
    4008:	0f 91       	pop	r16
    if (programNumber >= MAX_PROGRAM || (programNumber == 0 && commandReceived[4] != '0')) {
        fail(2);
    } else {
        itoa(programNumber, tempIntString, 10);
        ok();
        clearTheProgram(programNumber);
    400a:	0c 94 a2 02 	jmp	0x544	; 0x544 <clearTheProgram>

0000400e <colorChangeSet>:

// add a color to the color change
// CC:##,vvv,vvv,vvv
// 01234567890123456

void colorChangeSet(char * commandReceived) {
    400e:	ef 92       	push	r14
    4010:	ff 92       	push	r15
    4012:	0f 93       	push	r16
    4014:	1f 93       	push	r17
    4016:	cf 93       	push	r28
    4018:	df 93       	push	r29
    401a:	ec 01       	movw	r28, r24
    int programNumber = getSwitchNumber(commandReceived);
    401c:	0e 94 5a 00 	call	0xb4	; 0xb4 <getSwitchNumber>
    4020:	7c 01       	movw	r14, r24
    if (programNumber >= NUM_COLOR_CHANGES) {
    4022:	86 e0       	ldi	r24, 0x06	; 6
    4024:	e8 16       	cp	r14, r24
    4026:	f1 04       	cpc	r15, r1
    4028:	54 f0       	brlt	.+20     	; 0x403e <colorChangeSet+0x30>
        fail(7);
    402a:	87 e0       	ldi	r24, 0x07	; 7
    402c:	90 e0       	ldi	r25, 0x00	; 0
    tempLongString[0] = commandReceived[14];
    tempLongString[1] = commandReceived[15];
    tempLongString[2] = commandReceived[16];
    colorChanges[programNumber][2] = atoi(tempLongString);
    ok();
}
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	1f 91       	pop	r17
    4034:	0f 91       	pop	r16
    4036:	ff 90       	pop	r15
    4038:	ef 90       	pop	r14
// 01234567890123456

void colorChangeSet(char * commandReceived) {
    int programNumber = getSwitchNumber(commandReceived);
    if (programNumber >= NUM_COLOR_CHANGES) {
        fail(7);
    403a:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <fail>
        return;
    }
    tempLongString[3] = 0;
    403e:	10 92 19 01 	sts	0x0119, r1
    tempLongString[0] = commandReceived[6];
    4042:	8e 81       	ldd	r24, Y+6	; 0x06
    4044:	80 93 16 01 	sts	0x0116, r24
    tempLongString[1] = commandReceived[7];
    4048:	8f 81       	ldd	r24, Y+7	; 0x07
    404a:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[8];
    404e:	88 85       	ldd	r24, Y+8	; 0x08
    4050:	80 93 18 01 	sts	0x0118, r24
    colorChanges[programNumber][0] = atoi(tempLongString);
    4054:	86 e1       	ldi	r24, 0x16	; 22
    4056:	91 e0       	ldi	r25, 0x01	; 1
    4058:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    405c:	87 01       	movw	r16, r14
    405e:	00 0f       	add	r16, r16
    4060:	11 1f       	adc	r17, r17
    4062:	0e 0d       	add	r16, r14
    4064:	1f 1d       	adc	r17, r15
    4066:	00 52       	subi	r16, 0x20	; 32
    4068:	1d 4f       	sbci	r17, 0xFD	; 253
    406a:	f8 01       	movw	r30, r16
    406c:	80 83       	st	Z, r24
    tempLongString[0] = commandReceived[10];
    406e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4070:	80 93 16 01 	sts	0x0116, r24
    tempLongString[1] = commandReceived[11];
    4074:	8b 85       	ldd	r24, Y+11	; 0x0b
    4076:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[12];
    407a:	8c 85       	ldd	r24, Y+12	; 0x0c
    407c:	80 93 18 01 	sts	0x0118, r24
    colorChanges[programNumber][1] = atoi(tempLongString);
    4080:	86 e1       	ldi	r24, 0x16	; 22
    4082:	91 e0       	ldi	r25, 0x01	; 1
    4084:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    4088:	f8 01       	movw	r30, r16
    408a:	81 83       	std	Z+1, r24	; 0x01
    tempLongString[0] = commandReceived[14];
    408c:	8e 85       	ldd	r24, Y+14	; 0x0e
    408e:	80 93 16 01 	sts	0x0116, r24
    tempLongString[1] = commandReceived[15];
    4092:	8f 85       	ldd	r24, Y+15	; 0x0f
    4094:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[16];
    4098:	88 89       	ldd	r24, Y+16	; 0x10
    409a:	80 93 18 01 	sts	0x0118, r24
    colorChanges[programNumber][2] = atoi(tempLongString);
    409e:	86 e1       	ldi	r24, 0x16	; 22
    40a0:	91 e0       	ldi	r25, 0x01	; 1
    40a2:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    40a6:	f8 01       	movw	r30, r16
    40a8:	82 83       	std	Z+2, r24	; 0x02
    ok();
}
    40aa:	df 91       	pop	r29
    40ac:	cf 91       	pop	r28
    40ae:	1f 91       	pop	r17
    40b0:	0f 91       	pop	r16
    40b2:	ff 90       	pop	r15
    40b4:	ef 90       	pop	r14
    colorChanges[programNumber][1] = atoi(tempLongString);
    tempLongString[0] = commandReceived[14];
    tempLongString[1] = commandReceived[15];
    tempLongString[2] = commandReceived[16];
    colorChanges[programNumber][2] = atoi(tempLongString);
    ok();
    40b6:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

000040ba <pwmSetup>:
// PWM setup.  This is initially  geared for the 328p but the framework
// exists for other chips
// PS:P#S#DH
// 012345678

void pwmSetup(char * commandReceived) {
    40ba:	0f 93       	push	r16
    40bc:	1f 93       	push	r17
    40be:	cf 93       	push	r28
    40c0:	df 93       	push	r29
    40c2:	ec 01       	movw	r28, r24
    40c4:	e0 e4       	ldi	r30, 0x40	; 64
    40c6:	f3 e0       	ldi	r31, 0x03	; 3
    int x = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
        if (switchStuff[x] == 70 || switchStuff[x] == 71 || switchStuff[x] == 74 ||
    40c8:	81 91       	ld	r24, Z+
    40ca:	98 2f       	mov	r25, r24
    40cc:	96 54       	subi	r25, 0x46	; 70
    40ce:	92 30       	cpi	r25, 0x02	; 2
    40d0:	40 f0       	brcs	.+16     	; 0x40e2 <pwmSetup+0x28>
    40d2:	8a 34       	cpi	r24, 0x4A	; 74
    40d4:	31 f0       	breq	.+12     	; 0x40e2 <pwmSetup+0x28>
    40d6:	8b 34       	cpi	r24, 0x4B	; 75
    40d8:	21 f0       	breq	.+8      	; 0x40e2 <pwmSetup+0x28>
                switchStuff[x] == 75 || switchStuff[x] == 76 || switchStuff[x] == 77) {
    40da:	8c 34       	cpi	r24, 0x4C	; 76
    40dc:	11 f0       	breq	.+4      	; 0x40e2 <pwmSetup+0x28>
    40de:	8d 34       	cpi	r24, 0x4D	; 77
    40e0:	41 f4       	brne	.+16     	; 0x40f2 <pwmSetup+0x38>
            fail(6);
    40e2:	86 e0       	ldi	r24, 0x06	; 6
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    TCCR0B = (1 << CS01) | (1 << CS00);

    TCCR2B = (1 << CS22); // F_CPU/64
    // pwm to output
    ok();
}
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
void pwmSetup(char * commandReceived) {
    int x = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
        if (switchStuff[x] == 70 || switchStuff[x] == 71 || switchStuff[x] == 74 ||
                switchStuff[x] == 75 || switchStuff[x] == 76 || switchStuff[x] == 77) {
            fail(6);
    40ee:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <fail>
// PS:P#S#DH
// 012345678

void pwmSetup(char * commandReceived) {
    int x = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
    40f2:	83 e0       	ldi	r24, 0x03	; 3
    40f4:	e0 35       	cpi	r30, 0x50	; 80
    40f6:	f8 07       	cpc	r31, r24
    40f8:	39 f7       	brne	.-50     	; 0x40c8 <pwmSetup+0xe>
            return;
        }
    }
    int switchNumber = 0;
    // get switch number
    tempIntString[0] = commandReceived[5];
    40fa:	8d 81       	ldd	r24, Y+5	; 0x05
    40fc:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[6];
    4100:	8e 81       	ldd	r24, Y+6	; 0x06
    4102:	80 93 0a 01 	sts	0x010A, r24
    switchNumber = atoi(tempIntString);
    4106:	89 e0       	ldi	r24, 0x09	; 9
    4108:	91 e0       	ldi	r25, 0x01	; 1
    410a:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    410e:	8c 01       	movw	r16, r24
    clearTheSwitch(switchNumber);
    4110:	0e 94 d5 00 	call	0x1aa	; 0x1aa <clearTheSwitch>
    // set up a hue pwm
    if (commandReceived[8] == 'H' || commandReceived[8] == 'h' || commandReceived[8] == '1') {
    4114:	88 85       	ldd	r24, Y+8	; 0x08
    4116:	88 34       	cpi	r24, 0x48	; 72
    4118:	21 f0       	breq	.+8      	; 0x4122 <pwmSetup+0x68>
    411a:	88 36       	cpi	r24, 0x68	; 104
    411c:	11 f0       	breq	.+4      	; 0x4122 <pwmSetup+0x68>
    411e:	81 33       	cpi	r24, 0x31	; 49
    4120:	29 f4       	brne	.+10     	; 0x412c <pwmSetup+0x72>
        switchStuff[switchNumber] = 201;
    4122:	f8 01       	movw	r30, r16
    4124:	e0 5c       	subi	r30, 0xC0	; 192
    4126:	fc 4f       	sbci	r31, 0xFC	; 252
    4128:	89 ec       	ldi	r24, 0xC9	; 201
    412a:	0a c0       	rjmp	.+20     	; 0x4140 <pwmSetup+0x86>
    412c:	f8 01       	movw	r30, r16
    412e:	e0 5c       	subi	r30, 0xC0	; 192
    4130:	fc 4f       	sbci	r31, 0xFC	; 252
    } else if (commandReceived[8] == 'C' || commandReceived[8] == 'c') {
    4132:	83 34       	cpi	r24, 0x43	; 67
    4134:	11 f0       	breq	.+4      	; 0x413a <pwmSetup+0x80>
    4136:	83 36       	cpi	r24, 0x63	; 99
    4138:	11 f4       	brne	.+4      	; 0x413e <pwmSetup+0x84>
        switchStuff[switchNumber] = 202;
    413a:	8a ec       	ldi	r24, 0xCA	; 202
    413c:	01 c0       	rjmp	.+2      	; 0x4140 <pwmSetup+0x86>
    } else {
        switchStuff[switchNumber] = 200;
    413e:	88 ec       	ldi	r24, 0xC8	; 200
    4140:	80 83       	st	Z, r24
    }
    DDRD |= (1 << PIND3) | (1 << PIND5) | (1 << PIND6);
    4142:	8a b1       	in	r24, 0x0a	; 10
    4144:	88 66       	ori	r24, 0x68	; 104
    4146:	8a b9       	out	0x0a, r24	; 10
    // make sure initial values are 0
    Red = 0;
    4148:	10 92 b4 00 	sts	0x00B4, r1
    Green = 0;
    414c:	18 bc       	out	0x28, r1	; 40
    Blue = 0;
    414e:	17 bc       	out	0x27, r1	; 39
    // Set output phase correct whatevers
    // set it to inverted if the direction is 0
    if (commandReceived[7] == '0') {
    4150:	8f 81       	ldd	r24, Y+7	; 0x07
    4152:	80 33       	cpi	r24, 0x30	; 48
    4154:	31 f4       	brne	.+12     	; 0x4162 <pwmSetup+0xa8>
        pwmdir = 0;
    4156:	10 92 b7 03 	sts	0x03B7, r1
        TCCR0A = (1 << COM0A0) | (1 << COM0A1) | (1 << COM0B0) | (1 << COM0B1) | (1 << WGM00);
    415a:	81 ef       	ldi	r24, 0xF1	; 241
    415c:	84 bd       	out	0x24, r24	; 36
        TCCR2A = (1 << COM2B0) | (1 << COM2B1) | (1 << WGM20);
    415e:	81 e3       	ldi	r24, 0x31	; 49
    4160:	06 c0       	rjmp	.+12     	; 0x416e <pwmSetup+0xb4>
    } else {
        pwmdir = 1;
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	80 93 b7 03 	sts	0x03B7, r24
        TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00);
    4168:	81 ea       	ldi	r24, 0xA1	; 161
    416a:	84 bd       	out	0x24, r24	; 36
        TCCR2A = (1 << COM2B1) | (1 << WGM20);
    416c:	81 e2       	ldi	r24, 0x21	; 33
    416e:	80 93 b0 00 	sts	0x00B0, r24
    }
    // F_CPU/64 timers
    TCCR0B = (1 << CS01) | (1 << CS00);
    4172:	83 e0       	ldi	r24, 0x03	; 3
    4174:	85 bd       	out	0x25, r24	; 37

    TCCR2B = (1 << CS22); // F_CPU/64
    4176:	84 e0       	ldi	r24, 0x04	; 4
    4178:	80 93 b1 00 	sts	0x00B1, r24
    // pwm to output
    ok();
}
    417c:	df 91       	pop	r29
    417e:	cf 91       	pop	r28
    4180:	1f 91       	pop	r17
    4182:	0f 91       	pop	r16
    // F_CPU/64 timers
    TCCR0B = (1 << CS01) | (1 << CS00);

    TCCR2B = (1 << CS22); // F_CPU/64
    // pwm to output
    ok();
    4184:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

00004188 <startSwitch>:

// takes in a switch number and time and turns on the switch
// SS S#Durat.
// 01234567890

void startSwitch(char * commandReceived) {
    4188:	ef 92       	push	r14
    418a:	ff 92       	push	r15
    418c:	0f 93       	push	r16
    418e:	1f 93       	push	r17
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	00 d0       	rcall	.+0      	; 0x4196 <startSwitch+0xe>
    4196:	00 d0       	rcall	.+0      	; 0x4198 <startSwitch+0x10>
    4198:	cd b7       	in	r28, 0x3d	; 61
    419a:	de b7       	in	r29, 0x3e	; 62
    419c:	7c 01       	movw	r14, r24
    unsigned long duration;
    int switchNumber = 0;
    // get switch number
    switchNumber = getSwitchNumber(commandReceived);
    419e:	0e 94 5a 00 	call	0xb4	; 0xb4 <getSwitchNumber>
    41a2:	8c 01       	movw	r16, r24
    if ((switchNumber >= NUM_SWITCHES) || (switchStuff[switchNumber] == 255)) {
    41a4:	80 31       	cpi	r24, 0x10	; 16
    41a6:	91 05       	cpc	r25, r1
    41a8:	34 f4       	brge	.+12     	; 0x41b6 <startSwitch+0x2e>
    41aa:	fc 01       	movw	r30, r24
    41ac:	e0 5c       	subi	r30, 0xC0	; 192
    41ae:	fc 4f       	sbci	r31, 0xFC	; 252
    41b0:	20 81       	ld	r18, Z
    41b2:	2f 3f       	cpi	r18, 0xFF	; 255
    41b4:	19 f4       	brne	.+6      	; 0x41bc <startSwitch+0x34>
        fail(1);
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	23 c0       	rjmp	.+70     	; 0x4202 <startSwitch+0x7a>
        return;
    }
    // get duration
    tempHugeString[0] = commandReceived[5];
    41bc:	f7 01       	movw	r30, r14
    41be:	85 81       	ldd	r24, Z+5	; 0x05
    41c0:	80 93 0c 01 	sts	0x010C, r24
    tempHugeString[1] = commandReceived[6];
    41c4:	86 81       	ldd	r24, Z+6	; 0x06
    41c6:	80 93 0d 01 	sts	0x010D, r24
    tempHugeString[2] = commandReceived[7];
    41ca:	87 81       	ldd	r24, Z+7	; 0x07
    41cc:	80 93 0e 01 	sts	0x010E, r24
    tempHugeString[3] = commandReceived[8];
    41d0:	80 85       	ldd	r24, Z+8	; 0x08
    41d2:	80 93 0f 01 	sts	0x010F, r24
    tempHugeString[4] = commandReceived[9];
    41d6:	81 85       	ldd	r24, Z+9	; 0x09
    41d8:	80 93 10 01 	sts	0x0110, r24
    tempHugeString[5] = commandReceived[10];
    41dc:	82 85       	ldd	r24, Z+10	; 0x0a
    41de:	80 93 11 01 	sts	0x0111, r24
    duration = atol(tempHugeString);
    41e2:	8c e0       	ldi	r24, 0x0C	; 12
    41e4:	91 e0       	ldi	r25, 0x01	; 1
    41e6:	2c 83       	std	Y+4, r18	; 0x04
    41e8:	0e 94 a0 30 	call	0x6140	; 0x6140 <atol>
    41ec:	46 2f       	mov	r20, r22
    41ee:	57 2f       	mov	r21, r23
    41f0:	bc 01       	movw	r22, r24
    if (duration == 0) {
    41f2:	2c 81       	ldd	r18, Y+4	; 0x04
    41f4:	41 15       	cp	r20, r1
    41f6:	51 05       	cpc	r21, r1
    41f8:	61 05       	cpc	r22, r1
    41fa:	71 05       	cpc	r23, r1
    41fc:	29 f4       	brne	.+10     	; 0x4208 <startSwitch+0x80>
        fail(5);
    41fe:	85 e0       	ldi	r24, 0x05	; 5
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	0e 94 28 1b 	call	0x3650	; 0x3650 <fail>
        return;
    4206:	ac c0       	rjmp	.+344    	; 0x4360 <startSwitch+0x1d8>
    }
    // only update the time if it is longer than what the switch is already turned on to
    if ((weeklySeconds + duration) > switchStatus[switchNumber])
    4208:	80 91 aa 03 	lds	r24, 0x03AA
    420c:	90 91 ab 03 	lds	r25, 0x03AB
    4210:	a0 91 ac 03 	lds	r26, 0x03AC
    4214:	b0 91 ad 03 	lds	r27, 0x03AD
    4218:	84 0f       	add	r24, r20
    421a:	95 1f       	adc	r25, r21
    421c:	a6 1f       	adc	r26, r22
    421e:	b7 1f       	adc	r27, r23
    4220:	f8 01       	movw	r30, r16
    4222:	ee 0f       	add	r30, r30
    4224:	ff 1f       	adc	r31, r31
    4226:	ee 0f       	add	r30, r30
    4228:	ff 1f       	adc	r31, r31
    422a:	e0 50       	subi	r30, 0x00	; 0
    422c:	fd 4f       	sbci	r31, 0xFD	; 253
    422e:	40 81       	ld	r20, Z
    4230:	51 81       	ldd	r21, Z+1	; 0x01
    4232:	62 81       	ldd	r22, Z+2	; 0x02
    4234:	73 81       	ldd	r23, Z+3	; 0x03
    4236:	48 17       	cp	r20, r24
    4238:	59 07       	cpc	r21, r25
    423a:	6a 07       	cpc	r22, r26
    423c:	7b 07       	cpc	r23, r27
    423e:	20 f4       	brcc	.+8      	; 0x4248 <startSwitch+0xc0>
        switchStatus[switchNumber] = (weeklySeconds + duration);
    4240:	80 83       	st	Z, r24
    4242:	91 83       	std	Z+1, r25	; 0x01
    4244:	a2 83       	std	Z+2, r26	; 0x02
    4246:	b3 83       	std	Z+3, r27	; 0x03

    // see if it is PWM
    if (switchStuff[switchNumber] >= 200 && switchStuff[switchNumber] <= 220) {
    4248:	82 2f       	mov	r24, r18
    424a:	88 5c       	subi	r24, 0xC8	; 200
    424c:	85 31       	cpi	r24, 0x15	; 21
    424e:	08 f0       	brcs	.+2      	; 0x4252 <startSwitch+0xca>
    4250:	50 c0       	rjmp	.+160    	; 0x42f2 <startSwitch+0x16a>
        // k it is PWM.  See if it is hue
        if (switchStuff[switchNumber] == 200) {
    4252:	28 3c       	cpi	r18, 0xC8	; 200
    4254:	c9 f5       	brne	.+114    	; 0x42c8 <startSwitch+0x140>
            // even number so values, not hue
            red = pwmValues[0];
            green = pwmValues[1];
    4256:	80 91 af 03 	lds	r24, 0x03AF
            blue = pwmValues[2];
    425a:	e0 91 b0 03 	lds	r30, 0x03B0
            red = red * bright / 16;
    425e:	60 91 13 01 	lds	r22, 0x0113
    4262:	70 91 14 01 	lds	r23, 0x0114
    // see if it is PWM
    if (switchStuff[switchNumber] >= 200 && switchStuff[switchNumber] <= 220) {
        // k it is PWM.  See if it is hue
        if (switchStuff[switchNumber] == 200) {
            // even number so values, not hue
            red = pwmValues[0];
    4266:	90 91 ae 03 	lds	r25, 0x03AE
            green = pwmValues[1];
            blue = pwmValues[2];
            red = red * bright / 16;
    426a:	96 9f       	mul	r25, r22
    426c:	a0 01       	movw	r20, r0
    426e:	97 9f       	mul	r25, r23
    4270:	50 0d       	add	r21, r0
    4272:	11 24       	eor	r1, r1
    4274:	f4 e0       	ldi	r31, 0x04	; 4
    4276:	56 95       	lsr	r21
    4278:	47 95       	ror	r20
    427a:	fa 95       	dec	r31
    427c:	e1 f7       	brne	.-8      	; 0x4276 <startSwitch+0xee>
    427e:	50 93 b2 03 	sts	0x03B2, r21
    4282:	40 93 b1 03 	sts	0x03B1, r20
            green = green * bright / 16;
    4286:	86 9f       	mul	r24, r22
    4288:	90 01       	movw	r18, r0
    428a:	87 9f       	mul	r24, r23
    428c:	30 0d       	add	r19, r0
    428e:	11 24       	eor	r1, r1
    4290:	a4 e0       	ldi	r26, 0x04	; 4
    4292:	36 95       	lsr	r19
    4294:	27 95       	ror	r18
    4296:	aa 95       	dec	r26
    4298:	e1 f7       	brne	.-8      	; 0x4292 <startSwitch+0x10a>
    429a:	30 93 b4 03 	sts	0x03B4, r19
    429e:	20 93 b3 03 	sts	0x03B3, r18
            blue = blue * bright / 16;
    42a2:	e6 9f       	mul	r30, r22
    42a4:	c0 01       	movw	r24, r0
    42a6:	e7 9f       	mul	r30, r23
    42a8:	90 0d       	add	r25, r0
    42aa:	11 24       	eor	r1, r1
    42ac:	b4 e0       	ldi	r27, 0x04	; 4
    42ae:	96 95       	lsr	r25
    42b0:	87 95       	ror	r24
    42b2:	ba 95       	dec	r27
    42b4:	e1 f7       	brne	.-8      	; 0x42ae <startSwitch+0x126>
    42b6:	90 93 b6 03 	sts	0x03B6, r25
    42ba:	80 93 b5 03 	sts	0x03B5, r24
            Red = red;
    42be:	40 93 b4 00 	sts	0x00B4, r20
            Green = green;
    42c2:	28 bd       	out	0x28, r18	; 40
            Blue = blue;
    42c4:	87 bd       	out	0x27, r24	; 39
    42c6:	4a c0       	rjmp	.+148    	; 0x435c <startSwitch+0x1d4>
        } else if (switchStuff[switchNumber] == 202) {
    42c8:	2a 3c       	cpi	r18, 0xCA	; 202
    42ca:	21 f4       	brne	.+8      	; 0x42d4 <startSwitch+0x14c>
            runColorChanges = 1;
    42cc:	81 e0       	ldi	r24, 0x01	; 1
    42ce:	80 93 83 03 	sts	0x0383, r24
    42d2:	44 c0       	rjmp	.+136    	; 0x435c <startSwitch+0x1d4>
        } else if (switchStuff[switchNumber] == 212) {
    42d4:	24 3d       	cpi	r18, 0xD4	; 212
    42d6:	49 f4       	brne	.+18     	; 0x42ea <startSwitch+0x162>
            bright = switchBright[switchNumber];
    42d8:	f8 01       	movw	r30, r16
    42da:	e0 5b       	subi	r30, 0xB0	; 176
    42dc:	fc 4f       	sbci	r31, 0xFC	; 252
    42de:	80 81       	ld	r24, Z
    42e0:	80 93 13 01 	sts	0x0113, r24
    42e4:	10 92 14 01 	sts	0x0114, r1
    42e8:	39 c0       	rjmp	.+114    	; 0x435c <startSwitch+0x1d4>
        } else {
            runHue = 1;
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    42ec:	80 93 82 03 	sts	0x0382, r24
    42f0:	35 c0       	rjmp	.+106    	; 0x435c <startSwitch+0x1d4>
        char port[1];
        char pin[1];
        int realPin = 0;
        char direction[1];
        volatile unsigned char *thisPort = 0;
        getPort(switchNumber, port, pin, direction);
    42f2:	9e 01       	movw	r18, r28
    42f4:	2f 5f       	subi	r18, 0xFF	; 255
    42f6:	3f 4f       	sbci	r19, 0xFF	; 255
    42f8:	ae 01       	movw	r20, r28
    42fa:	4e 5f       	subi	r20, 0xFE	; 254
    42fc:	5f 4f       	sbci	r21, 0xFF	; 255
    42fe:	be 01       	movw	r22, r28
    4300:	6d 5f       	subi	r22, 0xFD	; 253
    4302:	7f 4f       	sbci	r23, 0xFF	; 255
    4304:	c8 01       	movw	r24, r16
    4306:	0e 94 65 00 	call	0xca	; 0xca <getPort>
        // yeah pointers and casts and whatevers. this fixes it
        realPin = pin[0];
    430a:	3a 81       	ldd	r19, Y+2	; 0x02
        if (port[0] == 'B')
    430c:	8b 81       	ldd	r24, Y+3	; 0x03
    430e:	82 34       	cpi	r24, 0x42	; 66
    4310:	39 f0       	breq	.+14     	; 0x4320 <startSwitch+0x198>
#ifdef PORTA
        else if (port[0] == 'A')
            thisPort = &PORTA;
#endif
#ifdef PORTC
        else if (port[0] == 'C')
    4312:	83 34       	cpi	r24, 0x43	; 67
    4314:	41 f0       	breq	.+16     	; 0x4326 <startSwitch+0x19e>
            thisPort = &PORTC;
#endif
#ifdef PORTD
        else if (port[0] == 'D')
    4316:	84 34       	cpi	r24, 0x44	; 68
    4318:	49 f0       	breq	.+18     	; 0x432c <startSwitch+0x1a4>
        // get the port and turn it on
        char port[1];
        char pin[1];
        int realPin = 0;
        char direction[1];
        volatile unsigned char *thisPort = 0;
    431a:	e0 e0       	ldi	r30, 0x00	; 0
    431c:	f0 e0       	ldi	r31, 0x00	; 0
    431e:	08 c0       	rjmp	.+16     	; 0x4330 <startSwitch+0x1a8>
        getPort(switchNumber, port, pin, direction);
        // yeah pointers and casts and whatevers. this fixes it
        realPin = pin[0];
        if (port[0] == 'B')
            thisPort = &PORTB;
    4320:	e5 e2       	ldi	r30, 0x25	; 37
    4322:	f0 e0       	ldi	r31, 0x00	; 0
    4324:	05 c0       	rjmp	.+10     	; 0x4330 <startSwitch+0x1a8>
        else if (port[0] == 'A')
            thisPort = &PORTA;
#endif
#ifdef PORTC
        else if (port[0] == 'C')
            thisPort = &PORTC;
    4326:	e8 e2       	ldi	r30, 0x28	; 40
    4328:	f0 e0       	ldi	r31, 0x00	; 0
    432a:	02 c0       	rjmp	.+4      	; 0x4330 <startSwitch+0x1a8>
#endif
#ifdef PORTD
        else if (port[0] == 'D')
            thisPort = &PORTD;
    432c:	eb e2       	ldi	r30, 0x2B	; 43
    432e:	f0 e0       	ldi	r31, 0x00	; 0
        else if (port[0] == 'I')
            thisPort = &PORTI;
#endif

        // turn it on based on what direction
        if (direction[0] == 0) {
    4330:	89 81       	ldd	r24, Y+1	; 0x01
            *thisPort &= ~(1 << realPin);
    4332:	20 81       	ld	r18, Z
        else if (port[0] == 'I')
            thisPort = &PORTI;
#endif

        // turn it on based on what direction
        if (direction[0] == 0) {
    4334:	81 11       	cpse	r24, r1
    4336:	0a c0       	rjmp	.+20     	; 0x434c <startSwitch+0x1c4>
            *thisPort &= ~(1 << realPin);
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	03 2e       	mov	r0, r19
    433e:	01 c0       	rjmp	.+2      	; 0x4342 <startSwitch+0x1ba>
    4340:	88 0f       	add	r24, r24
    4342:	0a 94       	dec	r0
    4344:	ea f7       	brpl	.-6      	; 0x4340 <startSwitch+0x1b8>
    4346:	80 95       	com	r24
    4348:	28 23       	and	r18, r24
    434a:	07 c0       	rjmp	.+14     	; 0x435a <startSwitch+0x1d2>
        } else {
            *thisPort |= (1 << realPin);
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	01 c0       	rjmp	.+2      	; 0x4354 <startSwitch+0x1cc>
    4352:	88 0f       	add	r24, r24
    4354:	3a 95       	dec	r19
    4356:	ea f7       	brpl	.-6      	; 0x4352 <startSwitch+0x1ca>
    4358:	28 2b       	or	r18, r24
    435a:	20 83       	st	Z, r18
        }
    }
    ok();
    435c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <ok>
}
    4360:	0f 90       	pop	r0
    4362:	0f 90       	pop	r0
    4364:	0f 90       	pop	r0
    4366:	0f 90       	pop	r0
    4368:	df 91       	pop	r29
    436a:	cf 91       	pop	r28
    436c:	1f 91       	pop	r17
    436e:	0f 91       	pop	r16
    4370:	ff 90       	pop	r15
    4372:	ef 90       	pop	r14
    4374:	08 95       	ret

00004376 <setNewSwitch>:
 ****************************************************************/
// Setup a new switch
// NS:S#PpD
// 01234567

void setNewSwitch(char * commandReceived) {
    4376:	af 92       	push	r10
    4378:	bf 92       	push	r11
    437a:	cf 92       	push	r12
    437c:	df 92       	push	r13
    437e:	ef 92       	push	r14
    4380:	ff 92       	push	r15
    4382:	0f 93       	push	r16
    4384:	1f 93       	push	r17
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	1f 92       	push	r1
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	6c 01       	movw	r12, r24
    volatile unsigned char *realPort = 0;
    volatile unsigned char *realDDR = 0;
    char pin = 0;
    char originalPin = 0;
    char direction = 0;
    tempIntString[0] = '0';
    4392:	80 e3       	ldi	r24, 0x30	; 48
    4394:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[6];
    4398:	d6 01       	movw	r26, r12
    439a:	16 96       	adiw	r26, 0x06	; 6
    439c:	8c 91       	ld	r24, X
    439e:	80 93 0a 01 	sts	0x010A, r24
    pin = atoi(tempIntString);
    43a2:	89 e0       	ldi	r24, 0x09	; 9
    43a4:	91 e0       	ldi	r25, 0x01	; 1
    43a6:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    43aa:	f8 2e       	mov	r15, r24
    originalPin = pin;
    tempIntString[1] = commandReceived[7];
    43ac:	f6 01       	movw	r30, r12
    43ae:	87 81       	ldd	r24, Z+7	; 0x07
    43b0:	80 93 0a 01 	sts	0x010A, r24
    direction = atoi(tempIntString);
    43b4:	89 e0       	ldi	r24, 0x09	; 9
    43b6:	91 e0       	ldi	r25, 0x01	; 1
    43b8:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    43bc:	e8 2e       	mov	r14, r24
    port = commandReceived[5];
    43be:	d6 01       	movw	r26, r12
    43c0:	15 96       	adiw	r26, 0x05	; 5
    43c2:	2c 91       	ld	r18, X
    switchNumber = getSwitchNumber(commandReceived);
    43c4:	c6 01       	movw	r24, r12
    43c6:	29 83       	std	Y+1, r18	; 0x01
    43c8:	0e 94 5a 00 	call	0xb4	; 0xb4 <getSwitchNumber>
    43cc:	8c 01       	movw	r16, r24
    // make sure it is off before doing a new one.
    clearTheSwitch(switchNumber);
    43ce:	0e 94 d5 00 	call	0x1aa	; 0x1aa <clearTheSwitch>
    // get the pin string ready for below
    if (port == 'B' || port == 'b') {
    43d2:	29 81       	ldd	r18, Y+1	; 0x01
    43d4:	22 34       	cpi	r18, 0x42	; 66
    43d6:	09 f4       	brne	.+2      	; 0x43da <setNewSwitch+0x64>
    43d8:	66 c0       	rjmp	.+204    	; 0x44a6 <setNewSwitch+0x130>
    43da:	22 36       	cpi	r18, 0x62	; 98
    43dc:	09 f4       	brne	.+2      	; 0x43e0 <setNewSwitch+0x6a>
    43de:	63 c0       	rjmp	.+198    	; 0x44a6 <setNewSwitch+0x130>
        realPort = &PORTA;
        realDDR = &DDRA;
        pinSubtractee = 0;
#endif
#ifdef PORTC
    } else if (port == 'C' || port == 'c') {
    43e0:	23 34       	cpi	r18, 0x43	; 67
    43e2:	09 f4       	brne	.+2      	; 0x43e6 <setNewSwitch+0x70>
    43e4:	67 c0       	rjmp	.+206    	; 0x44b4 <setNewSwitch+0x13e>
    43e6:	23 36       	cpi	r18, 0x63	; 99
    43e8:	09 f4       	brne	.+2      	; 0x43ec <setNewSwitch+0x76>
    43ea:	64 c0       	rjmp	.+200    	; 0x44b4 <setNewSwitch+0x13e>
        realPort = &PORTC;
        realDDR = &DDRC;
        pinSubtractee = 32;
#endif
#ifdef PORTD
    } else if (port == 'D' || port == 'd') {
    43ec:	24 34       	cpi	r18, 0x44	; 68
    43ee:	09 f4       	brne	.+2      	; 0x43f2 <setNewSwitch+0x7c>
    43f0:	68 c0       	rjmp	.+208    	; 0x44c2 <setNewSwitch+0x14c>
    43f2:	24 36       	cpi	r18, 0x64	; 100
    43f4:	09 f0       	breq	.+2      	; 0x43f8 <setNewSwitch+0x82>
    43f6:	48 c0       	rjmp	.+144    	; 0x4488 <setNewSwitch+0x112>
    43f8:	64 c0       	rjmp	.+200    	; 0x44c2 <setNewSwitch+0x14c>
    }


    if (realPort == 0) {
        fail(2);
    } else if ((switchNumber >= NUM_SWITCHES) ||
    43fa:	01 15       	cp	r16, r1
    43fc:	11 05       	cpc	r17, r1
    43fe:	69 f4       	brne	.+26     	; 0x441a <setNewSwitch+0xa4>
            ((switchNumber == 0) && (commandReceived[3] != '0') && (commandReceived[4] != 0))) {
    4400:	d6 01       	movw	r26, r12
    4402:	13 96       	adiw	r26, 0x03	; 3
    4404:	8c 91       	ld	r24, X
    4406:	13 97       	sbiw	r26, 0x03	; 3
    4408:	80 33       	cpi	r24, 0x30	; 48
    440a:	39 f0       	breq	.+14     	; 0x441a <setNewSwitch+0xa4>
    440c:	14 96       	adiw	r26, 0x04	; 4
    440e:	8c 91       	ld	r24, X
    4410:	88 23       	and	r24, r24
    4412:	19 f0       	breq	.+6      	; 0x441a <setNewSwitch+0xa4>
        fail(1);
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	39 c0       	rjmp	.+114    	; 0x448c <setNewSwitch+0x116>
    char pin = 0;
    char originalPin = 0;
    char direction = 0;
    tempIntString[0] = '0';
    tempIntString[1] = commandReceived[6];
    pin = atoi(tempIntString);
    441a:	4f 2d       	mov	r20, r15
    if (realPort == 0) {
        fail(2);
    } else if ((switchNumber >= NUM_SWITCHES) ||
            ((switchNumber == 0) && (commandReceived[3] != '0') && (commandReceived[4] != 0))) {
        fail(1);
    } else if ((pin > 7) || ((pin == 0) && (commandReceived[6] != '0'))) {
    441c:	48 30       	cpi	r20, 0x08	; 8
    441e:	38 f4       	brcc	.+14     	; 0x442e <setNewSwitch+0xb8>
    4420:	f1 10       	cpse	r15, r1
    4422:	08 c0       	rjmp	.+16     	; 0x4434 <setNewSwitch+0xbe>
    4424:	d6 01       	movw	r26, r12
    4426:	16 96       	adiw	r26, 0x06	; 6
    4428:	8c 91       	ld	r24, X
    442a:	80 33       	cpi	r24, 0x30	; 48
    442c:	19 f0       	breq	.+6      	; 0x4434 <setNewSwitch+0xbe>
        fail(4);
    442e:	84 e0       	ldi	r24, 0x04	; 4
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	2c c0       	rjmp	.+88     	; 0x448c <setNewSwitch+0x116>
    } else {
        // set DDR out
        *realDDR |= (1 << originalPin);
    4434:	d5 01       	movw	r26, r10
    4436:	5c 91       	ld	r21, X
    4438:	21 e0       	ldi	r18, 0x01	; 1
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	0f 2c       	mov	r0, r15
    443e:	01 c0       	rjmp	.+2      	; 0x4442 <setNewSwitch+0xcc>
    4440:	22 0f       	add	r18, r18
    4442:	0a 94       	dec	r0
    4444:	ea f7       	brpl	.-6      	; 0x4440 <setNewSwitch+0xca>
    4446:	52 2b       	or	r21, r18
    4448:	5c 93       	st	X, r21
        // double the pin and add 1 if it is high
        pinMultiplied = pin * 2;
    444a:	44 0f       	add	r20, r20
        // turn switch off
        pin = pinMultiplied + pinSubtractee;
        switchStuff[switchNumber] = pin;
    444c:	d8 01       	movw	r26, r16
    444e:	a0 5c       	subi	r26, 0xC0	; 192
    4450:	bc 4f       	sbci	r27, 0xFC	; 252
        // set DDR out
        *realDDR |= (1 << originalPin);
        // double the pin and add 1 if it is high
        pinMultiplied = pin * 2;
        // turn switch off
        pin = pinMultiplied + pinSubtractee;
    4452:	49 0f       	add	r20, r25
        switchStuff[switchNumber] = pin;
    4454:	4c 93       	st	X, r20

        if (direction == 0) {
            // 0 = low is on  1 = high is on
            *realPort |= (1 << originalPin);
    4456:	80 81       	ld	r24, Z
        pinMultiplied = pin * 2;
        // turn switch off
        pin = pinMultiplied + pinSubtractee;
        switchStuff[switchNumber] = pin;

        if (direction == 0) {
    4458:	e1 10       	cpse	r14, r1
    445a:	03 c0       	rjmp	.+6      	; 0x4462 <setNewSwitch+0xec>
            // 0 = low is on  1 = high is on
            *realPort |= (1 << originalPin);
    445c:	82 2b       	or	r24, r18
    445e:	80 83       	st	Z, r24
    4460:	06 c0       	rjmp	.+12     	; 0x446e <setNewSwitch+0xf8>
        } else {
            *realPort &= ~(1 << originalPin);
    4462:	20 95       	com	r18
    4464:	82 23       	and	r24, r18
    4466:	80 83       	st	Z, r24
            switchStuff[switchNumber]++;
    4468:	8c 91       	ld	r24, X
    446a:	8f 5f       	subi	r24, 0xFF	; 255
    446c:	8c 93       	st	X, r24
        }
        ok();
    }
}
    446e:	0f 90       	pop	r0
    4470:	df 91       	pop	r29
    4472:	cf 91       	pop	r28
    4474:	1f 91       	pop	r17
    4476:	0f 91       	pop	r16
    4478:	ff 90       	pop	r15
    447a:	ef 90       	pop	r14
    447c:	df 90       	pop	r13
    447e:	cf 90       	pop	r12
    4480:	bf 90       	pop	r11
    4482:	af 90       	pop	r10
            *realPort |= (1 << originalPin);
        } else {
            *realPort &= ~(1 << originalPin);
            switchStuff[switchNumber]++;
        }
        ok();
    4484:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

    }


    if (realPort == 0) {
        fail(2);
    4488:	82 e0       	ldi	r24, 0x02	; 2
    448a:	90 e0       	ldi	r25, 0x00	; 0
            *realPort &= ~(1 << originalPin);
            switchStuff[switchNumber]++;
        }
        ok();
    }
}
    448c:	0f 90       	pop	r0
    448e:	df 91       	pop	r29
    4490:	cf 91       	pop	r28
    4492:	1f 91       	pop	r17
    4494:	0f 91       	pop	r16
    4496:	ff 90       	pop	r15
    4498:	ef 90       	pop	r14
    449a:	df 90       	pop	r13
    449c:	cf 90       	pop	r12
    449e:	bf 90       	pop	r11
    44a0:	af 90       	pop	r10

    }


    if (realPort == 0) {
        fail(2);
    44a2:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <fail>
    // make sure it is off before doing a new one.
    clearTheSwitch(switchNumber);
    // get the pin string ready for below
    if (port == 'B' || port == 'b') {
        realPort = &PORTB;
        realDDR = &DDRB;
    44a6:	64 e2       	ldi	r22, 0x24	; 36
    44a8:	a6 2e       	mov	r10, r22
    44aa:	b1 2c       	mov	r11, r1
    switchNumber = getSwitchNumber(commandReceived);
    // make sure it is off before doing a new one.
    clearTheSwitch(switchNumber);
    // get the pin string ready for below
    if (port == 'B' || port == 'b') {
        realPort = &PORTB;
    44ac:	e5 e2       	ldi	r30, 0x25	; 37
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
        realDDR = &DDRB;
        pinSubtractee = 16;
    44b0:	90 e1       	ldi	r25, 0x10	; 16
    44b2:	0d c0       	rjmp	.+26     	; 0x44ce <setNewSwitch+0x158>
        pinSubtractee = 0;
#endif
#ifdef PORTC
    } else if (port == 'C' || port == 'c') {
        realPort = &PORTC;
        realDDR = &DDRC;
    44b4:	57 e2       	ldi	r21, 0x27	; 39
    44b6:	a5 2e       	mov	r10, r21
    44b8:	b1 2c       	mov	r11, r1
        realDDR = &DDRA;
        pinSubtractee = 0;
#endif
#ifdef PORTC
    } else if (port == 'C' || port == 'c') {
        realPort = &PORTC;
    44ba:	e8 e2       	ldi	r30, 0x28	; 40
    44bc:	f0 e0       	ldi	r31, 0x00	; 0
        realDDR = &DDRC;
        pinSubtractee = 32;
    44be:	90 e2       	ldi	r25, 0x20	; 32
    44c0:	06 c0       	rjmp	.+12     	; 0x44ce <setNewSwitch+0x158>
#endif
#ifdef PORTD
    } else if (port == 'D' || port == 'd') {
        realPort = &PORTD;
        realDDR = &DDRD;
    44c2:	4a e2       	ldi	r20, 0x2A	; 42
    44c4:	a4 2e       	mov	r10, r20
    44c6:	b1 2c       	mov	r11, r1
        realDDR = &DDRC;
        pinSubtractee = 32;
#endif
#ifdef PORTD
    } else if (port == 'D' || port == 'd') {
        realPort = &PORTD;
    44c8:	eb e2       	ldi	r30, 0x2B	; 43
    44ca:	f0 e0       	ldi	r31, 0x00	; 0
        realDDR = &DDRD;
        pinSubtractee = 48;
    44cc:	90 e3       	ldi	r25, 0x30	; 48
    }


    if (realPort == 0) {
        fail(2);
    } else if ((switchNumber >= NUM_SWITCHES) ||
    44ce:	00 31       	cpi	r16, 0x10	; 16
    44d0:	11 05       	cpc	r17, r1
    44d2:	0c f4       	brge	.+2      	; 0x44d6 <setNewSwitch+0x160>
    44d4:	92 cf       	rjmp	.-220    	; 0x43fa <setNewSwitch+0x84>
    44d6:	9e cf       	rjmp	.-196    	; 0x4414 <setNewSwitch+0x9e>

000044d8 <setTimeLimits>:

// sets the time limits for switches to affect progams
// TL:##HHMMHHMMddddddd
// 01234567890123456789

void setTimeLimits(char * commandReceived) {
    44d8:	2f 92       	push	r2
    44da:	3f 92       	push	r3
    44dc:	4f 92       	push	r4
    44de:	5f 92       	push	r5
    44e0:	6f 92       	push	r6
    44e2:	7f 92       	push	r7
    44e4:	8f 92       	push	r8
    44e6:	9f 92       	push	r9
    44e8:	af 92       	push	r10
    44ea:	bf 92       	push	r11
    44ec:	cf 92       	push	r12
    44ee:	df 92       	push	r13
    44f0:	ef 92       	push	r14
    44f2:	ff 92       	push	r15
    44f4:	0f 93       	push	r16
    44f6:	1f 93       	push	r17
    44f8:	cf 93       	push	r28
    44fa:	df 93       	push	r29
    44fc:	cd b7       	in	r28, 0x3d	; 61
    44fe:	de b7       	in	r29, 0x3e	; 62
    4500:	2c 97       	sbiw	r28, 0x0c	; 12
    4502:	0f b6       	in	r0, 0x3f	; 63
    4504:	f8 94       	cli
    4506:	de bf       	out	0x3e, r29	; 62
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	cd bf       	out	0x3d, r28	; 61
    450c:	6c 01       	movw	r12, r24
    char tempReallyLongString[] = "0000000";
    450e:	88 e0       	ldi	r24, 0x08	; 8
    4510:	eb e7       	ldi	r30, 0x7B	; 123
    4512:	f2 e0       	ldi	r31, 0x02	; 2
    4514:	de 01       	movw	r26, r28
    4516:	11 96       	adiw	r26, 0x01	; 1
    4518:	01 90       	ld	r0, Z+
    451a:	0d 92       	st	X+, r0
    451c:	8a 95       	dec	r24
    451e:	e1 f7       	brne	.-8      	; 0x4518 <setTimeLimits+0x40>
    int programNumber = 0;
    long weekLong = 0;
    long startTime = 0;
    long stopTime = 0;
    int x = 0;
    statusMsg[0] = 0;
    4520:	10 92 8a 03 	sts	0x038A, r1
    unsigned int startHour, startMinute, stopHour, stopMinute;
    tempIntString[0] = commandReceived[3];
    4524:	f6 01       	movw	r30, r12
    4526:	83 81       	ldd	r24, Z+3	; 0x03
    4528:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[4];
    452c:	84 81       	ldd	r24, Z+4	; 0x04
    452e:	80 93 0a 01 	sts	0x010A, r24
    programNumber = atoi(tempIntString);
    4532:	89 e0       	ldi	r24, 0x09	; 9
    4534:	91 e0       	ldi	r25, 0x01	; 1
    4536:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    453a:	8c 01       	movw	r16, r24
    if (programNumber > NUM_LIMITS) {
    453c:	85 30       	cpi	r24, 0x05	; 5
    453e:	91 05       	cpc	r25, r1
    4540:	1c f0       	brlt	.+6      	; 0x4548 <setTimeLimits+0x70>
        fail(0x10);
    4542:	80 e1       	ldi	r24, 0x10	; 16
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	e9 c0       	rjmp	.+466    	; 0x471a <setTimeLimits+0x242>
        return;
    }
    if (commandReceived[5] == 'x' || commandReceived[5] == 'x') {
    4548:	f6 01       	movw	r30, r12
    454a:	85 81       	ldd	r24, Z+5	; 0x05
    454c:	88 37       	cpi	r24, 0x78	; 120
    454e:	69 f4       	brne	.+26     	; 0x456a <setTimeLimits+0x92>
        timeLimits[programNumber][2] = 0;
    4550:	8c e0       	ldi	r24, 0x0C	; 12
    4552:	80 9f       	mul	r24, r16
    4554:	f0 01       	movw	r30, r0
    4556:	81 9f       	mul	r24, r17
    4558:	f0 0d       	add	r31, r0
    455a:	11 24       	eor	r1, r1
    455c:	ec 59       	subi	r30, 0x9C	; 156
    455e:	fb 4f       	sbci	r31, 0xFB	; 251
    4560:	10 86       	std	Z+8, r1	; 0x08
    4562:	11 86       	std	Z+9, r1	; 0x09
    4564:	12 86       	std	Z+10, r1	; 0x0a
    4566:	13 86       	std	Z+11, r1	; 0x0b
    4568:	11 c1       	rjmp	.+546    	; 0x478c <setTimeLimits+0x2b4>
        ok();
        return;
    }
    if (commandReceived[5] == '?') {
    456a:	8f 33       	cpi	r24, 0x3F	; 63
    456c:	09 f0       	breq	.+2      	; 0x4570 <setTimeLimits+0x98>
    456e:	7c c0       	rjmp	.+248    	; 0x4668 <setTimeLimits+0x190>
        // show the limit.
        startTime = timeLimits[programNumber][0];
    4570:	8c e0       	ldi	r24, 0x0C	; 12
    4572:	80 9f       	mul	r24, r16
    4574:	f0 01       	movw	r30, r0
    4576:	81 9f       	mul	r24, r17
    4578:	f0 0d       	add	r31, r0
    457a:	11 24       	eor	r1, r1
    457c:	ec 59       	subi	r30, 0x9C	; 156
    457e:	fb 4f       	sbci	r31, 0xFB	; 251
    4580:	80 80       	ld	r8, Z
    4582:	91 80       	ldd	r9, Z+1	; 0x01
    4584:	a2 80       	ldd	r10, Z+2	; 0x02
    4586:	b3 80       	ldd	r11, Z+3	; 0x03
        stopTime = timeLimits[programNumber][1];
        strcat(statusMsg, "Start:");
    4588:	63 e8       	ldi	r22, 0x83	; 131
    458a:	72 e0       	ldi	r23, 0x02	; 2
    458c:	8a e8       	ldi	r24, 0x8A	; 138
    458e:	93 e0       	ldi	r25, 0x03	; 3
    4590:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        startHour = (startTime / 60 / 60);
    4594:	c5 01       	movw	r24, r10
    4596:	b4 01       	movw	r22, r8
    4598:	20 e1       	ldi	r18, 0x10	; 16
    459a:	3e e0       	ldi	r19, 0x0E	; 14
    459c:	40 e0       	ldi	r20, 0x00	; 0
    459e:	50 e0       	ldi	r21, 0x00	; 0
    45a0:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__divmodsi4>
    45a4:	69 01       	movw	r12, r18
    45a6:	7a 01       	movw	r14, r20
        returnInt(startHour, tempLongString);
    45a8:	66 e1       	ldi	r22, 0x16	; 22
    45aa:	71 e0       	ldi	r23, 0x01	; 1
    45ac:	c9 01       	movw	r24, r18
    45ae:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempLongString);
    45b2:	66 e1       	ldi	r22, 0x16	; 22
    45b4:	71 e0       	ldi	r23, 0x01	; 1
    45b6:	8a e8       	ldi	r24, 0x8A	; 138
    45b8:	93 e0       	ldi	r25, 0x03	; 3
    45ba:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        startMinute = ((startTime - (startHour * 60 * 60)) / 60);
        strcat(statusMsg, ":");
    45be:	61 ee       	ldi	r22, 0xE1	; 225
    45c0:	71 e0       	ldi	r23, 0x01	; 1
    45c2:	8a e8       	ldi	r24, 0x8A	; 138
    45c4:	93 e0       	ldi	r25, 0x03	; 3
    45c6:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        stopTime = timeLimits[programNumber][1];
        strcat(statusMsg, "Start:");
        startHour = (startTime / 60 / 60);
        returnInt(startHour, tempLongString);
        strcat(statusMsg, tempLongString);
        startMinute = ((startTime - (startHour * 60 * 60)) / 60);
    45ca:	20 e1       	ldi	r18, 0x10	; 16
    45cc:	3e e0       	ldi	r19, 0x0E	; 14
    45ce:	c2 9e       	mul	r12, r18
    45d0:	c0 01       	movw	r24, r0
    45d2:	c3 9e       	mul	r12, r19
    45d4:	90 0d       	add	r25, r0
    45d6:	d2 9e       	mul	r13, r18
    45d8:	90 0d       	add	r25, r0
    45da:	11 24       	eor	r1, r1
    45dc:	a5 01       	movw	r20, r10
    45de:	94 01       	movw	r18, r8
    45e0:	28 1b       	sub	r18, r24
    45e2:	39 0b       	sbc	r19, r25
    45e4:	41 09       	sbc	r20, r1
    45e6:	51 09       	sbc	r21, r1
    45e8:	ca 01       	movw	r24, r20
    45ea:	b9 01       	movw	r22, r18
    45ec:	2c e3       	ldi	r18, 0x3C	; 60
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	40 e0       	ldi	r20, 0x00	; 0
    45f2:	50 e0       	ldi	r21, 0x00	; 0
    45f4:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__divmodsi4>
        strcat(statusMsg, ":");
        returnInt(startMinute, tempLongString);
    45f8:	66 e1       	ldi	r22, 0x16	; 22
    45fa:	71 e0       	ldi	r23, 0x01	; 1
    45fc:	c9 01       	movw	r24, r18
    45fe:	29 87       	std	Y+9, r18	; 0x09
    4600:	3a 87       	std	Y+10, r19	; 0x0a
    4602:	4b 87       	std	Y+11, r20	; 0x0b
    4604:	5c 87       	std	Y+12, r21	; 0x0c
    4606:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempLongString);
    460a:	66 e1       	ldi	r22, 0x16	; 22
    460c:	71 e0       	ldi	r23, 0x01	; 1
    460e:	8a e8       	ldi	r24, 0x8A	; 138
    4610:	93 e0       	ldi	r25, 0x03	; 3
    4612:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, "Stop:");
    4616:	6a e8       	ldi	r22, 0x8A	; 138
    4618:	72 e0       	ldi	r23, 0x02	; 2
    461a:	8a e8       	ldi	r24, 0x8A	; 138
    461c:	93 e0       	ldi	r25, 0x03	; 3
    461e:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        stopHour = (startTime / 60 / 60);
        returnInt(stopHour, tempLongString);
    4622:	66 e1       	ldi	r22, 0x16	; 22
    4624:	71 e0       	ldi	r23, 0x01	; 1
    4626:	c6 01       	movw	r24, r12
    4628:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempLongString);
    462c:	66 e1       	ldi	r22, 0x16	; 22
    462e:	71 e0       	ldi	r23, 0x01	; 1
    4630:	8a e8       	ldi	r24, 0x8A	; 138
    4632:	93 e0       	ldi	r25, 0x03	; 3
    4634:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        stopMinute = ((startTime - (stopHour * 60 * 60)) / 60);
        strcat(statusMsg, ":");
    4638:	61 ee       	ldi	r22, 0xE1	; 225
    463a:	71 e0       	ldi	r23, 0x01	; 1
    463c:	8a e8       	ldi	r24, 0x8A	; 138
    463e:	93 e0       	ldi	r25, 0x03	; 3
    4640:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        returnInt(stopMinute, tempLongString);
    4644:	66 e1       	ldi	r22, 0x16	; 22
    4646:	71 e0       	ldi	r23, 0x01	; 1
    4648:	29 85       	ldd	r18, Y+9	; 0x09
    464a:	3a 85       	ldd	r19, Y+10	; 0x0a
    464c:	c9 01       	movw	r24, r18
    464e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
        strcat(statusMsg, tempLongString);
    4652:	66 e1       	ldi	r22, 0x16	; 22
    4654:	71 e0       	ldi	r23, 0x01	; 1
    4656:	8a e8       	ldi	r24, 0x8A	; 138
    4658:	93 e0       	ldi	r25, 0x03	; 3
    465a:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        sendMessage(statusMsg);
    465e:	8a e8       	ldi	r24, 0x8A	; 138
    4660:	93 e0       	ldi	r25, 0x03	; 3
    4662:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
    4666:	94 c0       	rjmp	.+296    	; 0x4790 <setTimeLimits+0x2b8>

// sets the time limits for switches to affect progams
// TL:##HHMMHHMMddddddd
// 01234567890123456789

void setTimeLimits(char * commandReceived) {
    4668:	d6 01       	movw	r26, r12
    466a:	1d 96       	adiw	r26, 0x0d	; 13
    466c:	fe 01       	movw	r30, r28
    466e:	31 96       	adiw	r30, 0x01	; 1
    4670:	ce 01       	movw	r24, r28
    4672:	08 96       	adiw	r24, 0x08	; 8
        strcat(statusMsg, tempLongString);
        sendMessage(statusMsg);
        return;
    }
    for (x = 0; x < 7; x++) {
        tempReallyLongString[x] = commandReceived[x + 13];
    4674:	2d 91       	ld	r18, X+
    4676:	21 93       	st	Z+, r18
        returnInt(stopMinute, tempLongString);
        strcat(statusMsg, tempLongString);
        sendMessage(statusMsg);
        return;
    }
    for (x = 0; x < 7; x++) {
    4678:	e8 17       	cp	r30, r24
    467a:	f9 07       	cpc	r31, r25
    467c:	d9 f7       	brne	.-10     	; 0x4674 <setTimeLimits+0x19c>
        tempReallyLongString[x] = commandReceived[x + 13];
    }
    weekLong = strtol(tempReallyLongString, 0, 2);
    467e:	42 e0       	ldi	r20, 0x02	; 2
    4680:	50 e0       	ldi	r21, 0x00	; 0
    4682:	60 e0       	ldi	r22, 0x00	; 0
    4684:	70 e0       	ldi	r23, 0x00	; 0
    4686:	ce 01       	movw	r24, r28
    4688:	01 96       	adiw	r24, 0x01	; 1
    468a:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <strtol>
    468e:	2b 01       	movw	r4, r22
    4690:	3c 01       	movw	r6, r24
    tempIntString[0] = commandReceived[5];
    4692:	f6 01       	movw	r30, r12
    4694:	85 81       	ldd	r24, Z+5	; 0x05
    4696:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[6];
    469a:	86 81       	ldd	r24, Z+6	; 0x06
    469c:	80 93 0a 01 	sts	0x010A, r24
    startHour = atoi(tempIntString);
    46a0:	89 e0       	ldi	r24, 0x09	; 9
    46a2:	91 e0       	ldi	r25, 0x01	; 1
    46a4:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    46a8:	7c 01       	movw	r14, r24
    tempIntString[0] = commandReceived[7];
    46aa:	f6 01       	movw	r30, r12
    46ac:	87 81       	ldd	r24, Z+7	; 0x07
    46ae:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[8];
    46b2:	80 85       	ldd	r24, Z+8	; 0x08
    46b4:	80 93 0a 01 	sts	0x010A, r24
    startMinute = atoi(tempIntString);
    46b8:	89 e0       	ldi	r24, 0x09	; 9
    46ba:	91 e0       	ldi	r25, 0x01	; 1
    46bc:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    46c0:	4c 01       	movw	r8, r24
    tempIntString[0] = commandReceived[9];
    46c2:	f6 01       	movw	r30, r12
    46c4:	81 85       	ldd	r24, Z+9	; 0x09
    46c6:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[10];
    46ca:	82 85       	ldd	r24, Z+10	; 0x0a
    46cc:	80 93 0a 01 	sts	0x010A, r24
    stopHour = atoi(tempIntString);
    46d0:	89 e0       	ldi	r24, 0x09	; 9
    46d2:	91 e0       	ldi	r25, 0x01	; 1
    46d4:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    46d8:	1c 01       	movw	r2, r24
    tempIntString[0] = commandReceived[11];
    46da:	f6 01       	movw	r30, r12
    46dc:	83 85       	ldd	r24, Z+11	; 0x0b
    46de:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[12];
    46e2:	84 85       	ldd	r24, Z+12	; 0x0c
    46e4:	80 93 0a 01 	sts	0x010A, r24
    stopMinute = atoi(tempIntString);
    46e8:	89 e0       	ldi	r24, 0x09	; 9
    46ea:	91 e0       	ldi	r25, 0x01	; 1
    46ec:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    if (startHour > 23 || stopHour > 23) {
    46f0:	f8 e1       	ldi	r31, 0x18	; 24
    46f2:	ef 16       	cp	r14, r31
    46f4:	f1 04       	cpc	r15, r1
    46f6:	20 f4       	brcc	.+8      	; 0x4700 <setTimeLimits+0x228>
    46f8:	28 e1       	ldi	r18, 0x18	; 24
    46fa:	22 16       	cp	r2, r18
    46fc:	31 04       	cpc	r3, r1
    46fe:	18 f0       	brcs	.+6      	; 0x4706 <setTimeLimits+0x22e>
        fail(0x09);
    4700:	89 e0       	ldi	r24, 0x09	; 9
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	0a c0       	rjmp	.+20     	; 0x471a <setTimeLimits+0x242>
    tempIntString[0] = commandReceived[5];
    tempIntString[1] = commandReceived[6];
    startHour = atoi(tempIntString);
    tempIntString[0] = commandReceived[7];
    tempIntString[1] = commandReceived[8];
    startMinute = atoi(tempIntString);
    4706:	f4 01       	movw	r30, r8
    stopMinute = atoi(tempIntString);
    if (startHour > 23 || stopHour > 23) {
        fail(0x09);
        return;
    }
    if (startMinute > 59 || stopMinute > 59) {
    4708:	ec 33       	cpi	r30, 0x3C	; 60
    470a:	f1 05       	cpc	r31, r1
    470c:	20 f4       	brcc	.+8      	; 0x4716 <setTimeLimits+0x23e>
    tempIntString[0] = commandReceived[9];
    tempIntString[1] = commandReceived[10];
    stopHour = atoi(tempIntString);
    tempIntString[0] = commandReceived[11];
    tempIntString[1] = commandReceived[12];
    stopMinute = atoi(tempIntString);
    470e:	ac 01       	movw	r20, r24
    if (startHour > 23 || stopHour > 23) {
        fail(0x09);
        return;
    }
    if (startMinute > 59 || stopMinute > 59) {
    4710:	8c 33       	cpi	r24, 0x3C	; 60
    4712:	91 05       	cpc	r25, r1
    4714:	28 f0       	brcs	.+10     	; 0x4720 <setTimeLimits+0x248>
        fail(0x0A);
    4716:	8a e0       	ldi	r24, 0x0A	; 10
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	0e 94 28 1b 	call	0x3650	; 0x3650 <fail>
    471e:	38 c0       	rjmp	.+112    	; 0x4790 <setTimeLimits+0x2b8>
        return;
    }
    startTime = startHour;
    startTime = startTime * 60 * 60;
    4720:	97 01       	movw	r18, r14
    4722:	a0 e1       	ldi	r26, 0x10	; 16
    4724:	be e0       	ldi	r27, 0x0E	; 14
    4726:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__umulhisi3>
    472a:	6b 01       	movw	r12, r22
    472c:	7c 01       	movw	r14, r24
    startTime += (startMinute * 60);
    stopTime = stopHour;
    stopTime = stopTime * 60 * 60;
    472e:	91 01       	movw	r18, r2
    4730:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__umulhisi3>
    stopTime += (stopMinute * 60);
    timeLimits[programNumber][0] = startTime;
    4734:	2c e0       	ldi	r18, 0x0C	; 12
    4736:	20 9f       	mul	r18, r16
    4738:	d0 01       	movw	r26, r0
    473a:	21 9f       	mul	r18, r17
    473c:	b0 0d       	add	r27, r0
    473e:	11 24       	eor	r1, r1
    4740:	ac 59       	subi	r26, 0x9C	; 156
    4742:	bb 4f       	sbci	r27, 0xFB	; 251
        fail(0x0A);
        return;
    }
    startTime = startHour;
    startTime = startTime * 60 * 60;
    startTime += (startMinute * 60);
    4744:	2c e3       	ldi	r18, 0x3C	; 60
    4746:	28 9d       	mul	r18, r8
    4748:	80 01       	movw	r16, r0
    474a:	29 9d       	mul	r18, r9
    474c:	10 0d       	add	r17, r0
    474e:	11 24       	eor	r1, r1
    4750:	c0 0e       	add	r12, r16
    4752:	d1 1e       	adc	r13, r17
    4754:	e1 1c       	adc	r14, r1
    4756:	f1 1c       	adc	r15, r1
    stopTime = stopHour;
    stopTime = stopTime * 60 * 60;
    stopTime += (stopMinute * 60);
    timeLimits[programNumber][0] = startTime;
    4758:	cd 92       	st	X+, r12
    475a:	dd 92       	st	X+, r13
    475c:	ed 92       	st	X+, r14
    475e:	fc 92       	st	X, r15
    4760:	13 97       	sbiw	r26, 0x03	; 3
    startTime = startHour;
    startTime = startTime * 60 * 60;
    startTime += (startMinute * 60);
    stopTime = stopHour;
    stopTime = stopTime * 60 * 60;
    stopTime += (stopMinute * 60);
    4762:	24 9f       	mul	r18, r20
    4764:	f0 01       	movw	r30, r0
    4766:	25 9f       	mul	r18, r21
    4768:	f0 0d       	add	r31, r0
    476a:	11 24       	eor	r1, r1
    476c:	6e 0f       	add	r22, r30
    476e:	7f 1f       	adc	r23, r31
    4770:	81 1d       	adc	r24, r1
    4772:	91 1d       	adc	r25, r1
    timeLimits[programNumber][0] = startTime;
    timeLimits[programNumber][1] = stopTime;
    4774:	14 96       	adiw	r26, 0x04	; 4
    4776:	6d 93       	st	X+, r22
    4778:	7d 93       	st	X+, r23
    477a:	8d 93       	st	X+, r24
    477c:	9c 93       	st	X, r25
    477e:	17 97       	sbiw	r26, 0x07	; 7
    timeLimits[programNumber][2] = weekLong;
    4780:	18 96       	adiw	r26, 0x08	; 8
    4782:	4d 92       	st	X+, r4
    4784:	5d 92       	st	X+, r5
    4786:	6d 92       	st	X+, r6
    4788:	7c 92       	st	X, r7
    478a:	1b 97       	sbiw	r26, 0x0b	; 11
    ok();
    478c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <ok>

}
    4790:	2c 96       	adiw	r28, 0x0c	; 12
    4792:	0f b6       	in	r0, 0x3f	; 63
    4794:	f8 94       	cli
    4796:	de bf       	out	0x3e, r29	; 62
    4798:	0f be       	out	0x3f, r0	; 63
    479a:	cd bf       	out	0x3d, r28	; 61
    479c:	df 91       	pop	r29
    479e:	cf 91       	pop	r28
    47a0:	1f 91       	pop	r17
    47a2:	0f 91       	pop	r16
    47a4:	ff 90       	pop	r15
    47a6:	ef 90       	pop	r14
    47a8:	df 90       	pop	r13
    47aa:	cf 90       	pop	r12
    47ac:	bf 90       	pop	r11
    47ae:	af 90       	pop	r10
    47b0:	9f 90       	pop	r9
    47b2:	8f 90       	pop	r8
    47b4:	7f 90       	pop	r7
    47b6:	6f 90       	pop	r6
    47b8:	5f 90       	pop	r5
    47ba:	4f 90       	pop	r4
    47bc:	3f 90       	pop	r3
    47be:	2f 90       	pop	r2
    47c0:	08 95       	ret

000047c2 <newProgram>:

// Create a new program
// NP:HHMMDur.
// 0123456789012

void newProgram(char * commandReceived) {
    47c2:	af 92       	push	r10
    47c4:	bf 92       	push	r11
    47c6:	cf 92       	push	r12
    47c8:	df 92       	push	r13
    47ca:	ef 92       	push	r14
    47cc:	ff 92       	push	r15
    47ce:	0f 93       	push	r16
    47d0:	1f 93       	push	r17
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	ec 01       	movw	r28, r24
    47d8:	e1 ec       	ldi	r30, 0xC1	; 193
    47da:	f3 e0       	ldi	r31, 0x03	; 3
    int minutes = 0;
    int startTime = 0;
    int duration = 0;
    int x = 0;
    // find an open program;
    for (x = 0; x < MAX_PROGRAM; x++) {
    47dc:	00 e0       	ldi	r16, 0x00	; 0
    47de:	10 e0       	ldi	r17, 0x00	; 0

// Create a new program
// NP:HHMMDur.
// 0123456789012

void newProgram(char * commandReceived) {
    47e0:	df 01       	movw	r26, r30
    47e2:	11 97       	sbiw	r26, 0x01	; 1
    int duration = 0;
    int x = 0;
    // find an open program;
    for (x = 0; x < MAX_PROGRAM; x++) {
        // dont want it to wrap though 0 is a valid program
        if (weeklyProgram[x][0] == 255 && weeklyProgram[x][1] == 255) {
    47e4:	8c 91       	ld	r24, X
    47e6:	8f 3f       	cpi	r24, 0xFF	; 255
    47e8:	21 f4       	brne	.+8      	; 0x47f2 <newProgram+0x30>
    47ea:	80 81       	ld	r24, Z
    47ec:	8f 3f       	cpi	r24, 0xFF	; 255
    47ee:	09 f4       	brne	.+2      	; 0x47f2 <newProgram+0x30>
    47f0:	6b c0       	rjmp	.+214    	; 0x48c8 <newProgram+0x106>
    int minutes = 0;
    int startTime = 0;
    int duration = 0;
    int x = 0;
    // find an open program;
    for (x = 0; x < MAX_PROGRAM; x++) {
    47f2:	0f 5f       	subi	r16, 0xFF	; 255
    47f4:	1f 4f       	sbci	r17, 0xFF	; 255
    47f6:	3a 96       	adiw	r30, 0x0a	; 10
    47f8:	0a 30       	cpi	r16, 0x0A	; 10
    47fa:	11 05       	cpc	r17, r1
    47fc:	89 f7       	brne	.-30     	; 0x47e0 <newProgram+0x1e>
    47fe:	56 c0       	rjmp	.+172    	; 0x48ac <newProgram+0xea>
    tempLongString[0] = commandReceived[7];
    tempLongString[1] = commandReceived[8];
    tempLongString[2] = commandReceived[9];
    tempLongString[3] = commandReceived[10];
    duration = atoi(tempLongString);
    if (hours >= 24 || (hours == 0 && commandReceived[4] != '0')) {
    4800:	e1 14       	cp	r14, r1
    4802:	f1 04       	cpc	r15, r1
    4804:	31 f4       	brne	.+12     	; 0x4812 <newProgram+0x50>
    4806:	20 e3       	ldi	r18, 0x30	; 48
    4808:	a2 16       	cp	r10, r18
    480a:	19 f0       	breq	.+6      	; 0x4812 <newProgram+0x50>
        fail(9);
    480c:	89 e0       	ldi	r24, 0x09	; 9
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	4f c0       	rjmp	.+158    	; 0x48b0 <newProgram+0xee>
        return;
    }
    if (minutes >= 60 || (minutes == 0 && commandReceived[6] != '0')) {
    4812:	2c e3       	ldi	r18, 0x3C	; 60
    4814:	c2 16       	cp	r12, r18
    4816:	d1 04       	cpc	r13, r1
    4818:	34 f4       	brge	.+12     	; 0x4826 <newProgram+0x64>
    481a:	c1 14       	cp	r12, r1
    481c:	d1 04       	cpc	r13, r1
    481e:	31 f4       	brne	.+12     	; 0x482c <newProgram+0x6a>
    4820:	20 e3       	ldi	r18, 0x30	; 48
    4822:	b2 16       	cp	r11, r18
    4824:	19 f0       	breq	.+6      	; 0x482c <newProgram+0x6a>
        fail(0x0a);
    4826:	8a e0       	ldi	r24, 0x0A	; 10
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	42 c0       	rjmp	.+132    	; 0x48b0 <newProgram+0xee>
        return;
    }
    if (duration == 0) {
    482c:	00 97       	sbiw	r24, 0x00	; 0
    482e:	19 f4       	brne	.+6      	; 0x4836 <newProgram+0x74>
        fail(0x0b);
    4830:	8b e0       	ldi	r24, 0x0B	; 11
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	3d c0       	rjmp	.+122    	; 0x48b0 <newProgram+0xee>
        return;
    }
    duration *= 60; // convert to seconds
    4836:	6c e3       	ldi	r22, 0x3C	; 60
    4838:	68 9f       	mul	r22, r24
    483a:	a0 01       	movw	r20, r0
    483c:	69 9f       	mul	r22, r25
    483e:	50 0d       	add	r21, r0
    4840:	11 24       	eor	r1, r1
    startTime = (hours * 60);
    4842:	6e 9d       	mul	r22, r14
    4844:	90 01       	movw	r18, r0
    4846:	6f 9d       	mul	r22, r15
    4848:	30 0d       	add	r19, r0
    484a:	11 24       	eor	r1, r1
    startTime += minutes; // stored in minutes
    484c:	2c 0d       	add	r18, r12
    484e:	3d 1d       	adc	r19, r13
    int temp = 0;
    temp = (startTime >> 8);
    weeklyProgram[programNumber][1] = temp;
    4850:	8a e0       	ldi	r24, 0x0A	; 10
    4852:	80 9f       	mul	r24, r16
    4854:	f0 01       	movw	r30, r0
    4856:	81 9f       	mul	r24, r17
    4858:	f0 0d       	add	r31, r0
    485a:	11 24       	eor	r1, r1
    485c:	e0 54       	subi	r30, 0x40	; 64
    485e:	fc 4f       	sbci	r31, 0xFC	; 252
    4860:	31 83       	std	Z+1, r19	; 0x01
    temp = (startTime & 0xff);
    weeklyProgram[programNumber][2] = temp;
    4862:	22 83       	std	Z+2, r18	; 0x02
    temp = (duration >> 8);
    weeklyProgram[programNumber][3] = temp;
    4864:	53 83       	std	Z+3, r21	; 0x03
    temp = (duration & 0xff);
    4866:	55 27       	eor	r21, r21
    weeklyProgram[programNumber][4] = temp;
    4868:	44 83       	std	Z+4, r20	; 0x04
    statusMsg[0] = 0;
    486a:	10 92 8a 03 	sts	0x038A, r1
    strcat(statusMsg, "New prog#");
    486e:	60 e9       	ldi	r22, 0x90	; 144
    4870:	72 e0       	ldi	r23, 0x02	; 2
    4872:	8a e8       	ldi	r24, 0x8A	; 138
    4874:	93 e0       	ldi	r25, 0x03	; 3
    4876:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    returnInt(programNumber, tempIntString);
    487a:	69 e0       	ldi	r22, 0x09	; 9
    487c:	71 e0       	ldi	r23, 0x01	; 1
    487e:	c8 01       	movw	r24, r16
    4880:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <returnInt>
    strcat(statusMsg, tempIntString);
    4884:	69 e0       	ldi	r22, 0x09	; 9
    4886:	71 e0       	ldi	r23, 0x01	; 1
    4888:	8a e8       	ldi	r24, 0x8A	; 138
    488a:	93 e0       	ldi	r25, 0x03	; 3
    488c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
    sendMessage(statusMsg);
    4890:	8a e8       	ldi	r24, 0x8A	; 138
    4892:	93 e0       	ldi	r25, 0x03	; 3
}
    4894:	df 91       	pop	r29
    4896:	cf 91       	pop	r28
    4898:	1f 91       	pop	r17
    489a:	0f 91       	pop	r16
    489c:	ff 90       	pop	r15
    489e:	ef 90       	pop	r14
    48a0:	df 90       	pop	r13
    48a2:	cf 90       	pop	r12
    48a4:	bf 90       	pop	r11
    48a6:	af 90       	pop	r10
    weeklyProgram[programNumber][4] = temp;
    statusMsg[0] = 0;
    strcat(statusMsg, "New prog#");
    returnInt(programNumber, tempIntString);
    strcat(statusMsg, tempIntString);
    sendMessage(statusMsg);
    48a8:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>
            // end the loop
            break;
        }
    }
    if (programNumber == 255) {
        fail(8);
    48ac:	88 e0       	ldi	r24, 0x08	; 8
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    statusMsg[0] = 0;
    strcat(statusMsg, "New prog#");
    returnInt(programNumber, tempIntString);
    strcat(statusMsg, tempIntString);
    sendMessage(statusMsg);
}
    48b0:	df 91       	pop	r29
    48b2:	cf 91       	pop	r28
    48b4:	1f 91       	pop	r17
    48b6:	0f 91       	pop	r16
    48b8:	ff 90       	pop	r15
    48ba:	ef 90       	pop	r14
    48bc:	df 90       	pop	r13
    48be:	cf 90       	pop	r12
    48c0:	bf 90       	pop	r11
    48c2:	af 90       	pop	r10
            // end the loop
            break;
        }
    }
    if (programNumber == 255) {
        fail(8);
    48c4:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <fail>
        return;
    }
    clearTheProgram(programNumber);
    48c8:	c8 01       	movw	r24, r16
    48ca:	0e 94 a2 02 	call	0x544	; 0x544 <clearTheProgram>
    tempIntString[0] = commandReceived[3];
    48ce:	8b 81       	ldd	r24, Y+3	; 0x03
    48d0:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[4];
    48d4:	ac 80       	ldd	r10, Y+4	; 0x04
    48d6:	a0 92 0a 01 	sts	0x010A, r10
    hours = atoi(tempIntString);
    48da:	89 e0       	ldi	r24, 0x09	; 9
    48dc:	91 e0       	ldi	r25, 0x01	; 1
    48de:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    48e2:	7c 01       	movw	r14, r24
    tempIntString[0] = commandReceived[5];
    48e4:	8d 81       	ldd	r24, Y+5	; 0x05
    48e6:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[6];
    48ea:	be 80       	ldd	r11, Y+6	; 0x06
    48ec:	b0 92 0a 01 	sts	0x010A, r11
    minutes = atoi(tempIntString);
    48f0:	89 e0       	ldi	r24, 0x09	; 9
    48f2:	91 e0       	ldi	r25, 0x01	; 1
    48f4:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    48f8:	6c 01       	movw	r12, r24
    tempLongString[0] = commandReceived[7];
    48fa:	8f 81       	ldd	r24, Y+7	; 0x07
    48fc:	80 93 16 01 	sts	0x0116, r24
    tempLongString[1] = commandReceived[8];
    4900:	88 85       	ldd	r24, Y+8	; 0x08
    4902:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[9];
    4906:	89 85       	ldd	r24, Y+9	; 0x09
    4908:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[10];
    490c:	8a 85       	ldd	r24, Y+10	; 0x0a
    490e:	80 93 19 01 	sts	0x0119, r24
    duration = atoi(tempLongString);
    4912:	86 e1       	ldi	r24, 0x16	; 22
    4914:	91 e0       	ldi	r25, 0x01	; 1
    4916:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    if (hours >= 24 || (hours == 0 && commandReceived[4] != '0')) {
    491a:	28 e1       	ldi	r18, 0x18	; 24
    491c:	e2 16       	cp	r14, r18
    491e:	f1 04       	cpc	r15, r1
    4920:	0c f4       	brge	.+2      	; 0x4924 <newProgram+0x162>
    4922:	6e cf       	rjmp	.-292    	; 0x4800 <newProgram+0x3e>
    4924:	73 cf       	rjmp	.-282    	; 0x480c <newProgram+0x4a>

00004926 <switchBrightness>:
}

// assign a secondary brightness to a switch
// sb s#16

void switchBrightness(char * commandReceived) {
    4926:	ff 92       	push	r15
    4928:	0f 93       	push	r16
    492a:	1f 93       	push	r17
    492c:	cf 93       	push	r28
    492e:	df 93       	push	r29
    4930:	8c 01       	movw	r16, r24
    int switchNumber = getSwitchNumber(commandReceived);
    4932:	0e 94 5a 00 	call	0xb4	; 0xb4 <getSwitchNumber>
    4936:	ec 01       	movw	r28, r24
    char tempBright = 0;
    if (switchNumber >= NUM_SWITCHES) {
    4938:	80 31       	cpi	r24, 0x10	; 16
    493a:	91 05       	cpc	r25, r1
    493c:	4c f0       	brlt	.+18     	; 0x4950 <switchBrightness+0x2a>
        fail(1);
    493e:	81 e0       	ldi	r24, 0x01	; 1
    4940:	90 e0       	ldi	r25, 0x00	; 0
        // value to indicate this is brightness
        switchStuff[switchNumber] = 212;
        switchBright[switchNumber] = brightValue;
        ok();
    }
}
    4942:	df 91       	pop	r29
    4944:	cf 91       	pop	r28
    4946:	1f 91       	pop	r17
    4948:	0f 91       	pop	r16
    494a:	ff 90       	pop	r15

void switchBrightness(char * commandReceived) {
    int switchNumber = getSwitchNumber(commandReceived);
    char tempBright = 0;
    if (switchNumber >= NUM_SWITCHES) {
        fail(1);
    494c:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <fail>
        return;
    }
    tempIntString[0] = commandReceived[5];
    4950:	f8 01       	movw	r30, r16
    4952:	85 81       	ldd	r24, Z+5	; 0x05
    4954:	80 93 09 01 	sts	0x0109, r24
    tempIntString[1] = commandReceived[6];
    4958:	86 81       	ldd	r24, Z+6	; 0x06
    495a:	80 93 0a 01 	sts	0x010A, r24
    char brightValue = atoi(tempIntString);
    495e:	89 e0       	ldi	r24, 0x09	; 9
    4960:	91 e0       	ldi	r25, 0x01	; 1
    4962:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    4966:	f8 2e       	mov	r15, r24
    4968:	8e 01       	movw	r16, r28
    496a:	00 5b       	subi	r16, 0xB0	; 176
    496c:	1c 4f       	sbci	r17, 0xFC	; 252
    if (brightValue == 0) {
    496e:	81 11       	cpse	r24, r1
    4970:	20 c0       	rjmp	.+64     	; 0x49b2 <switchBrightness+0x8c>
        tempBright = switchBright[switchNumber];
        itoa(tempBright, tempIntString, 10);
    4972:	4a e0       	ldi	r20, 0x0A	; 10
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	69 e0       	ldi	r22, 0x09	; 9
    4978:	71 e0       	ldi	r23, 0x01	; 1
    497a:	f8 01       	movw	r30, r16
    497c:	80 81       	ld	r24, Z
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <itoa>
        statusMsg[0] = 0;
    4984:	10 92 8a 03 	sts	0x038A, r1
        strcat(statusMsg, "Set @");
    4988:	6a e6       	ldi	r22, 0x6A	; 106
    498a:	72 e0       	ldi	r23, 0x02	; 2
    498c:	8a e8       	ldi	r24, 0x8A	; 138
    498e:	93 e0       	ldi	r25, 0x03	; 3
    4990:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        strcat(statusMsg, tempIntString);
    4994:	69 e0       	ldi	r22, 0x09	; 9
    4996:	71 e0       	ldi	r23, 0x01	; 1
    4998:	8a e8       	ldi	r24, 0x8A	; 138
    499a:	93 e0       	ldi	r25, 0x03	; 3
    499c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <strcat>
        sendMessage(statusMsg);
    49a0:	8a e8       	ldi	r24, 0x8A	; 138
    49a2:	93 e0       	ldi	r25, 0x03	; 3
        // value to indicate this is brightness
        switchStuff[switchNumber] = 212;
        switchBright[switchNumber] = brightValue;
        ok();
    }
}
    49a4:	df 91       	pop	r29
    49a6:	cf 91       	pop	r28
    49a8:	1f 91       	pop	r17
    49aa:	0f 91       	pop	r16
    49ac:	ff 90       	pop	r15
        tempBright = switchBright[switchNumber];
        itoa(tempBright, tempIntString, 10);
        statusMsg[0] = 0;
        strcat(statusMsg, "Set @");
        strcat(statusMsg, tempIntString);
        sendMessage(statusMsg);
    49ae:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <sendMessage>
    } else {
        if (brightValue > 16)
            brightValue = 16;
        clearTheSwitch(switchNumber);
    49b2:	ce 01       	movw	r24, r28
    49b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <clearTheSwitch>
        // value to indicate this is brightness
        switchStuff[switchNumber] = 212;
    49b8:	c0 5c       	subi	r28, 0xC0	; 192
    49ba:	dc 4f       	sbci	r29, 0xFC	; 252
    49bc:	84 ed       	ldi	r24, 0xD4	; 212
    49be:	88 83       	st	Y, r24
        switchBright[switchNumber] = brightValue;
    49c0:	8f 2d       	mov	r24, r15
    49c2:	81 31       	cpi	r24, 0x11	; 17
    49c4:	08 f0       	brcs	.+2      	; 0x49c8 <switchBrightness+0xa2>
    49c6:	80 e1       	ldi	r24, 0x10	; 16
    49c8:	f8 01       	movw	r30, r16
    49ca:	80 83       	st	Z, r24
        ok();
    }
}
    49cc:	df 91       	pop	r29
    49ce:	cf 91       	pop	r28
    49d0:	1f 91       	pop	r17
    49d2:	0f 91       	pop	r16
    49d4:	ff 90       	pop	r15
            brightValue = 16;
        clearTheSwitch(switchNumber);
        // value to indicate this is brightness
        switchStuff[switchNumber] = 212;
        switchBright[switchNumber] = brightValue;
        ok();
    49d6:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <ok>

000049da <radioTest>:
    startRadio();

}

// radio test - just make sure it is still working
int radioTest(void) {
    49da:	af 92       	push	r10
    49dc:	bf 92       	push	r11
    49de:	cf 92       	push	r12
    49e0:	df 92       	push	r13
    49e2:	ef 92       	push	r14
    49e4:	ff 92       	push	r15
    49e6:	0f 93       	push	r16
    49e8:	1f 93       	push	r17
    uint64_t test_addr;
    test_addr = readAddr(RX_ADDR_P0);    
    49ea:	8a e0       	ldi	r24, 0x0A	; 10
    49ec:	0e 94 f5 28 	call	0x51ea	; 0x51ea <readAddr>
    if (test_addr != rx_addr_p0) {
    49f0:	a0 90 2c 04 	lds	r10, 0x042C
    49f4:	b0 90 2d 04 	lds	r11, 0x042D
    49f8:	c0 90 2e 04 	lds	r12, 0x042E
    49fc:	d0 90 2f 04 	lds	r13, 0x042F
    4a00:	e0 90 30 04 	lds	r14, 0x0430
    4a04:	f0 90 31 04 	lds	r15, 0x0431
    4a08:	00 91 32 04 	lds	r16, 0x0432
    4a0c:	10 91 33 04 	lds	r17, 0x0433
    4a10:	0e 94 56 2f 	call	0x5eac	; 0x5eac <__cmpdi2>
    4a14:	31 f0       	breq	.+12     	; 0x4a22 <radioTest+0x48>
        // nope.  broken
        failCondition = 1;
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	80 93 00 01 	sts	0x0100, r24
        return -1;
    4a1c:	2f ef       	ldi	r18, 0xFF	; 255
    4a1e:	3f ef       	ldi	r19, 0xFF	; 255
    4a20:	09 c0       	rjmp	.+18     	; 0x4a34 <radioTest+0x5a>
    }
    if(failCondition == 1 || failCondition == 2)
    4a22:	80 91 00 01 	lds	r24, 0x0100
    4a26:	81 50       	subi	r24, 0x01	; 1
    4a28:	82 30       	cpi	r24, 0x02	; 2
    4a2a:	10 f4       	brcc	.+4      	; 0x4a30 <radioTest+0x56>
        clearFail();
    4a2c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <clearFail>
    return 1;
    4a30:	21 e0       	ldi	r18, 0x01	; 1
    4a32:	30 e0       	ldi	r19, 0x00	; 0
}
    4a34:	c9 01       	movw	r24, r18
    4a36:	1f 91       	pop	r17
    4a38:	0f 91       	pop	r16
    4a3a:	ff 90       	pop	r15
    4a3c:	ef 90       	pop	r14
    4a3e:	df 90       	pop	r13
    4a40:	cf 90       	pop	r12
    4a42:	bf 90       	pop	r11
    4a44:	af 90       	pop	r10
    4a46:	08 95       	ret

00004a48 <radioInit>:
 *
 ****************************************************************/

// initialize the radio

void radioInit(void) {
    4a48:	0f 93       	push	r16
    4a4a:	1f 93       	push	r17
    nrfInit();
    4a4c:	0e 94 4d 2b 	call	0x569a	; 0x569a <nrfInit>
    rx_addr_p0 = SET_RX_ADDR_P0;
    4a50:	92 e0       	ldi	r25, 0x02	; 2
    4a52:	90 93 2c 04 	sts	0x042C, r25
    4a56:	80 ef       	ldi	r24, 0xF0	; 240
    4a58:	80 93 2d 04 	sts	0x042D, r24
    4a5c:	80 93 2e 04 	sts	0x042E, r24
    4a60:	80 93 2f 04 	sts	0x042F, r24
    4a64:	80 93 30 04 	sts	0x0430, r24
    4a68:	10 92 31 04 	sts	0x0431, r1
    4a6c:	10 92 32 04 	sts	0x0432, r1
    4a70:	10 92 33 04 	sts	0x0433, r1
    tx_addr = SET_TX_ADDR;
    4a74:	90 93 24 04 	sts	0x0424, r25
    4a78:	80 93 25 04 	sts	0x0425, r24
    4a7c:	80 93 26 04 	sts	0x0426, r24
    4a80:	80 93 27 04 	sts	0x0427, r24
    4a84:	80 93 28 04 	sts	0x0428, r24
    4a88:	10 92 29 04 	sts	0x0429, r1
    4a8c:	10 92 2a 04 	sts	0x042A, r1
    4a90:	10 92 2b 04 	sts	0x042B, r1
    // use defaults the radio has
    rx_addr_p1 = readAddr(RX_ADDR_P1);
    4a94:	8b e0       	ldi	r24, 0x0B	; 11
    4a96:	0e 94 f5 28 	call	0x51ea	; 0x51ea <readAddr>
    4a9a:	20 93 34 04 	sts	0x0434, r18
    4a9e:	30 93 35 04 	sts	0x0435, r19
    4aa2:	40 93 36 04 	sts	0x0436, r20
    4aa6:	50 93 37 04 	sts	0x0437, r21
    4aaa:	60 93 38 04 	sts	0x0438, r22
    4aae:	70 93 39 04 	sts	0x0439, r23
    4ab2:	80 93 3a 04 	sts	0x043A, r24
    4ab6:	90 93 3b 04 	sts	0x043B, r25
    rx_addr_p2 = readAddr(RX_ADDR_P2);
    4aba:	8c e0       	ldi	r24, 0x0C	; 12
    4abc:	0e 94 f5 28 	call	0x51ea	; 0x51ea <readAddr>
    4ac0:	20 93 3c 04 	sts	0x043C, r18
    4ac4:	30 93 3d 04 	sts	0x043D, r19
    4ac8:	40 93 3e 04 	sts	0x043E, r20
    4acc:	50 93 3f 04 	sts	0x043F, r21
    4ad0:	60 93 40 04 	sts	0x0440, r22
    4ad4:	70 93 41 04 	sts	0x0441, r23
    4ad8:	80 93 42 04 	sts	0x0442, r24
    4adc:	90 93 43 04 	sts	0x0443, r25
    rx_addr_p3 = readAddr(RX_ADDR_P3);
    4ae0:	8d e0       	ldi	r24, 0x0D	; 13
    4ae2:	0e 94 f5 28 	call	0x51ea	; 0x51ea <readAddr>
    4ae6:	20 93 44 04 	sts	0x0444, r18
    4aea:	30 93 45 04 	sts	0x0445, r19
    4aee:	40 93 46 04 	sts	0x0446, r20
    4af2:	50 93 47 04 	sts	0x0447, r21
    4af6:	60 93 48 04 	sts	0x0448, r22
    4afa:	70 93 49 04 	sts	0x0449, r23
    4afe:	80 93 4a 04 	sts	0x044A, r24
    4b02:	90 93 4b 04 	sts	0x044B, r25
    rx_addr_p4 = readAddr(RX_ADDR_P4);
    4b06:	8e e0       	ldi	r24, 0x0E	; 14
    4b08:	0e 94 f5 28 	call	0x51ea	; 0x51ea <readAddr>
    4b0c:	20 93 4c 04 	sts	0x044C, r18
    4b10:	30 93 4d 04 	sts	0x044D, r19
    4b14:	40 93 4e 04 	sts	0x044E, r20
    4b18:	50 93 4f 04 	sts	0x044F, r21
    4b1c:	60 93 50 04 	sts	0x0450, r22
    4b20:	70 93 51 04 	sts	0x0451, r23
    4b24:	80 93 52 04 	sts	0x0452, r24
    4b28:	90 93 53 04 	sts	0x0453, r25
    rx_addr_p5 = readAddr(RX_ADDR_P5);
    4b2c:	8f e0       	ldi	r24, 0x0F	; 15
    4b2e:	0e 94 f5 28 	call	0x51ea	; 0x51ea <readAddr>
    4b32:	20 93 54 04 	sts	0x0454, r18
    4b36:	30 93 55 04 	sts	0x0455, r19
    4b3a:	40 93 56 04 	sts	0x0456, r20
    4b3e:	50 93 57 04 	sts	0x0457, r21
    4b42:	60 93 58 04 	sts	0x0458, r22
    4b46:	70 93 59 04 	sts	0x0459, r23
    4b4a:	80 93 5a 04 	sts	0x045A, r24
    4b4e:	90 93 5b 04 	sts	0x045B, r25

    writeReg(RF_SETUP, SET_RF_SETUP);
    4b52:	66 e0       	ldi	r22, 0x06	; 6
    4b54:	86 e0       	ldi	r24, 0x06	; 6
    4b56:	0e 94 b8 28 	call	0x5170	; 0x5170 <writeReg>
    writeAddr(RX_ADDR_P0, rx_addr_p0);
    4b5a:	00 91 2c 04 	lds	r16, 0x042C
    4b5e:	10 91 2d 04 	lds	r17, 0x042D
    4b62:	20 91 2e 04 	lds	r18, 0x042E
    4b66:	30 91 2f 04 	lds	r19, 0x042F
    4b6a:	40 91 30 04 	lds	r20, 0x0430
    4b6e:	50 91 31 04 	lds	r21, 0x0431
    4b72:	60 91 32 04 	lds	r22, 0x0432
    4b76:	70 91 33 04 	lds	r23, 0x0433
    4b7a:	8a e0       	ldi	r24, 0x0A	; 10
    4b7c:	0e 94 47 29 	call	0x528e	; 0x528e <writeAddr>
    writeAddr(TX_ADDR, tx_addr);
    4b80:	00 91 24 04 	lds	r16, 0x0424
    4b84:	10 91 25 04 	lds	r17, 0x0425
    4b88:	20 91 26 04 	lds	r18, 0x0426
    4b8c:	30 91 27 04 	lds	r19, 0x0427
    4b90:	40 91 28 04 	lds	r20, 0x0428
    4b94:	50 91 29 04 	lds	r21, 0x0429
    4b98:	60 91 2a 04 	lds	r22, 0x042A
    4b9c:	70 91 2b 04 	lds	r23, 0x042B
    4ba0:	80 e1       	ldi	r24, 0x10	; 16
    4ba2:	0e 94 47 29 	call	0x528e	; 0x528e <writeAddr>
    writeReg(DYNPD, SET_DYNPD);
    4ba6:	6f e3       	ldi	r22, 0x3F	; 63
    4ba8:	8c e1       	ldi	r24, 0x1C	; 28
    4baa:	0e 94 b8 28 	call	0x5170	; 0x5170 <writeReg>
    writeReg(FEATURE, SET_FEATURE);
    4bae:	64 e0       	ldi	r22, 0x04	; 4
    4bb0:	8d e1       	ldi	r24, 0x1D	; 29
    4bb2:	0e 94 b8 28 	call	0x5170	; 0x5170 <writeReg>
    writeReg(RF_CH, SET_RF_CH);
    4bb6:	6a e2       	ldi	r22, 0x2A	; 42
    4bb8:	85 e0       	ldi	r24, 0x05	; 5
    4bba:	0e 94 b8 28 	call	0x5170	; 0x5170 <writeReg>
    writeReg(CONFIG, SET_CONFIG);
    4bbe:	68 e0       	ldi	r22, 0x08	; 8
    4bc0:	80 e0       	ldi	r24, 0x00	; 0
    4bc2:	0e 94 b8 28 	call	0x5170	; 0x5170 <writeReg>
    writeReg(SETUP_RETR, SET_SETUP_RETR);
    4bc6:	6f e0       	ldi	r22, 0x0F	; 15
    4bc8:	84 e0       	ldi	r24, 0x04	; 4
    4bca:	0e 94 b8 28 	call	0x5170	; 0x5170 <writeReg>

    // We've written the address - now see if we get the same result
    radioTest();
    4bce:	0e 94 ed 24 	call	0x49da	; 0x49da <radioTest>
    
    startRadio();

}
    4bd2:	1f 91       	pop	r17
    4bd4:	0f 91       	pop	r16
    writeReg(SETUP_RETR, SET_SETUP_RETR);

    // We've written the address - now see if we get the same result
    radioTest();
    
    startRadio();
    4bd6:	0c 94 ed 28 	jmp	0x51da	; 0x51da <startRadio>

00004bda <setClock>:
// we received a time command.  set the clock
// Must be this format:
// TI:MMDDYYYYHHMMSS
// 012345678901234567

void setClock(char * commandReceived) {
    4bda:	6f 92       	push	r6
    4bdc:	7f 92       	push	r7
    4bde:	8f 92       	push	r8
    4be0:	9f 92       	push	r9
    4be2:	af 92       	push	r10
    4be4:	bf 92       	push	r11
    4be6:	cf 92       	push	r12
    4be8:	df 92       	push	r13
    4bea:	ef 92       	push	r14
    4bec:	ff 92       	push	r15
    4bee:	0f 93       	push	r16
    4bf0:	1f 93       	push	r17
    4bf2:	cf 93       	push	r28
    4bf4:	df 93       	push	r29
    4bf6:	ec 01       	movw	r28, r24
    long tempInt;
    // iterate through and get the times.
    tempLongString[0] = '0';
    4bf8:	80 e3       	ldi	r24, 0x30	; 48
    4bfa:	80 93 16 01 	sts	0x0116, r24
    tempLongString[1] = '0';
    4bfe:	80 93 17 01 	sts	0x0117, r24
    // Can't see a good loop so just get to it.
    // Month
    tempLongString[2] = commandReceived[3];
    4c02:	8b 81       	ldd	r24, Y+3	; 0x03
    4c04:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[4];
    4c08:	8c 81       	ldd	r24, Y+4	; 0x04
    4c0a:	80 93 19 01 	sts	0x0119, r24
    globalMonth = atoi(tempLongString);
    4c0e:	86 e1       	ldi	r24, 0x16	; 22
    4c10:	91 e0       	ldi	r25, 0x01	; 1
    4c12:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    4c16:	6c 01       	movw	r12, r24
    4c18:	90 93 fd 02 	sts	0x02FD, r25
    4c1c:	80 93 fc 02 	sts	0x02FC, r24
    // Day
    tempLongString[2] = commandReceived[5];
    4c20:	8d 81       	ldd	r24, Y+5	; 0x05
    4c22:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[6];
    4c26:	8e 81       	ldd	r24, Y+6	; 0x06
    4c28:	80 93 19 01 	sts	0x0119, r24
    globalDay = atoi(tempLongString);
    4c2c:	86 e1       	ldi	r24, 0x16	; 22
    4c2e:	91 e0       	ldi	r25, 0x01	; 1
    4c30:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    4c34:	8c 01       	movw	r16, r24
    4c36:	90 93 fb 02 	sts	0x02FB, r25
    4c3a:	80 93 fa 02 	sts	0x02FA, r24
    // hour
    tempLongString[2] = commandReceived[11];
    4c3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c40:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[12];
    4c44:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c46:	80 93 19 01 	sts	0x0119, r24
    globalHour = atoi(tempLongString);
    4c4a:	86 e1       	ldi	r24, 0x16	; 22
    4c4c:	91 e0       	ldi	r25, 0x01	; 1
    4c4e:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    4c52:	4c 01       	movw	r8, r24
    4c54:	80 93 f8 02 	sts	0x02F8, r24
    4c58:	90 92 f9 02 	sts	0x02F9, r9
    // minute
    tempLongString[2] = commandReceived[13];
    4c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c5e:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[14];
    4c62:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c64:	80 93 19 01 	sts	0x0119, r24
    globalMinute = atoi(tempLongString);
    4c68:	86 e1       	ldi	r24, 0x16	; 22
    4c6a:	91 e0       	ldi	r25, 0x01	; 1
    4c6c:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    4c70:	5c 01       	movw	r10, r24
    4c72:	80 93 f6 02 	sts	0x02F6, r24
    4c76:	b0 92 f7 02 	sts	0x02F7, r11
    // second
    tempLongString[2] = commandReceived[15];
    4c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c7c:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[16];
    4c80:	88 89       	ldd	r24, Y+16	; 0x10
    4c82:	80 93 19 01 	sts	0x0119, r24
    globalSecond = atoi(tempLongString);
    4c86:	86 e1       	ldi	r24, 0x16	; 22
    4c88:	91 e0       	ldi	r25, 0x01	; 1
    4c8a:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    4c8e:	3c 01       	movw	r6, r24
    4c90:	90 93 f5 02 	sts	0x02F5, r25
    4c94:	80 93 f4 02 	sts	0x02F4, r24
    // year
    tempLongString[0] = commandReceived[7];
    4c98:	8f 81       	ldd	r24, Y+7	; 0x07
    4c9a:	80 93 16 01 	sts	0x0116, r24
    tempLongString[1] = commandReceived[8];
    4c9e:	88 85       	ldd	r24, Y+8	; 0x08
    4ca0:	80 93 17 01 	sts	0x0117, r24
    tempLongString[2] = commandReceived[9];
    4ca4:	89 85       	ldd	r24, Y+9	; 0x09
    4ca6:	80 93 18 01 	sts	0x0118, r24
    tempLongString[3] = commandReceived[10];
    4caa:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cac:	80 93 19 01 	sts	0x0119, r24
    globalYear = atoi(tempLongString);
    4cb0:	86 e1       	ldi	r24, 0x16	; 22
    4cb2:	91 e0       	ldi	r25, 0x01	; 1
    4cb4:	0e 94 82 30 	call	0x6104	; 0x6104 <atoi>
    4cb8:	90 93 ff 02 	sts	0x02FF, r25
    4cbc:	80 93 fe 02 	sts	0x02FE, r24
    dow = getWeekday(globalYear, globalMonth, globalDay); // get day of week
    4cc0:	a8 01       	movw	r20, r16
    4cc2:	b6 01       	movw	r22, r12
    4cc4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <getWeekday>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	80 93 f2 02 	sts	0x02F2, r24
    4cce:	b0 93 f3 02 	sts	0x02F3, r27
    tempInt = dow;
    tempInt = tempInt * 24 * 60 * 60;
    4cd2:	20 e8       	ldi	r18, 0x80	; 128
    4cd4:	31 e5       	ldi	r19, 0x51	; 81
    4cd6:	41 e0       	ldi	r20, 0x01	; 1
    4cd8:	50 e0       	ldi	r21, 0x00	; 0
    4cda:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <__muluhisi3>
    4cde:	6b 01       	movw	r12, r22
    4ce0:	7c 01       	movw	r14, r24
    weeklySeconds = tempInt;
    tempInt = globalHour;
    tempInt = tempInt * 60 * 60;
    4ce2:	94 01       	movw	r18, r8
    4ce4:	a0 e1       	ldi	r26, 0x10	; 16
    4ce6:	be e0       	ldi	r27, 0x0E	; 14
    4ce8:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__umulhisi3>
    weeklySeconds += tempInt;
    4cec:	c6 0e       	add	r12, r22
    4cee:	d7 1e       	adc	r13, r23
    4cf0:	e8 1e       	adc	r14, r24
    4cf2:	f9 1e       	adc	r15, r25
    tempInt = globalMinute;
    tempInt = tempInt * 60;
    weeklySeconds += tempInt;
    4cf4:	c6 0c       	add	r12, r6
    4cf6:	d7 1c       	adc	r13, r7
    4cf8:	e1 1c       	adc	r14, r1
    4cfa:	f1 1c       	adc	r15, r1
    weeklySeconds = tempInt;
    tempInt = globalHour;
    tempInt = tempInt * 60 * 60;
    weeklySeconds += tempInt;
    tempInt = globalMinute;
    tempInt = tempInt * 60;
    4cfc:	95 01       	movw	r18, r10
    4cfe:	ac e3       	ldi	r26, 0x3C	; 60
    4d00:	b0 e0       	ldi	r27, 0x00	; 0
    4d02:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__umulhisi3>
    weeklySeconds += tempInt;
    weeklySeconds += globalSecond;
    4d06:	c6 0e       	add	r12, r22
    4d08:	d7 1e       	adc	r13, r23
    4d0a:	e8 1e       	adc	r14, r24
    4d0c:	f9 1e       	adc	r15, r25
    4d0e:	c0 92 aa 03 	sts	0x03AA, r12
    4d12:	d0 92 ab 03 	sts	0x03AB, r13
    4d16:	e0 92 ac 03 	sts	0x03AC, r14
    4d1a:	f0 92 ad 03 	sts	0x03AD, r15
    clockString();
    4d1e:	0e 94 17 07 	call	0xe2e	; 0xe2e <clockString>
    sendMessage(statusMsg);
    4d22:	8a e8       	ldi	r24, 0x8A	; 138
    4d24:	93 e0       	ldi	r25, 0x03	; 3
    4d26:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sendMessage>
    stopClock();
    4d2a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <stopClock>
    startClock();
    4d2e:	0e 94 cf 03 	call	0x79e	; 0x79e <startClock>
    panicMyClockIsNotSet = 0;
    4d32:	10 92 01 01 	sts	0x0101, r1
    if(failCondition == 3) {
    4d36:	80 91 00 01 	lds	r24, 0x0100
    4d3a:	83 30       	cpi	r24, 0x03	; 3
    4d3c:	81 f4       	brne	.+32     	; 0x4d5e <setClock+0x184>
        clearFail();      
    }
}
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	1f 91       	pop	r17
    4d44:	0f 91       	pop	r16
    4d46:	ff 90       	pop	r15
    4d48:	ef 90       	pop	r14
    4d4a:	df 90       	pop	r13
    4d4c:	cf 90       	pop	r12
    4d4e:	bf 90       	pop	r11
    4d50:	af 90       	pop	r10
    4d52:	9f 90       	pop	r9
    4d54:	8f 90       	pop	r8
    4d56:	7f 90       	pop	r7
    4d58:	6f 90       	pop	r6
    sendMessage(statusMsg);
    stopClock();
    startClock();
    panicMyClockIsNotSet = 0;
    if(failCondition == 3) {
        clearFail();      
    4d5a:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <clearFail>
    }
}
    4d5e:	df 91       	pop	r29
    4d60:	cf 91       	pop	r28
    4d62:	1f 91       	pop	r17
    4d64:	0f 91       	pop	r16
    4d66:	ff 90       	pop	r15
    4d68:	ef 90       	pop	r14
    4d6a:	df 90       	pop	r13
    4d6c:	cf 90       	pop	r12
    4d6e:	bf 90       	pop	r11
    4d70:	af 90       	pop	r10
    4d72:	9f 90       	pop	r9
    4d74:	8f 90       	pop	r8
    4d76:	7f 90       	pop	r7
    4d78:	6f 90       	pop	r6
    4d7a:	08 95       	ret

00004d7c <checkCommand>:
 *              All Things Command and Interface Related
 *
 ****************************************************************/

void checkCommand(char * commandReceived) {
    if (commandReceived[0] > 0x60)
    4d7c:	fc 01       	movw	r30, r24
    4d7e:	20 81       	ld	r18, Z
    4d80:	21 36       	cpi	r18, 0x61	; 97
    4d82:	10 f0       	brcs	.+4      	; 0x4d88 <checkCommand+0xc>
        commandReceived[0] -= 0x20;
    4d84:	20 52       	subi	r18, 0x20	; 32
    4d86:	20 83       	st	Z, r18
    if (commandReceived[1] > 0x60)
    4d88:	fc 01       	movw	r30, r24
    4d8a:	21 81       	ldd	r18, Z+1	; 0x01
    4d8c:	21 36       	cpi	r18, 0x61	; 97
    4d8e:	10 f0       	brcs	.+4      	; 0x4d94 <checkCommand+0x18>
        commandReceived[1] -= 0x20;
    4d90:	20 52       	subi	r18, 0x20	; 32
    4d92:	21 83       	std	Z+1, r18	; 0x01
    int switchme = commandReceived[0];
    switchme <<= 8;
    4d94:	fc 01       	movw	r30, r24
    4d96:	30 81       	ld	r19, Z
    4d98:	20 e0       	ldi	r18, 0x00	; 0
    switchme |= commandReceived[1];
    4d9a:	41 81       	ldd	r20, Z+1	; 0x01
    4d9c:	24 2b       	or	r18, r20
    switch (switchme) {
    4d9e:	29 34       	cpi	r18, 0x49	; 73
    4da0:	f0 e5       	ldi	r31, 0x50	; 80
    4da2:	3f 07       	cpc	r19, r31
    4da4:	09 f4       	brne	.+2      	; 0x4da8 <checkCommand+0x2c>
    4da6:	d8 c0       	rjmp	.+432    	; 0x4f58 <checkCommand+0x1dc>
    4da8:	0c f0       	brlt	.+2      	; 0x4dac <checkCommand+0x30>
    4daa:	60 c0       	rjmp	.+192    	; 0x4e6c <checkCommand+0xf0>
    4dac:	29 34       	cpi	r18, 0x49	; 73
    4dae:	e4 e4       	ldi	r30, 0x44	; 68
    4db0:	3e 07       	cpc	r19, r30
    4db2:	09 f4       	brne	.+2      	; 0x4db6 <checkCommand+0x3a>
    4db4:	e3 c0       	rjmp	.+454    	; 0x4f7c <checkCommand+0x200>
    4db6:	54 f5       	brge	.+84     	; 0x4e0c <checkCommand+0x90>
    4db8:	28 34       	cpi	r18, 0x48	; 72
    4dba:	43 e4       	ldi	r20, 0x43	; 67
    4dbc:	34 07       	cpc	r19, r20
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <checkCommand+0x46>
    4dc0:	bb c0       	rjmp	.+374    	; 0x4f38 <checkCommand+0x1bc>
    4dc2:	7c f4       	brge	.+30     	; 0x4de2 <checkCommand+0x66>
    4dc4:	23 35       	cpi	r18, 0x53	; 83
    4dc6:	f2 e4       	ldi	r31, 0x42	; 66
    4dc8:	3f 07       	cpc	r19, r31
    4dca:	09 f4       	brne	.+2      	; 0x4dce <checkCommand+0x52>
    4dcc:	e5 c0       	rjmp	.+458    	; 0x4f98 <checkCommand+0x21c>
    4dce:	23 34       	cpi	r18, 0x43	; 67
    4dd0:	43 e4       	ldi	r20, 0x43	; 67
    4dd2:	34 07       	cpc	r19, r20
    4dd4:	09 f4       	brne	.+2      	; 0x4dd8 <checkCommand+0x5c>
    4dd6:	dc c0       	rjmp	.+440    	; 0x4f90 <checkCommand+0x214>
    4dd8:	29 34       	cpi	r18, 0x49	; 73
    4dda:	31 44       	sbci	r19, 0x41	; 65
    4ddc:	09 f0       	breq	.+2      	; 0x4de0 <checkCommand+0x64>
    4dde:	e8 c0       	rjmp	.+464    	; 0x4fb0 <checkCommand+0x234>
    4de0:	cb c0       	rjmp	.+406    	; 0x4f78 <checkCommand+0x1fc>
    4de2:	2c 34       	cpi	r18, 0x4C	; 76
    4de4:	f3 e4       	ldi	r31, 0x43	; 67
    4de6:	3f 07       	cpc	r19, r31
    4de8:	09 f4       	brne	.+2      	; 0x4dec <checkCommand+0x70>
    4dea:	c0 c0       	rjmp	.+384    	; 0x4f6c <checkCommand+0x1f0>
    4dec:	2c f4       	brge	.+10     	; 0x4df8 <checkCommand+0x7c>
    4dee:	29 34       	cpi	r18, 0x49	; 73
    4df0:	33 44       	sbci	r19, 0x43	; 67
    4df2:	09 f0       	breq	.+2      	; 0x4df6 <checkCommand+0x7a>
    4df4:	dd c0       	rjmp	.+442    	; 0x4fb0 <checkCommand+0x234>
    4df6:	c4 c0       	rjmp	.+392    	; 0x4f80 <checkCommand+0x204>
    4df8:	20 35       	cpi	r18, 0x50	; 80
    4dfa:	f3 e4       	ldi	r31, 0x43	; 67
    4dfc:	3f 07       	cpc	r19, r31
    4dfe:	09 f4       	brne	.+2      	; 0x4e02 <checkCommand+0x86>
    4e00:	a3 c0       	rjmp	.+326    	; 0x4f48 <checkCommand+0x1cc>
    4e02:	24 35       	cpi	r18, 0x54	; 84
    4e04:	33 44       	sbci	r19, 0x43	; 67
    4e06:	09 f0       	breq	.+2      	; 0x4e0a <checkCommand+0x8e>
    4e08:	d3 c0       	rjmp	.+422    	; 0x4fb0 <checkCommand+0x234>
    4e0a:	bc c0       	rjmp	.+376    	; 0x4f84 <checkCommand+0x208>
    4e0c:	20 35       	cpi	r18, 0x50	; 80
    4e0e:	e9 e4       	ldi	r30, 0x49	; 73
    4e10:	3e 07       	cpc	r19, r30
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <checkCommand+0x9a>
    4e14:	c9 c0       	rjmp	.+402    	; 0x4fa8 <checkCommand+0x22c>
    4e16:	ac f4       	brge	.+42     	; 0x4e42 <checkCommand+0xc6>
    4e18:	29 34       	cpi	r18, 0x49	; 73
    4e1a:	47 e4       	ldi	r20, 0x47	; 71
    4e1c:	34 07       	cpc	r19, r20
    4e1e:	09 f4       	brne	.+2      	; 0x4e22 <checkCommand+0xa6>
    4e20:	bd c0       	rjmp	.+378    	; 0x4f9c <checkCommand+0x220>
    4e22:	2c f4       	brge	.+10     	; 0x4e2e <checkCommand+0xb2>
    4e24:	23 35       	cpi	r18, 0x53	; 83
    4e26:	34 44       	sbci	r19, 0x44	; 68
    4e28:	09 f0       	breq	.+2      	; 0x4e2c <checkCommand+0xb0>
    4e2a:	c2 c0       	rjmp	.+388    	; 0x4fb0 <checkCommand+0x234>
    4e2c:	79 c0       	rjmp	.+242    	; 0x4f20 <checkCommand+0x1a4>
    4e2e:	23 35       	cpi	r18, 0x53	; 83
    4e30:	47 e4       	ldi	r20, 0x47	; 71
    4e32:	34 07       	cpc	r19, r20
    4e34:	09 f4       	brne	.+2      	; 0x4e38 <checkCommand+0xbc>
    4e36:	aa c0       	rjmp	.+340    	; 0x4f8c <checkCommand+0x210>
    4e38:	24 36       	cpi	r18, 0x64	; 100
    4e3a:	38 44       	sbci	r19, 0x48	; 72
    4e3c:	09 f0       	breq	.+2      	; 0x4e40 <checkCommand+0xc4>
    4e3e:	b8 c0       	rjmp	.+368    	; 0x4fb0 <checkCommand+0x234>
    4e40:	7d c0       	rjmp	.+250    	; 0x4f3c <checkCommand+0x1c0>
    4e42:	23 35       	cpi	r18, 0x53	; 83
    4e44:	fe e4       	ldi	r31, 0x4E	; 78
    4e46:	3f 07       	cpc	r19, r31
    4e48:	09 f4       	brne	.+2      	; 0x4e4c <checkCommand+0xd0>
    4e4a:	6e c0       	rjmp	.+220    	; 0x4f28 <checkCommand+0x1ac>
    4e4c:	2c f4       	brge	.+10     	; 0x4e58 <checkCommand+0xdc>
    4e4e:	20 35       	cpi	r18, 0x50	; 80
    4e50:	3e 44       	sbci	r19, 0x4E	; 78
    4e52:	09 f0       	breq	.+2      	; 0x4e56 <checkCommand+0xda>
    4e54:	ad c0       	rjmp	.+346    	; 0x4fb0 <checkCommand+0x234>
    4e56:	76 c0       	rjmp	.+236    	; 0x4f44 <checkCommand+0x1c8>
    4e58:	21 34       	cpi	r18, 0x41	; 65
    4e5a:	f0 e5       	ldi	r31, 0x50	; 80
    4e5c:	3f 07       	cpc	r19, r31
    4e5e:	09 f4       	brne	.+2      	; 0x4e62 <checkCommand+0xe6>
    4e60:	75 c0       	rjmp	.+234    	; 0x4f4c <checkCommand+0x1d0>
    4e62:	24 34       	cpi	r18, 0x44	; 68
    4e64:	30 45       	sbci	r19, 0x50	; 80
    4e66:	09 f0       	breq	.+2      	; 0x4e6a <checkCommand+0xee>
    4e68:	a3 c0       	rjmp	.+326    	; 0x4fb0 <checkCommand+0x234>
    4e6a:	72 c0       	rjmp	.+228    	; 0x4f50 <checkCommand+0x1d4>
    4e6c:	22 34       	cpi	r18, 0x42	; 66
    4e6e:	e3 e5       	ldi	r30, 0x53	; 83
    4e70:	3e 07       	cpc	r19, r30
    4e72:	09 f4       	brne	.+2      	; 0x4e76 <checkCommand+0xfa>
    4e74:	8f c0       	rjmp	.+286    	; 0x4f94 <checkCommand+0x218>
    4e76:	54 f5       	brge	.+84     	; 0x4ecc <checkCommand+0x150>
    4e78:	26 35       	cpi	r18, 0x56	; 86
    4e7a:	40 e5       	ldi	r20, 0x50	; 80
    4e7c:	34 07       	cpc	r19, r20
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <checkCommand+0x106>
    4e80:	5f c0       	rjmp	.+190    	; 0x4f40 <checkCommand+0x1c4>
    4e82:	7c f4       	brge	.+30     	; 0x4ea2 <checkCommand+0x126>
    4e84:	23 35       	cpi	r18, 0x53	; 83
    4e86:	f0 e5       	ldi	r31, 0x50	; 80
    4e88:	3f 07       	cpc	r19, r31
    4e8a:	09 f4       	brne	.+2      	; 0x4e8e <checkCommand+0x112>
    4e8c:	53 c0       	rjmp	.+166    	; 0x4f34 <checkCommand+0x1b8>
    4e8e:	24 35       	cpi	r18, 0x54	; 84
    4e90:	40 e5       	ldi	r20, 0x50	; 80
    4e92:	34 07       	cpc	r19, r20
    4e94:	09 f4       	brne	.+2      	; 0x4e98 <checkCommand+0x11c>
    4e96:	5e c0       	rjmp	.+188    	; 0x4f54 <checkCommand+0x1d8>
    4e98:	20 35       	cpi	r18, 0x50	; 80
    4e9a:	30 45       	sbci	r19, 0x50	; 80
    4e9c:	09 f0       	breq	.+2      	; 0x4ea0 <checkCommand+0x124>
    4e9e:	88 c0       	rjmp	.+272    	; 0x4fb0 <checkCommand+0x234>
    4ea0:	7f c0       	rjmp	.+254    	; 0x4fa0 <checkCommand+0x224>
    4ea2:	23 34       	cpi	r18, 0x43	; 67
    4ea4:	e2 e5       	ldi	r30, 0x52	; 82
    4ea6:	3e 07       	cpc	r19, r30
    4ea8:	09 f4       	brne	.+2      	; 0x4eac <checkCommand+0x130>
    4eaa:	64 c0       	rjmp	.+200    	; 0x4f74 <checkCommand+0x1f8>
    4eac:	2c f4       	brge	.+10     	; 0x4eb8 <checkCommand+0x13c>
    4eae:	27 35       	cpi	r18, 0x57	; 87
    4eb0:	30 45       	sbci	r19, 0x50	; 80
    4eb2:	09 f0       	breq	.+2      	; 0x4eb6 <checkCommand+0x13a>
    4eb4:	7d c0       	rjmp	.+250    	; 0x4fb0 <checkCommand+0x234>
    4eb6:	68 c0       	rjmp	.+208    	; 0x4f88 <checkCommand+0x20c>
    4eb8:	24 34       	cpi	r18, 0x44	; 68
    4eba:	e2 e5       	ldi	r30, 0x52	; 82
    4ebc:	3e 07       	cpc	r19, r30
    4ebe:	09 f4       	brne	.+2      	; 0x4ec2 <checkCommand+0x146>
    4ec0:	57 c0       	rjmp	.+174    	; 0x4f70 <checkCommand+0x1f4>
    4ec2:	21 34       	cpi	r18, 0x41	; 65
    4ec4:	33 45       	sbci	r19, 0x53	; 83
    4ec6:	09 f0       	breq	.+2      	; 0x4eca <checkCommand+0x14e>
    4ec8:	73 c0       	rjmp	.+230    	; 0x4fb0 <checkCommand+0x234>
    4eca:	4e c0       	rjmp	.+156    	; 0x4f68 <checkCommand+0x1ec>
    4ecc:	20 35       	cpi	r18, 0x50	; 80
    4ece:	43 e5       	ldi	r20, 0x53	; 83
    4ed0:	34 07       	cpc	r19, r20
    4ed2:	09 f4       	brne	.+2      	; 0x4ed6 <checkCommand+0x15a>
    4ed4:	45 c0       	rjmp	.+138    	; 0x4f60 <checkCommand+0x1e4>
    4ed6:	74 f4       	brge	.+28     	; 0x4ef4 <checkCommand+0x178>
    4ed8:	24 34       	cpi	r18, 0x44	; 68
    4eda:	f3 e5       	ldi	r31, 0x53	; 83
    4edc:	3f 07       	cpc	r19, r31
    4ede:	41 f1       	breq	.+80     	; 0x4f30 <checkCommand+0x1b4>
    4ee0:	2c f1       	brlt	.+74     	; 0x4f2c <checkCommand+0x1b0>
    4ee2:	25 34       	cpi	r18, 0x45	; 69
    4ee4:	e3 e5       	ldi	r30, 0x53	; 83
    4ee6:	3e 07       	cpc	r19, r30
    4ee8:	e9 f1       	breq	.+122    	; 0x4f64 <checkCommand+0x1e8>
    4eea:	2f 34       	cpi	r18, 0x4F	; 79
    4eec:	33 45       	sbci	r19, 0x53	; 83
    4eee:	09 f0       	breq	.+2      	; 0x4ef2 <checkCommand+0x176>
    4ef0:	5f c0       	rjmp	.+190    	; 0x4fb0 <checkCommand+0x234>
    4ef2:	5c c0       	rjmp	.+184    	; 0x4fac <checkCommand+0x230>
    4ef4:	27 35       	cpi	r18, 0x57	; 87
    4ef6:	43 e5       	ldi	r20, 0x53	; 83
    4ef8:	34 07       	cpc	r19, r20
    4efa:	09 f4       	brne	.+2      	; 0x4efe <checkCommand+0x182>
    4efc:	53 c0       	rjmp	.+166    	; 0x4fa4 <checkCommand+0x228>
    4efe:	2c f4       	brge	.+10     	; 0x4f0a <checkCommand+0x18e>
    4f00:	23 35       	cpi	r18, 0x53	; 83
    4f02:	33 45       	sbci	r19, 0x53	; 83
    4f04:	09 f0       	breq	.+2      	; 0x4f08 <checkCommand+0x18c>
    4f06:	54 c0       	rjmp	.+168    	; 0x4fb0 <checkCommand+0x234>
    4f08:	29 c0       	rjmp	.+82     	; 0x4f5c <checkCommand+0x1e0>
    4f0a:	29 34       	cpi	r18, 0x49	; 73
    4f0c:	44 e5       	ldi	r20, 0x54	; 84
    4f0e:	34 07       	cpc	r19, r20
    4f10:	29 f0       	breq	.+10     	; 0x4f1c <checkCommand+0x1a0>
    4f12:	2c 34       	cpi	r18, 0x4C	; 76
    4f14:	34 45       	sbci	r19, 0x54	; 84
    4f16:	09 f0       	breq	.+2      	; 0x4f1a <checkCommand+0x19e>
    4f18:	4b c0       	rjmp	.+150    	; 0x4fb0 <checkCommand+0x234>
    4f1a:	04 c0       	rjmp	.+8      	; 0x4f24 <checkCommand+0x1a8>
        case 0x5449: //TI
            setClock(commandReceived);
    4f1c:	0c 94 ed 25 	jmp	0x4bda	; 0x4bda <setClock>
            break;
        case 0x4453: //DS
            setDaylightSavings(commandReceived);
    4f20:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <setDaylightSavings>
            break;
        case 0x544C: //TL
            setTimeLimits(commandReceived);
    4f24:	0c 94 6c 22 	jmp	0x44d8	; 0x44d8 <setTimeLimits>
            break;
        case 0x4E53: //NS
            setNewSwitch(commandReceived);
    4f28:	0c 94 bb 21 	jmp	0x4376	; 0x4376 <setNewSwitch>
            break;
        case 0x5343: //SC
            switchClear(commandReceived);
    4f2c:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <switchClear>
            break;
        case 0x5344: //SD
            switchDisplay(commandReceived);
    4f30:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <switchDisplay>
            break;
        case 0x5053: //PS
            pwmSetup(commandReceived);
    4f34:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <pwmSetup>
            break;
        case 0x4348: //CH
            cycleHue(commandReceived);
    4f38:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <cycleHue>
            break;
        case 0x4864: //HS
            setHueSpeed(commandReceived);
    4f3c:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <setHueSpeed>
            break;
        case 0x5056: //PV
            pwmValueSet(commandReceived);
    4f40:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <pwmValueSet>
            break;
        case 0x4E50: //NP
            newProgram(commandReceived);
    4f44:	0c 94 e1 23 	jmp	0x47c2	; 0x47c2 <newProgram>
            break;
        case 0x4350: //CP
            clearProgram(commandReceived);
    4f48:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <clearProgram>
            break;
        case 0x5041: //PA
            programAddSwitch(commandReceived);
    4f4c:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <programAddSwitch>
            break;
        case 0x5044: //PD
            programSetDays(commandReceived);
    4f50:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <programSetDays>
            break;
        case 0x5054: //PT
            programSetTime(commandReceived);
    4f54:	0c 94 e6 1d 	jmp	0x3bcc	; 0x3bcc <programSetTime>
            break;
        case 0x5049: //PI
            programDisplay(commandReceived);
    4f58:	0c 94 ed 13 	jmp	0x27da	; 0x27da <programDisplay>
            break;
        case 0x5353: //SS
            startSwitch(commandReceived);
    4f5c:	0c 94 c4 20 	jmp	0x4188	; 0x4188 <startSwitch>
            break;
        case 0x5350: //SP
            startProgram(commandReceived);
    4f60:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <startProgram>
            break;
        case 0x5345: //SE
            serialNumber(commandReceived);
    4f64:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <serialNumber>
            break;
        case 0x5341: //SA
            saveToEEPROM();
    4f68:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <saveToEEPROM>
            break;
        case 0x434C: //CL
            clearToEEPROM();
    4f6c:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <clearToEEPROM>
            break;
        case 0x5244: //RD
            radioDisplayAddress(commandReceived);
    4f70:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <radioDisplayAddress>
            break;
        case 0x5243: //RC
            radioChangeAddress(commandReceived);
    4f74:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <radioChangeAddress>
            break;
        case 0x4149: //AI
            setAnalogInput(commandReceived);
    4f78:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <setAnalogInput>
            break;
        case 0x4449: //DI
            setDigitalInput(commandReceived);
    4f7c:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <setDigitalInput>
            break;
        case 0x4349: //CI
            clearInput(commandReceived);
    4f80:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <clearInput>
            break;
        case 0x4354: //CT
            clockTweak(commandReceived);
    4f84:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <clockTweak>
            break;
        case 0x5057: //PW
            pwmSummary();
    4f88:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <pwmSummary>
            break;
        case 0x4845: //HE
            drawInterface();
            break;
        case 0x4753: //GS
            generalStatus(commandReceived);
    4f8c:	0c 94 26 13 	jmp	0x264c	; 0x264c <generalStatus>
            break;
        case 0x5248: //RH
            drawInterface();
            break;
        case 0x4343: //CC
            colorChangeSet(commandReceived);
    4f90:	0c 94 07 20 	jmp	0x400e	; 0x400e <colorChangeSet>
            break;
        case 0x5342: //sb
            switchBrightness(commandReceived);
    4f94:	0c 94 93 24 	jmp	0x4926	; 0x4926 <switchBrightness>
            break;
        case 0x4253: //bs
            brightnessSet(commandReceived);
    4f98:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <brightnessSet>
            break;
        case 0x4749: //GI
            generalInformation();
    4f9c:	0c 94 29 12 	jmp	0x2452	; 0x2452 <generalInformation>
            break;
        case 0x5050: //PP
            programsProgrammed();
    4fa0:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <programsProgrammed>
            break;
        case 0x5357: //SW
            switchesProgrammed();
    4fa4:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <switchesProgrammed>
            break;
        case 0x4950: //IP
            inputsProgrammed();
    4fa8:	0c 94 8e 11 	jmp	0x231c	; 0x231c <inputsProgrammed>
            break;
        case 0x534F: //SO
            switchesOn();
    4fac:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <switchesOn>
    4fb0:	08 95       	ret

00004fb2 <__vector_11>:
    failTimer = 0;
    INDICATOR_PORT |= (INDICATOR_PIN);
    INDICATOR_DDR |= (INDICATOR_PIN);
}

ISR(TIMER1_COMPA_vect) {
    4fb2:	1f 92       	push	r1
    4fb4:	0f 92       	push	r0
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	0f 92       	push	r0
    4fba:	11 24       	eor	r1, r1
    4fbc:	2f 93       	push	r18
    4fbe:	3f 93       	push	r19
    4fc0:	4f 93       	push	r20
    4fc2:	5f 93       	push	r21
    4fc4:	6f 93       	push	r22
    4fc6:	7f 93       	push	r23
    4fc8:	8f 93       	push	r24
    4fca:	9f 93       	push	r25
    4fcc:	af 93       	push	r26
    4fce:	bf 93       	push	r27
    4fd0:	ef 93       	push	r30
    4fd2:	ff 93       	push	r31
    int tenthTicks;
    ticks++;
    4fd4:	40 91 96 04 	lds	r20, 0x0496
    4fd8:	50 91 97 04 	lds	r21, 0x0497
    4fdc:	4f 5f       	subi	r20, 0xFF	; 255
    4fde:	5f 4f       	sbci	r21, 0xFF	; 255
    4fe0:	50 93 97 04 	sts	0x0497, r21
    4fe4:	40 93 96 04 	sts	0x0496, r20
    // if its been a second
    if (ticks >= tweakTimer) {
    4fe8:	60 e0       	ldi	r22, 0x00	; 0
    4fea:	70 e0       	ldi	r23, 0x00	; 0
    4fec:	80 91 1f 01 	lds	r24, 0x011F
    4ff0:	90 91 20 01 	lds	r25, 0x0120
    4ff4:	a0 91 21 01 	lds	r26, 0x0121
    4ff8:	b0 91 22 01 	lds	r27, 0x0122
    4ffc:	48 17       	cp	r20, r24
    4ffe:	59 07       	cpc	r21, r25
    5000:	6a 07       	cpc	r22, r26
    5002:	7b 07       	cpc	r23, r27
    5004:	0c f4       	brge	.+2      	; 0x5008 <__vector_11+0x56>
    5006:	55 c0       	rjmp	.+170    	; 0x50b2 <__vector_11+0x100>
        ticks = 0;
    5008:	10 92 97 04 	sts	0x0497, r1
    500c:	10 92 96 04 	sts	0x0496, r1
        globalSecond++;
    5010:	20 91 f4 02 	lds	r18, 0x02F4
    5014:	30 91 f5 02 	lds	r19, 0x02F5
    5018:	2f 5f       	subi	r18, 0xFF	; 255
    501a:	3f 4f       	sbci	r19, 0xFF	; 255
    501c:	30 93 f5 02 	sts	0x02F5, r19
    5020:	20 93 f4 02 	sts	0x02F4, r18
        weeklySeconds++;
    5024:	80 91 aa 03 	lds	r24, 0x03AA
    5028:	90 91 ab 03 	lds	r25, 0x03AB
    502c:	a0 91 ac 03 	lds	r26, 0x03AC
    5030:	b0 91 ad 03 	lds	r27, 0x03AD
    5034:	01 96       	adiw	r24, 0x01	; 1
    5036:	a1 1d       	adc	r26, r1
    5038:	b1 1d       	adc	r27, r1
    503a:	80 93 aa 03 	sts	0x03AA, r24
    503e:	90 93 ab 03 	sts	0x03AB, r25
    5042:	a0 93 ac 03 	sts	0x03AC, r26
    5046:	b0 93 ad 03 	sts	0x03AD, r27
        newSecond = 1;
    504a:	41 e0       	ldi	r20, 0x01	; 1
    504c:	40 93 80 03 	sts	0x0380, r20
        if (globalSecond == 60) {
    5050:	2c 33       	cpi	r18, 0x3C	; 60
    5052:	31 05       	cpc	r19, r1
    5054:	71 f5       	brne	.+92     	; 0x50b2 <__vector_11+0x100>
            globalMinute++;
    5056:	80 91 f6 02 	lds	r24, 0x02F6
    505a:	90 91 f7 02 	lds	r25, 0x02F7
    505e:	01 96       	adiw	r24, 0x01	; 1
    5060:	90 93 f7 02 	sts	0x02F7, r25
    5064:	80 93 f6 02 	sts	0x02F6, r24
            globalSecond = 0;
    5068:	10 92 f5 02 	sts	0x02F5, r1
    506c:	10 92 f4 02 	sts	0x02F4, r1
            newMinute = 1;
    5070:	40 93 85 03 	sts	0x0385, r20
            if (globalMinute == 60) {
    5074:	cc 97       	sbiw	r24, 0x3c	; 60
    5076:	e9 f4       	brne	.+58     	; 0x50b2 <__vector_11+0x100>
                globalHour++;
    5078:	80 91 f8 02 	lds	r24, 0x02F8
    507c:	90 91 f9 02 	lds	r25, 0x02F9
    5080:	01 96       	adiw	r24, 0x01	; 1
    5082:	90 93 f9 02 	sts	0x02F9, r25
    5086:	80 93 f8 02 	sts	0x02F8, r24
                globalMinute = 0;
    508a:	10 92 f7 02 	sts	0x02F7, r1
    508e:	10 92 f6 02 	sts	0x02F6, r1
                // daylight savings is always at 3am
                if (globalHour == 3)
    5092:	03 97       	sbiw	r24, 0x03	; 3
    5094:	11 f4       	brne	.+4      	; 0x509a <__vector_11+0xe8>
                    checkDaylightSavings();
    5096:	0e 94 5e 04 	call	0x8bc	; 0x8bc <checkDaylightSavings>
                if (globalHour == 24) {
    509a:	80 91 f8 02 	lds	r24, 0x02F8
    509e:	90 91 f9 02 	lds	r25, 0x02F9
    50a2:	48 97       	sbiw	r24, 0x18	; 24
    50a4:	31 f4       	brne	.+12     	; 0x50b2 <__vector_11+0x100>
                    globalHour = 0;
    50a6:	10 92 f9 02 	sts	0x02F9, r1
    50aa:	10 92 f8 02 	sts	0x02F8, r1
                    advanceDay();
    50ae:	0e 94 a0 04 	call	0x940	; 0x940 <advanceDay>
                }
            }
        }
    }
    tenthTicks = ticks % TIMER_TENTH;
    50b2:	80 91 96 04 	lds	r24, 0x0496
    50b6:	90 91 97 04 	lds	r25, 0x0497
    50ba:	68 e1       	ldi	r22, 0x18	; 24
    50bc:	76 e0       	ldi	r23, 0x06	; 6
    50be:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <__udivmodhi4>
    if (tenthTicks == 0) {
    50c2:	89 2b       	or	r24, r25
    50c4:	19 f4       	brne	.+6      	; 0x50cc <__vector_11+0x11a>
        tenthFlag = 1;
    50c6:	81 e0       	ldi	r24, 0x01	; 1
    50c8:	80 93 84 03 	sts	0x0384, r24
        // set flags for whatever functions we want to do every 10th of a second here
    }
}
    50cc:	ff 91       	pop	r31
    50ce:	ef 91       	pop	r30
    50d0:	bf 91       	pop	r27
    50d2:	af 91       	pop	r26
    50d4:	9f 91       	pop	r25
    50d6:	8f 91       	pop	r24
    50d8:	7f 91       	pop	r23
    50da:	6f 91       	pop	r22
    50dc:	5f 91       	pop	r21
    50de:	4f 91       	pop	r20
    50e0:	3f 91       	pop	r19
    50e2:	2f 91       	pop	r18
    50e4:	0f 90       	pop	r0
    50e6:	0f be       	out	0x3f, r0	; 63
    50e8:	0f 90       	pop	r0
    50ea:	1f 90       	pop	r1
    50ec:	18 95       	reti

000050ee <spi_init>:
#define SCK_PIN     PINB5
#define SS_PIN      PINB2

// Initialize pins for spi communication
void spi_init(){
   SPI_DDR &= ~(1<<MISO_PIN);
    50ee:	24 98       	cbi	0x04, 4	; 4
   // Define the following pins as output
   SPI_DDR |= ((1<<MOSI_PIN)|(1<<SS_PIN)|(1<<SCK_PIN));
    50f0:	84 b1       	in	r24, 0x04	; 4
    50f2:	8c 62       	ori	r24, 0x2C	; 44
    50f4:	84 b9       	out	0x04, r24	; 4

   // Enable SPI as master = F_CPU/4 rate     
   SPCR = ((1<<SPE)|(1<<MSTR)|(0<<SPR1)|(0<<SPR0));
    50f6:	80 e5       	ldi	r24, 0x50	; 80
    50f8:	8c bd       	out	0x2c, r24	; 44

    
   // Bring the slave select high
   SPI_PORT |= (1 << SS_PIN);
    50fa:	2a 9a       	sbi	0x05, 2	; 5
    50fc:	08 95       	ret

000050fe <spi_transaction>:
}

// Do a spi transaction
void spi_transaction(char * dataout, char * datain, char length) {
   // Drop chip select pin low
   SPI_PORT &= ~(1 << SS_PIN);
    50fe:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5100:	ef e9       	ldi	r30, 0x9F	; 159
    5102:	ff e0       	ldi	r31, 0x0F	; 15
    5104:	31 97       	sbiw	r30, 0x01	; 1
    5106:	f1 f7       	brne	.-4      	; 0x5104 <spi_transaction+0x6>
    5108:	00 c0       	rjmp	.+0      	; 0x510a <spi_transaction+0xc>
    510a:	00 00       	nop
    510c:	9b 01       	movw	r18, r22
    510e:	fc 01       	movw	r30, r24
   _delay_ms(1);
   for (int x = 0; x < length; x++) {
    5110:	db 01       	movw	r26, r22
    5112:	50 e0       	ldi	r21, 0x00	; 0
    5114:	07 c0       	rjmp	.+14     	; 0x5124 <spi_transaction+0x26>
      SPDR = dataout[x];
    5116:	81 91       	ld	r24, Z+
    5118:	8e bd       	out	0x2e, r24	; 46
      while((SPSR & (1 << SPIF)) == 0)
    511a:	0d b4       	in	r0, 0x2d	; 45
    511c:	07 fe       	sbrs	r0, 7
    511e:	fd cf       	rjmp	.-6      	; 0x511a <spi_transaction+0x1c>
         ;
      datain[x] = SPDR;
    5120:	8e b5       	in	r24, 0x2e	; 46
    5122:	8d 93       	st	X+, r24
   SPI_PORT |= (1 << SS_PIN);
    
}

// Do a spi transaction
void spi_transaction(char * dataout, char * datain, char length) {
    5124:	cd 01       	movw	r24, r26
    5126:	82 1b       	sub	r24, r18
    5128:	93 0b       	sbc	r25, r19
   // Drop chip select pin low
   SPI_PORT &= ~(1 << SS_PIN);
   _delay_ms(1);
   for (int x = 0; x < length; x++) {
    512a:	84 17       	cp	r24, r20
    512c:	95 07       	cpc	r25, r21
    512e:	9c f3       	brlt	.-26     	; 0x5116 <spi_transaction+0x18>
      SPDR = dataout[x];
      while((SPSR & (1 << SPIF)) == 0)
         ;
      datain[x] = SPDR;
   }
   SPI_PORT |= (1 << SS_PIN);
    5130:	2a 9a       	sbi	0x05, 2	; 5
    5132:	08 95       	ret

00005134 <powerUp>:
   writeReg(CONFIG,config);
}

// Powers up the radio - turns on CE pin
void powerUp(void) {
   CE_PORT |= (1<<CE_PIN);
    5134:	29 9a       	sbi	0x05, 1	; 5
    5136:	08 95       	ret

00005138 <powerDown>:
}

// Power down the radio - turn off CE pin
void powerDown(void) {
   CE_PORT &= ~(1 << CE_PIN);
    5138:	29 98       	cbi	0x05, 1	; 5
    513a:	08 95       	ret

0000513c <readReg>:
   config &= ~(1 << PRIM_RX);
   writeReg(CONFIG, config);
}

// Read a register and return an uint8_t result
char readReg(char reg) {
    513c:	cf 93       	push	r28
    513e:	df 93       	push	r29
    5140:	00 d0       	rcall	.+0      	; 0x5142 <readReg+0x6>
    5142:	00 d0       	rcall	.+0      	; 0x5144 <readReg+0x8>
    5144:	cd b7       	in	r28, 0x3d	; 61
    5146:	de b7       	in	r29, 0x3e	; 62
   char datain[2];
   reg &= REGISTER_MASK;  // make sure command bits are clean
    5148:	8f 71       	andi	r24, 0x1F	; 31
   reg |= R_REGISTER;
   char dataout[] = {reg, NOP};
    514a:	89 83       	std	Y+1, r24	; 0x01
    514c:	8f ef       	ldi	r24, 0xFF	; 255
    514e:	8a 83       	std	Y+2, r24	; 0x02
   spi_transaction(dataout, datain, 2);
    5150:	42 e0       	ldi	r20, 0x02	; 2
    5152:	be 01       	movw	r22, r28
    5154:	6d 5f       	subi	r22, 0xFD	; 253
    5156:	7f 4f       	sbci	r23, 0xFF	; 255
    5158:	ce 01       	movw	r24, r28
    515a:	01 96       	adiw	r24, 0x01	; 1
    515c:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
   char output = datain[1];
   return output;
}
    5160:	8c 81       	ldd	r24, Y+4	; 0x04
    5162:	0f 90       	pop	r0
    5164:	0f 90       	pop	r0
    5166:	0f 90       	pop	r0
    5168:	0f 90       	pop	r0
    516a:	df 91       	pop	r29
    516c:	cf 91       	pop	r28
    516e:	08 95       	ret

00005170 <writeReg>:

// Write a register
void writeReg(char reg, char data) {
    5170:	cf 93       	push	r28
    5172:	df 93       	push	r29
    5174:	00 d0       	rcall	.+0      	; 0x5176 <writeReg+0x6>
    5176:	00 d0       	rcall	.+0      	; 0x5178 <writeReg+0x8>
    5178:	cd b7       	in	r28, 0x3d	; 61
    517a:	de b7       	in	r29, 0x3e	; 62
   char datain[2];
   reg &= REGISTER_MASK;
    517c:	8f 71       	andi	r24, 0x1F	; 31
   reg |= W_REGISTER;
    517e:	80 62       	ori	r24, 0x20	; 32
   char dataout[] = {reg , data};
    5180:	89 83       	std	Y+1, r24	; 0x01
    5182:	6a 83       	std	Y+2, r22	; 0x02
   spi_transaction(dataout, datain, 2);
    5184:	42 e0       	ldi	r20, 0x02	; 2
    5186:	be 01       	movw	r22, r28
    5188:	6d 5f       	subi	r22, 0xFD	; 253
    518a:	7f 4f       	sbci	r23, 0xFF	; 255
    518c:	ce 01       	movw	r24, r28
    518e:	01 96       	adiw	r24, 0x01	; 1
    5190:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
}
    5194:	0f 90       	pop	r0
    5196:	0f 90       	pop	r0
    5198:	0f 90       	pop	r0
    519a:	0f 90       	pop	r0
    519c:	df 91       	pop	r29
    519e:	cf 91       	pop	r28
    51a0:	08 95       	ret

000051a2 <stopRx>:
   writeReg(CONFIG, config);
}

// Cancel receive mode
void stopRx(void) {
   powerDown();
    51a2:	0e 94 9c 28 	call	0x5138	; 0x5138 <powerDown>
   char config = readReg(CONFIG);
    51a6:	80 e0       	ldi	r24, 0x00	; 0
    51a8:	0e 94 9e 28 	call	0x513c	; 0x513c <readReg>
   config &= ~(1 << PRIM_RX);
    51ac:	68 2f       	mov	r22, r24
    51ae:	6e 7f       	andi	r22, 0xFE	; 254
   writeReg(CONFIG, config);
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	0c 94 b8 28 	jmp	0x5170	; 0x5170 <writeReg>

000051b6 <startRx>:
   CE_PORT &= ~(1 << CE_PIN);
}

// Put the radio in receive mode
void startRx(void) {
   powerUp();
    51b6:	0e 94 9a 28 	call	0x5134	; 0x5134 <powerUp>
   char config = readReg(CONFIG);
    51ba:	80 e0       	ldi	r24, 0x00	; 0
    51bc:	0e 94 9e 28 	call	0x513c	; 0x513c <readReg>
   config |= (1 << PRIM_RX);
    51c0:	68 2f       	mov	r22, r24
    51c2:	61 60       	ori	r22, 0x01	; 1
   writeReg(CONFIG, config);
    51c4:	80 e0       	ldi	r24, 0x00	; 0
    51c6:	0c 94 b8 28 	jmp	0x5170	; 0x5170 <writeReg>

000051ca <stopRadio>:
   writeReg(CONFIG,config);
}

// Powers off the radio from standby mode
void stopRadio(void) {
   char config = readReg(CONFIG);
    51ca:	80 e0       	ldi	r24, 0x00	; 0
    51cc:	0e 94 9e 28 	call	0x513c	; 0x513c <readReg>
   config &= ~(1 << PWR_UP);
    51d0:	68 2f       	mov	r22, r24
    51d2:	6d 7f       	andi	r22, 0xFD	; 253
   writeReg(CONFIG,config);
    51d4:	80 e0       	ldi	r24, 0x00	; 0
    51d6:	0c 94 b8 28 	jmp	0x5170	; 0x5170 <writeReg>

000051da <startRadio>:
   flushme(); // start with clean buffers
}

// Power on the radio to standby mode (radio config register)
void startRadio(void) {
   char config = readReg(CONFIG);
    51da:	80 e0       	ldi	r24, 0x00	; 0
    51dc:	0e 94 9e 28 	call	0x513c	; 0x513c <readReg>
   config |= (1 << PWR_UP);
    51e0:	68 2f       	mov	r22, r24
    51e2:	62 60       	ori	r22, 0x02	; 2
   writeReg(CONFIG,config);
    51e4:	80 e0       	ldi	r24, 0x00	; 0
    51e6:	0c 94 b8 28 	jmp	0x5170	; 0x5170 <writeReg>

000051ea <readAddr>:
   spi_transaction(dataout, datain, 2);
}

// Read the address specified by "reg" (which address) and return an
// integer of the address (40 bytes)
uint64_t readAddr( char reg) {
    51ea:	0f 93       	push	r16
    51ec:	1f 93       	push	r17
    51ee:	cf 93       	push	r28
    51f0:	df 93       	push	r29
    51f2:	cd b7       	in	r28, 0x3d	; 61
    51f4:	de b7       	in	r29, 0x3e	; 62
    51f6:	2c 97       	sbiw	r28, 0x0c	; 12
    51f8:	0f b6       	in	r0, 0x3f	; 63
    51fa:	f8 94       	cli
    51fc:	de bf       	out	0x3e, r29	; 62
    51fe:	0f be       	out	0x3f, r0	; 63
    5200:	cd bf       	out	0x3d, r28	; 61
   char datain[6];
   uint64_t address = 0;
   reg &= REGISTER_MASK;
    5202:	18 2f       	mov	r17, r24
    5204:	1f 71       	andi	r17, 0x1F	; 31
   reg |= R_REGISTER;
   // set up data out to get all 5 chars
   char dataout[] = {reg, NOP, NOP, NOP, NOP, NOP};
    5206:	19 83       	std	Y+1, r17	; 0x01
    5208:	9f ef       	ldi	r25, 0xFF	; 255
    520a:	9a 83       	std	Y+2, r25	; 0x02
    520c:	9b 83       	std	Y+3, r25	; 0x03
    520e:	9c 83       	std	Y+4, r25	; 0x04
    5210:	9d 83       	std	Y+5, r25	; 0x05
    5212:	9e 83       	std	Y+6, r25	; 0x06
   // 3 addresses are 5 bytes but 4 are only 1 byte. Deal with the 4
   if ( (reg == (R_REGISTER | RX_ADDR_P2 )) ||
      (reg == (R_REGISTER | RX_ADDR_P3 )) ||
      (reg == (R_REGISTER | RX_ADDR_P4 )) ||
    5214:	81 2f       	mov	r24, r17
    5216:	8c 50       	subi	r24, 0x0C	; 12
   reg &= REGISTER_MASK;
   reg |= R_REGISTER;
   // set up data out to get all 5 chars
   char dataout[] = {reg, NOP, NOP, NOP, NOP, NOP};
   // 3 addresses are 5 bytes but 4 are only 1 byte. Deal with the 4
   if ( (reg == (R_REGISTER | RX_ADDR_P2 )) ||
    5218:	84 30       	cpi	r24, 0x04	; 4
    521a:	78 f4       	brcc	.+30     	; 0x523a <readAddr+0x50>
      (reg == (R_REGISTER | RX_ADDR_P3 )) ||
      (reg == (R_REGISTER | RX_ADDR_P4 )) ||
      (reg == (R_REGISTER | RX_ADDR_P5 ))) { // all the 1 byte returns
      dataout[0] = (R_REGISTER | RX_ADDR_P1); // MSB equal here 
    521c:	8b e0       	ldi	r24, 0x0B	; 11
    521e:	89 83       	std	Y+1, r24	; 0x01
      spi_transaction(dataout, datain, 6); // get the MSBs
    5220:	46 e0       	ldi	r20, 0x06	; 6
    5222:	be 01       	movw	r22, r28
    5224:	69 5f       	subi	r22, 0xF9	; 249
    5226:	7f 4f       	sbci	r23, 0xFF	; 255
    5228:	ce 01       	movw	r24, r28
    522a:	01 96       	adiw	r24, 0x01	; 1
    522c:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
      char lsb = readReg(reg);
    5230:	81 2f       	mov	r24, r17
    5232:	0e 94 9e 28 	call	0x513c	; 0x513c <readReg>
      datain[1] = lsb;
    5236:	88 87       	std	Y+8, r24	; 0x08
    5238:	08 c0       	rjmp	.+16     	; 0x524a <readAddr+0x60>
   } else { // just get the 5 byte address
      spi_transaction(dataout, datain, 6);
    523a:	46 e0       	ldi	r20, 0x06	; 6
    523c:	be 01       	movw	r22, r28
    523e:	69 5f       	subi	r22, 0xF9	; 249
    5240:	7f 4f       	sbci	r23, 0xFF	; 255
    5242:	ce 01       	movw	r24, r28
    5244:	01 96       	adiw	r24, 0x01	; 1
    5246:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
    524a:	fe 01       	movw	r30, r28
    524c:	3d 96       	adiw	r30, 0x0d	; 13
   spi_transaction(dataout, datain, 2);
}

// Read the address specified by "reg" (which address) and return an
// integer of the address (40 bytes)
uint64_t readAddr( char reg) {
    524e:	de 01       	movw	r26, r28
    5250:	19 96       	adiw	r26, 0x09	; 9
   char datain[6];
   uint64_t address = 0;
    5252:	10 e0       	ldi	r17, 0x00	; 0
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	40 e0       	ldi	r20, 0x00	; 0
    5258:	50 e0       	ldi	r21, 0x00	; 0
    525a:	60 e0       	ldi	r22, 0x00	; 0
    525c:	70 e0       	ldi	r23, 0x00	; 0
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	90 e0       	ldi	r25, 0x00	; 0
   } else { // just get the 5 byte address
      spi_transaction(dataout, datain, 6);
   }
   // nrf addresses are LSB first
   for (int x = 5; x > 1; x--) {
      address |= datain[x];
    5262:	22 91       	ld	r18, -Z
    5264:	21 2b       	or	r18, r17
      address = address << 8;
    5266:	08 e0       	ldi	r16, 0x08	; 8
    5268:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__ashldi3>
    526c:	12 2f       	mov	r17, r18
      datain[1] = lsb;
   } else { // just get the 5 byte address
      spi_transaction(dataout, datain, 6);
   }
   // nrf addresses are LSB first
   for (int x = 5; x > 1; x--) {
    526e:	ea 17       	cp	r30, r26
    5270:	fb 07       	cpc	r31, r27
    5272:	b9 f7       	brne	.-18     	; 0x5262 <readAddr+0x78>
      address |= datain[x];
      address = address << 8;
   }
   address |= datain[1];
    5274:	28 85       	ldd	r18, Y+8	; 0x08
    5276:	21 2b       	or	r18, r17
   return address;
}
    5278:	2c 96       	adiw	r28, 0x0c	; 12
    527a:	0f b6       	in	r0, 0x3f	; 63
    527c:	f8 94       	cli
    527e:	de bf       	out	0x3e, r29	; 62
    5280:	0f be       	out	0x3f, r0	; 63
    5282:	cd bf       	out	0x3d, r28	; 61
    5284:	df 91       	pop	r29
    5286:	cf 91       	pop	r28
    5288:	1f 91       	pop	r17
    528a:	0f 91       	pop	r16
    528c:	08 95       	ret

0000528e <writeAddr>:

// Write the address specified. 
void writeAddr( char reg, uint64_t address) {
    528e:	df 92       	push	r13
    5290:	ef 92       	push	r14
    5292:	ff 92       	push	r15
    5294:	0f 93       	push	r16
    5296:	1f 93       	push	r17
    5298:	cf 93       	push	r28
    529a:	df 93       	push	r29
    529c:	cd b7       	in	r28, 0x3d	; 61
    529e:	de b7       	in	r29, 0x3e	; 62
    52a0:	2c 97       	sbiw	r28, 0x0c	; 12
    52a2:	0f b6       	in	r0, 0x3f	; 63
    52a4:	f8 94       	cli
    52a6:	de bf       	out	0x3e, r29	; 62
    52a8:	0f be       	out	0x3f, r0	; 63
    52aa:	cd bf       	out	0x3d, r28	; 61
    52ac:	e0 2f       	mov	r30, r16
    52ae:	d2 2e       	mov	r13, r18
    52b0:	e3 2e       	mov	r14, r19
    52b2:	f4 2e       	mov	r15, r20
    52b4:	b5 2f       	mov	r27, r21
    52b6:	a6 2f       	mov	r26, r22
    52b8:	f7 2f       	mov	r31, r23
   if( (reg == RX_ADDR_P0) || (reg == RX_ADDR_P1) || (reg == TX_ADDR) ) {
    52ba:	98 2f       	mov	r25, r24
    52bc:	9a 50       	subi	r25, 0x0A	; 10
    52be:	92 30       	cpi	r25, 0x02	; 2
    52c0:	10 f0       	brcs	.+4      	; 0x52c6 <writeAddr+0x38>
    52c2:	80 31       	cpi	r24, 0x10	; 16
    52c4:	e9 f5       	brne	.+122    	; 0x5340 <writeAddr+0xb2>
      char datain[6];
      reg &= REGISTER_MASK;
    52c6:	8f 71       	andi	r24, 0x1F	; 31
      reg |= W_REGISTER;
    52c8:	80 62       	ori	r24, 0x20	; 32
      // nrf addresses are LSB first
      char dataout[] = {reg , (address & 0xff), ((address >> 8) & 0xff), 
    52ca:	89 83       	std	Y+1, r24	; 0x01
    52cc:	ea 83       	std	Y+2, r30	; 0x02
    52ce:	2e 2f       	mov	r18, r30
    52d0:	31 2f       	mov	r19, r17
    52d2:	4d 2d       	mov	r20, r13
    52d4:	5e 2d       	mov	r21, r14
    52d6:	6f 2d       	mov	r22, r15
    52d8:	7b 2f       	mov	r23, r27
    52da:	8a 2f       	mov	r24, r26
    52dc:	9f 2f       	mov	r25, r31
    52de:	08 e0       	ldi	r16, 0x08	; 8
    52e0:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <__lshrdi3>
    52e4:	2b 83       	std	Y+3, r18	; 0x03
         ((address >> 16) & 0xff), ((address >> 24) & 0xff), (address >> 32)};
    52e6:	2e 2f       	mov	r18, r30
    52e8:	31 2f       	mov	r19, r17
    52ea:	4d 2d       	mov	r20, r13
    52ec:	5e 2d       	mov	r21, r14
    52ee:	6f 2d       	mov	r22, r15
    52f0:	7b 2f       	mov	r23, r27
    52f2:	8a 2f       	mov	r24, r26
    52f4:	9f 2f       	mov	r25, r31
    52f6:	00 e1       	ldi	r16, 0x10	; 16
    52f8:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <__lshrdi3>
   if( (reg == RX_ADDR_P0) || (reg == RX_ADDR_P1) || (reg == TX_ADDR) ) {
      char datain[6];
      reg &= REGISTER_MASK;
      reg |= W_REGISTER;
      // nrf addresses are LSB first
      char dataout[] = {reg , (address & 0xff), ((address >> 8) & 0xff), 
    52fc:	2c 83       	std	Y+4, r18	; 0x04
         ((address >> 16) & 0xff), ((address >> 24) & 0xff), (address >> 32)};
    52fe:	2e 2f       	mov	r18, r30
    5300:	31 2f       	mov	r19, r17
    5302:	4d 2d       	mov	r20, r13
    5304:	5e 2d       	mov	r21, r14
    5306:	6f 2d       	mov	r22, r15
    5308:	7b 2f       	mov	r23, r27
    530a:	8a 2f       	mov	r24, r26
    530c:	9f 2f       	mov	r25, r31
    530e:	08 e1       	ldi	r16, 0x18	; 24
    5310:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <__lshrdi3>
   if( (reg == RX_ADDR_P0) || (reg == RX_ADDR_P1) || (reg == TX_ADDR) ) {
      char datain[6];
      reg &= REGISTER_MASK;
      reg |= W_REGISTER;
      // nrf addresses are LSB first
      char dataout[] = {reg , (address & 0xff), ((address >> 8) & 0xff), 
    5314:	2d 83       	std	Y+5, r18	; 0x05
         ((address >> 16) & 0xff), ((address >> 24) & 0xff), (address >> 32)};
    5316:	2e 2f       	mov	r18, r30
    5318:	31 2f       	mov	r19, r17
    531a:	4d 2d       	mov	r20, r13
    531c:	5e 2d       	mov	r21, r14
    531e:	6f 2d       	mov	r22, r15
    5320:	7b 2f       	mov	r23, r27
    5322:	8a 2f       	mov	r24, r26
    5324:	9f 2f       	mov	r25, r31
    5326:	00 e2       	ldi	r16, 0x20	; 32
    5328:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <__lshrdi3>
   if( (reg == RX_ADDR_P0) || (reg == RX_ADDR_P1) || (reg == TX_ADDR) ) {
      char datain[6];
      reg &= REGISTER_MASK;
      reg |= W_REGISTER;
      // nrf addresses are LSB first
      char dataout[] = {reg , (address & 0xff), ((address >> 8) & 0xff), 
    532c:	2e 83       	std	Y+6, r18	; 0x06
         ((address >> 16) & 0xff), ((address >> 24) & 0xff), (address >> 32)};
      spi_transaction(dataout, datain, 6);
    532e:	46 e0       	ldi	r20, 0x06	; 6
    5330:	be 01       	movw	r22, r28
    5332:	69 5f       	subi	r22, 0xF9	; 249
    5334:	7f 4f       	sbci	r23, 0xFF	; 255
    5336:	ce 01       	movw	r24, r28
    5338:	01 96       	adiw	r24, 0x01	; 1
    533a:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
   return address;
}

// Write the address specified. 
void writeAddr( char reg, uint64_t address) {
   if( (reg == RX_ADDR_P0) || (reg == RX_ADDR_P1) || (reg == TX_ADDR) ) {
    533e:	03 c0       	rjmp	.+6      	; 0x5346 <writeAddr+0xb8>
      char dataout[] = {reg , (address & 0xff), ((address >> 8) & 0xff), 
         ((address >> 16) & 0xff), ((address >> 24) & 0xff), (address >> 32)};
      spi_transaction(dataout, datain, 6);
   } else {
      char lastByte = (address & 0xff);
      writeReg(reg, lastByte);
    5340:	60 2f       	mov	r22, r16
    5342:	0e 94 b8 28 	call	0x5170	; 0x5170 <writeReg>
   }
}
    5346:	2c 96       	adiw	r28, 0x0c	; 12
    5348:	0f b6       	in	r0, 0x3f	; 63
    534a:	f8 94       	cli
    534c:	de bf       	out	0x3e, r29	; 62
    534e:	0f be       	out	0x3f, r0	; 63
    5350:	cd bf       	out	0x3d, r28	; 61
    5352:	df 91       	pop	r29
    5354:	cf 91       	pop	r28
    5356:	1f 91       	pop	r17
    5358:	0f 91       	pop	r16
    535a:	ff 90       	pop	r15
    535c:	ef 90       	pop	r14
    535e:	df 90       	pop	r13
    5360:	08 95       	ret

00005362 <getLength>:

// Returns the dynamic payload length
uint8_t getLength(void) {
    5362:	cf 93       	push	r28
    5364:	df 93       	push	r29
    5366:	00 d0       	rcall	.+0      	; 0x5368 <getLength+0x6>
    5368:	00 d0       	rcall	.+0      	; 0x536a <getLength+0x8>
    536a:	cd b7       	in	r28, 0x3d	; 61
    536c:	de b7       	in	r29, 0x3e	; 62
   char dataout[] = {R_RX_PL_WID, NOP};
    536e:	80 e6       	ldi	r24, 0x60	; 96
    5370:	8b 83       	std	Y+3, r24	; 0x03
    5372:	8f ef       	ldi	r24, 0xFF	; 255
    5374:	8c 83       	std	Y+4, r24	; 0x04
   char datain[2];
   uint8_t payloadLength;
   spi_transaction(dataout, datain, 2);
    5376:	42 e0       	ldi	r20, 0x02	; 2
    5378:	be 01       	movw	r22, r28
    537a:	6f 5f       	subi	r22, 0xFF	; 255
    537c:	7f 4f       	sbci	r23, 0xFF	; 255
    537e:	ce 01       	movw	r24, r28
    5380:	03 96       	adiw	r24, 0x03	; 3
    5382:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
   payloadLength = datain[1];
    5386:	8a 81       	ldd	r24, Y+2	; 0x02
   // if this returns more than 32 then there is a problem. flush it
   if (payloadLength > 32) {
    5388:	81 32       	cpi	r24, 0x21	; 33
    538a:	58 f0       	brcs	.+22     	; 0x53a2 <getLength+0x40>
      dataout[0] = FLUSH_RX;
    538c:	82 ee       	ldi	r24, 0xE2	; 226
    538e:	8b 83       	std	Y+3, r24	; 0x03
      spi_transaction(dataout, datain, 1);
    5390:	41 e0       	ldi	r20, 0x01	; 1
    5392:	be 01       	movw	r22, r28
    5394:	6f 5f       	subi	r22, 0xFF	; 255
    5396:	7f 4f       	sbci	r23, 0xFF	; 255
    5398:	ce 01       	movw	r24, r28
    539a:	03 96       	adiw	r24, 0x03	; 3
    539c:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
      return 0;
    53a0:	80 e0       	ldi	r24, 0x00	; 0
   }
   return payloadLength;
}
    53a2:	0f 90       	pop	r0
    53a4:	0f 90       	pop	r0
    53a6:	0f 90       	pop	r0
    53a8:	0f 90       	pop	r0
    53aa:	df 91       	pop	r29
    53ac:	cf 91       	pop	r28
    53ae:	08 95       	ret

000053b0 <checkRx>:

// check and see if anything is in the receive buffer
uint8_t checkRx(void) {
   char status = readReg(STATUS);
    53b0:	87 e0       	ldi	r24, 0x07	; 7
    53b2:	0e 94 9e 28 	call	0x513c	; 0x513c <readReg>
   if (status & 0x0E) { // 0x0E = RX FIFO empty
    53b6:	98 2f       	mov	r25, r24
    53b8:	9e 70       	andi	r25, 0x0E	; 14
    53ba:	81 e0       	ldi	r24, 0x01	; 1
    53bc:	09 f0       	breq	.+2      	; 0x53c0 <checkRx+0x10>
    53be:	80 e0       	ldi	r24, 0x00	; 0
      return 0;
   } else {
      return 1;
   }
}
    53c0:	08 95       	ret

000053c2 <dynReceive>:

// Receive a payload with a dynamic length - returns length
// char * payload MUST BE 33 bytes. NO LESS
uint8_t dynReceive(char * payload) {
    53c2:	9f 92       	push	r9
    53c4:	af 92       	push	r10
    53c6:	bf 92       	push	r11
    53c8:	cf 92       	push	r12
    53ca:	df 92       	push	r13
    53cc:	ef 92       	push	r14
    53ce:	ff 92       	push	r15
    53d0:	0f 93       	push	r16
    53d2:	1f 93       	push	r17
    53d4:	cf 93       	push	r28
    53d6:	df 93       	push	r29
    53d8:	cd b7       	in	r28, 0x3d	; 61
    53da:	de b7       	in	r29, 0x3e	; 62
    53dc:	7c 01       	movw	r14, r24
   char status = readReg(STATUS);
   status |= 0x40; // writing to the rx fifo to clear it
   writeReg(STATUS,status);
   payload[payloadLength] = 0;
   return payloadLength;
}
    53de:	ad b6       	in	r10, 0x3d	; 61
    53e0:	be b6       	in	r11, 0x3e	; 62
}

// Receive a payload with a dynamic length - returns length
// char * payload MUST BE 33 bytes. NO LESS
uint8_t dynReceive(char * payload) {
   uint8_t rxcheck = checkRx();
    53e2:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <checkRx>
   if (rxcheck == 0) {
    53e6:	81 11       	cpse	r24, r1
    53e8:	02 c0       	rjmp	.+4      	; 0x53ee <dynReceive+0x2c>
      return 0;
    53ea:	91 2c       	mov	r9, r1
    53ec:	57 c0       	rjmp	.+174    	; 0x549c <dynReceive+0xda>
    53ee:	8f ed       	ldi	r24, 0xDF	; 223
    53f0:	9e e2       	ldi	r25, 0x2E	; 46
    53f2:	01 97       	sbiw	r24, 0x01	; 1
    53f4:	f1 f7       	brne	.-4      	; 0x53f2 <dynReceive+0x30>
    53f6:	00 c0       	rjmp	.+0      	; 0x53f8 <dynReceive+0x36>
    53f8:	00 00       	nop
   }   
   _delay_ms(3); // small delay so entire message is ready first
   uint8_t payloadLength = getLength();
    53fa:	0e 94 b1 29 	call	0x5362	; 0x5362 <getLength>
    53fe:	98 2e       	mov	r9, r24
   if (payloadLength == 0) {
    5400:	88 23       	and	r24, r24
    5402:	99 f3       	breq	.-26     	; 0x53ea <dynReceive+0x28>
      return 0;
   }
   char dataout[(payloadLength + 1)];
    5404:	08 2f       	mov	r16, r24
    5406:	10 e0       	ldi	r17, 0x00	; 0
    5408:	98 01       	movw	r18, r16
    540a:	2f 5f       	subi	r18, 0xFF	; 255
    540c:	3f 4f       	sbci	r19, 0xFF	; 255
    540e:	8d b7       	in	r24, 0x3d	; 61
    5410:	9e b7       	in	r25, 0x3e	; 62
    5412:	82 1b       	sub	r24, r18
    5414:	93 0b       	sbc	r25, r19
    5416:	0f b6       	in	r0, 0x3f	; 63
    5418:	f8 94       	cli
    541a:	9e bf       	out	0x3e, r25	; 62
    541c:	0f be       	out	0x3f, r0	; 63
    541e:	8d bf       	out	0x3d, r24	; 61
    5420:	ed b7       	in	r30, 0x3d	; 61
    5422:	fe b7       	in	r31, 0x3e	; 62
    5424:	31 96       	adiw	r30, 0x01	; 1
   char datain[(payloadLength + 1)];
    5426:	82 1b       	sub	r24, r18
    5428:	93 0b       	sbc	r25, r19
    542a:	0f b6       	in	r0, 0x3f	; 63
    542c:	f8 94       	cli
    542e:	9e bf       	out	0x3e, r25	; 62
    5430:	0f be       	out	0x3f, r0	; 63
    5432:	8d bf       	out	0x3d, r24	; 61
    5434:	cd b6       	in	r12, 0x3d	; 61
    5436:	de b6       	in	r13, 0x3e	; 62
    5438:	8f ef       	ldi	r24, 0xFF	; 255
    543a:	c8 1a       	sub	r12, r24
    543c:	d8 0a       	sbc	r13, r24
   dataout[0] = R_RX_PAYLOAD;
    543e:	81 e6       	ldi	r24, 0x61	; 97
    5440:	80 83       	st	Z, r24
   // set up dataout
   for (int x = 0; x < payloadLength; x++) {
    5442:	20 e0       	ldi	r18, 0x00	; 0
    5444:	30 e0       	ldi	r19, 0x00	; 0
      dataout[(x + 1)] = NOP;
    5446:	8f ef       	ldi	r24, 0xFF	; 255
   }
   char dataout[(payloadLength + 1)];
   char datain[(payloadLength + 1)];
   dataout[0] = R_RX_PAYLOAD;
   // set up dataout
   for (int x = 0; x < payloadLength; x++) {
    5448:	06 c0       	rjmp	.+12     	; 0x5456 <dynReceive+0x94>
      dataout[(x + 1)] = NOP;
    544a:	2f 5f       	subi	r18, 0xFF	; 255
    544c:	3f 4f       	sbci	r19, 0xFF	; 255
   }
}

// Receive a payload with a dynamic length - returns length
// char * payload MUST BE 33 bytes. NO LESS
uint8_t dynReceive(char * payload) {
    544e:	df 01       	movw	r26, r30
    5450:	a2 0f       	add	r26, r18
    5452:	b3 1f       	adc	r27, r19
   char dataout[(payloadLength + 1)];
   char datain[(payloadLength + 1)];
   dataout[0] = R_RX_PAYLOAD;
   // set up dataout
   for (int x = 0; x < payloadLength; x++) {
      dataout[(x + 1)] = NOP;
    5454:	8c 93       	st	X, r24
   }
   char dataout[(payloadLength + 1)];
   char datain[(payloadLength + 1)];
   dataout[0] = R_RX_PAYLOAD;
   // set up dataout
   for (int x = 0; x < payloadLength; x++) {
    5456:	20 17       	cp	r18, r16
    5458:	31 07       	cpc	r19, r17
    545a:	bc f3       	brlt	.-18     	; 0x544a <dynReceive+0x88>
      dataout[(x + 1)] = NOP;
   }
   spi_transaction(dataout, datain, (payloadLength + 1));
    545c:	49 2d       	mov	r20, r9
    545e:	4f 5f       	subi	r20, 0xFF	; 255
    5460:	b6 01       	movw	r22, r12
    5462:	cf 01       	movw	r24, r30
    5464:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
    5468:	f7 01       	movw	r30, r14
   // Assign the data to the payload pointer. dataout[0] = status so skip it
   for (int y = 0; y < payloadLength; y++) {
    546a:	20 e0       	ldi	r18, 0x00	; 0
    546c:	30 e0       	ldi	r19, 0x00	; 0
    546e:	07 c0       	rjmp	.+14     	; 0x547e <dynReceive+0xbc>
      payload[y] = datain[(y + 1)];
    5470:	2f 5f       	subi	r18, 0xFF	; 255
    5472:	3f 4f       	sbci	r19, 0xFF	; 255
   }
}

// Receive a payload with a dynamic length - returns length
// char * payload MUST BE 33 bytes. NO LESS
uint8_t dynReceive(char * payload) {
    5474:	d6 01       	movw	r26, r12
    5476:	a2 0f       	add	r26, r18
    5478:	b3 1f       	adc	r27, r19
      dataout[(x + 1)] = NOP;
   }
   spi_transaction(dataout, datain, (payloadLength + 1));
   // Assign the data to the payload pointer. dataout[0] = status so skip it
   for (int y = 0; y < payloadLength; y++) {
      payload[y] = datain[(y + 1)];
    547a:	8c 91       	ld	r24, X
    547c:	81 93       	st	Z+, r24
   for (int x = 0; x < payloadLength; x++) {
      dataout[(x + 1)] = NOP;
   }
   spi_transaction(dataout, datain, (payloadLength + 1));
   // Assign the data to the payload pointer. dataout[0] = status so skip it
   for (int y = 0; y < payloadLength; y++) {
    547e:	20 17       	cp	r18, r16
    5480:	31 07       	cpc	r19, r17
    5482:	b4 f3       	brlt	.-20     	; 0x5470 <dynReceive+0xae>
      payload[y] = datain[(y + 1)];
   }
   char status = readReg(STATUS);
    5484:	87 e0       	ldi	r24, 0x07	; 7
    5486:	0e 94 9e 28 	call	0x513c	; 0x513c <readReg>
   status |= 0x40; // writing to the rx fifo to clear it
    548a:	68 2f       	mov	r22, r24
    548c:	60 64       	ori	r22, 0x40	; 64
   writeReg(STATUS,status);
    548e:	87 e0       	ldi	r24, 0x07	; 7
    5490:	0e 94 b8 28 	call	0x5170	; 0x5170 <writeReg>
   payload[payloadLength] = 0;
    5494:	f7 01       	movw	r30, r14
    5496:	e9 0d       	add	r30, r9
    5498:	f1 1d       	adc	r31, r1
    549a:	10 82       	st	Z, r1
   return payloadLength;
}
    549c:	89 2d       	mov	r24, r9
    549e:	0f b6       	in	r0, 0x3f	; 63
    54a0:	f8 94       	cli
    54a2:	be be       	out	0x3e, r11	; 62
    54a4:	0f be       	out	0x3f, r0	; 63
    54a6:	ad be       	out	0x3d, r10	; 61
    54a8:	df 91       	pop	r29
    54aa:	cf 91       	pop	r28
    54ac:	1f 91       	pop	r17
    54ae:	0f 91       	pop	r16
    54b0:	ff 90       	pop	r15
    54b2:	ef 90       	pop	r14
    54b4:	df 90       	pop	r13
    54b6:	cf 90       	pop	r12
    54b8:	bf 90       	pop	r11
    54ba:	af 90       	pop	r10
    54bc:	9f 90       	pop	r9
    54be:	08 95       	ret

000054c0 <receive>:

// Receive a fixed length payload
// char * payload must be DATA_SIZE or larger
uint8_t receive(char * payload) {
    54c0:	cf 92       	push	r12
    54c2:	df 92       	push	r13
    54c4:	ef 92       	push	r14
    54c6:	ff 92       	push	r15
    54c8:	0f 93       	push	r16
    54ca:	1f 93       	push	r17
    54cc:	cf 93       	push	r28
    54ce:	df 93       	push	r29
    54d0:	cd b7       	in	r28, 0x3d	; 61
    54d2:	de b7       	in	r29, 0x3e	; 62
    54d4:	c2 54       	subi	r28, 0x42	; 66
    54d6:	d1 09       	sbc	r29, r1
    54d8:	0f b6       	in	r0, 0x3f	; 63
    54da:	f8 94       	cli
    54dc:	de bf       	out	0x3e, r29	; 62
    54de:	0f be       	out	0x3f, r0	; 63
    54e0:	cd bf       	out	0x3d, r28	; 61
    54e2:	6c 01       	movw	r12, r24
   uint8_t rxcheck = checkRx();
    54e4:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <checkRx>
   if (rxcheck == 0) {
    54e8:	88 23       	and	r24, r24
    54ea:	09 f1       	breq	.+66     	; 0x552e <receive+0x6e>
      return 0;
   }   
   char dataout[(DATA_SIZE + 1)];
   char datain[(DATA_SIZE + 1)];
   dataout[0] = R_RX_PAYLOAD;
    54ec:	81 e6       	ldi	r24, 0x61	; 97
    54ee:	8a a3       	std	Y+34, r24	; 0x22
    54f0:	8e 01       	movw	r16, r28
    54f2:	0d 5d       	subi	r16, 0xDD	; 221
    54f4:	1f 4f       	sbci	r17, 0xFF	; 255
   return payloadLength;
}

// Receive a fixed length payload
// char * payload must be DATA_SIZE or larger
uint8_t receive(char * payload) {
    54f6:	7e 01       	movw	r14, r28
    54f8:	83 e4       	ldi	r24, 0x43	; 67
    54fa:	e8 0e       	add	r14, r24
    54fc:	f1 1c       	adc	r15, r1
    54fe:	f8 01       	movw	r30, r16
   char dataout[(DATA_SIZE + 1)];
   char datain[(DATA_SIZE + 1)];
   dataout[0] = R_RX_PAYLOAD;
   // set up dataout
   for (int x = 0; x < DATA_SIZE; x++) {
      dataout[(x + 1)] = NOP;
    5500:	8f ef       	ldi	r24, 0xFF	; 255
    5502:	81 93       	st	Z+, r24
   }   
   char dataout[(DATA_SIZE + 1)];
   char datain[(DATA_SIZE + 1)];
   dataout[0] = R_RX_PAYLOAD;
   // set up dataout
   for (int x = 0; x < DATA_SIZE; x++) {
    5504:	ee 15       	cp	r30, r14
    5506:	ff 05       	cpc	r31, r15
    5508:	e1 f7       	brne	.-8      	; 0x5502 <receive+0x42>
      dataout[(x + 1)] = NOP;
   }
   spi_transaction(dataout, datain, (DATA_SIZE + 1 ));
    550a:	41 e2       	ldi	r20, 0x21	; 33
    550c:	be 01       	movw	r22, r28
    550e:	6f 5f       	subi	r22, 0xFF	; 255
    5510:	7f 4f       	sbci	r23, 0xFF	; 255
    5512:	ce 01       	movw	r24, r28
    5514:	82 96       	adiw	r24, 0x22	; 34
    5516:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
    551a:	f6 01       	movw	r30, r12
   // Assign the data to the payload pointer. dataout[0] = status so skip it
   for (int y = 0; y < DATA_SIZE; y++) {
      payload[y] = dataout[(y + 1)];
    551c:	d8 01       	movw	r26, r16
    551e:	8d 91       	ld	r24, X+
    5520:	8d 01       	movw	r16, r26
    5522:	81 93       	st	Z+, r24
   for (int x = 0; x < DATA_SIZE; x++) {
      dataout[(x + 1)] = NOP;
   }
   spi_transaction(dataout, datain, (DATA_SIZE + 1 ));
   // Assign the data to the payload pointer. dataout[0] = status so skip it
   for (int y = 0; y < DATA_SIZE; y++) {
    5524:	ae 15       	cp	r26, r14
    5526:	bf 05       	cpc	r27, r15
    5528:	c9 f7       	brne	.-14     	; 0x551c <receive+0x5c>
      payload[y] = dataout[(y + 1)];
   }
   return 1;
    552a:	81 e0       	ldi	r24, 0x01	; 1
    552c:	01 c0       	rjmp	.+2      	; 0x5530 <receive+0x70>
// Receive a fixed length payload
// char * payload must be DATA_SIZE or larger
uint8_t receive(char * payload) {
   uint8_t rxcheck = checkRx();
   if (rxcheck == 0) {
      return 0;
    552e:	80 e0       	ldi	r24, 0x00	; 0
   // Assign the data to the payload pointer. dataout[0] = status so skip it
   for (int y = 0; y < DATA_SIZE; y++) {
      payload[y] = dataout[(y + 1)];
   }
   return 1;
}
    5530:	ce 5b       	subi	r28, 0xBE	; 190
    5532:	df 4f       	sbci	r29, 0xFF	; 255
    5534:	0f b6       	in	r0, 0x3f	; 63
    5536:	f8 94       	cli
    5538:	de bf       	out	0x3e, r29	; 62
    553a:	0f be       	out	0x3f, r0	; 63
    553c:	cd bf       	out	0x3d, r28	; 61
    553e:	df 91       	pop	r29
    5540:	cf 91       	pop	r28
    5542:	1f 91       	pop	r17
    5544:	0f 91       	pop	r16
    5546:	ff 90       	pop	r15
    5548:	ef 90       	pop	r14
    554a:	df 90       	pop	r13
    554c:	cf 90       	pop	r12
    554e:	08 95       	ret

00005550 <transmit>:

// Send something.  Make sure you turn off receive first
uint8_t transmit(char * payload, uint8_t datasize) {
    5550:	cf 92       	push	r12
    5552:	df 92       	push	r13
    5554:	ef 92       	push	r14
    5556:	ff 92       	push	r15
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	00 d0       	rcall	.+0      	; 0x5562 <transmit+0x12>
    5562:	cd b7       	in	r28, 0x3d	; 61
    5564:	de b7       	in	r29, 0x3e	; 62
    5566:	46 2f       	mov	r20, r22
   }
   // if we are here we timed out
   spi_transaction(flush,dontcare,1);
   powerDown();
   return 0;
}
    5568:	ed b6       	in	r14, 0x3d	; 61
    556a:	fe b6       	in	r15, 0x3e	; 62
   return 1;
}

// Send something.  Make sure you turn off receive first
uint8_t transmit(char * payload, uint8_t datasize) {
   char dataout[(datasize + 1)];
    556c:	06 2f       	mov	r16, r22
    556e:	10 e0       	ldi	r17, 0x00	; 0
    5570:	98 01       	movw	r18, r16
    5572:	2f 5f       	subi	r18, 0xFF	; 255
    5574:	3f 4f       	sbci	r19, 0xFF	; 255
    5576:	6d b7       	in	r22, 0x3d	; 61
    5578:	7e b7       	in	r23, 0x3e	; 62
    557a:	62 1b       	sub	r22, r18
    557c:	73 0b       	sbc	r23, r19
    557e:	0f b6       	in	r0, 0x3f	; 63
    5580:	f8 94       	cli
    5582:	7e bf       	out	0x3e, r23	; 62
    5584:	0f be       	out	0x3f, r0	; 63
    5586:	6d bf       	out	0x3d, r22	; 61
    5588:	ad b7       	in	r26, 0x3d	; 61
    558a:	be b7       	in	r27, 0x3e	; 62
    558c:	11 96       	adiw	r26, 0x01	; 1
   char datain[(datasize + 1)];
    558e:	ed b7       	in	r30, 0x3d	; 61
    5590:	fe b7       	in	r31, 0x3e	; 62
    5592:	e2 1b       	sub	r30, r18
    5594:	f3 0b       	sbc	r31, r19
    5596:	0f b6       	in	r0, 0x3f	; 63
    5598:	f8 94       	cli
    559a:	fe bf       	out	0x3e, r31	; 62
    559c:	0f be       	out	0x3f, r0	; 63
    559e:	ed bf       	out	0x3d, r30	; 61
    55a0:	2d b7       	in	r18, 0x3d	; 61
    55a2:	3e b7       	in	r19, 0x3e	; 62
    55a4:	2f 5f       	subi	r18, 0xFF	; 255
    55a6:	3f 4f       	sbci	r19, 0xFF	; 255
    55a8:	b9 01       	movw	r22, r18
   char status;
   char flush[] = {FLUSH_TX}; // flush tx command
    55aa:	21 ee       	ldi	r18, 0xE1	; 225
    55ac:	2a 83       	std	Y+2, r18	; 0x02
   char dontcare[1]; // need a variable to receive
   dataout[0] = W_TX_PAYLOAD;
    55ae:	20 ea       	ldi	r18, 0xA0	; 160
    55b0:	2c 93       	st	X, r18
    55b2:	6c 01       	movw	r12, r24
   for (int x = 0; x < datasize; x++) {
    55b4:	20 e0       	ldi	r18, 0x00	; 0
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	0a c0       	rjmp	.+20     	; 0x55ce <transmit+0x7e>
      dataout[(x+1)] = payload[x];
    55ba:	2f 5f       	subi	r18, 0xFF	; 255
    55bc:	3f 4f       	sbci	r19, 0xFF	; 255
    55be:	f6 01       	movw	r30, r12
    55c0:	51 91       	ld	r21, Z+
    55c2:	6f 01       	movw	r12, r30
   }
   return 1;
}

// Send something.  Make sure you turn off receive first
uint8_t transmit(char * payload, uint8_t datasize) {
    55c4:	cd 01       	movw	r24, r26
    55c6:	82 0f       	add	r24, r18
    55c8:	93 1f       	adc	r25, r19
   char status;
   char flush[] = {FLUSH_TX}; // flush tx command
   char dontcare[1]; // need a variable to receive
   dataout[0] = W_TX_PAYLOAD;
   for (int x = 0; x < datasize; x++) {
      dataout[(x+1)] = payload[x];
    55ca:	fc 01       	movw	r30, r24
    55cc:	50 83       	st	Z, r21
   char datain[(datasize + 1)];
   char status;
   char flush[] = {FLUSH_TX}; // flush tx command
   char dontcare[1]; // need a variable to receive
   dataout[0] = W_TX_PAYLOAD;
   for (int x = 0; x < datasize; x++) {
    55ce:	20 17       	cp	r18, r16
    55d0:	31 07       	cpc	r19, r17
    55d2:	9c f3       	brlt	.-26     	; 0x55ba <transmit+0x6a>
      dataout[(x+1)] = payload[x];
   }
   // fill the tx buffer
   spi_transaction(dataout, datain, (datasize +1));
    55d4:	4f 5f       	subi	r20, 0xFF	; 255
    55d6:	cd 01       	movw	r24, r26
    55d8:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
   powerUp();
    55dc:	0e 94 9a 28 	call	0x5134	; 0x5134 <powerUp>
    55e0:	04 e6       	ldi	r16, 0x64	; 100
    55e2:	10 e0       	ldi	r17, 0x00	; 0
    55e4:	8f e3       	ldi	r24, 0x3F	; 63
    55e6:	9f e1       	ldi	r25, 0x1F	; 31
    55e8:	01 97       	sbiw	r24, 0x01	; 1
    55ea:	f1 f7       	brne	.-4      	; 0x55e8 <transmit+0x98>
    55ec:	00 c0       	rjmp	.+0      	; 0x55ee <transmit+0x9e>
    55ee:	00 00       	nop
   // self induced time out loop incase it doesn't respond
   for (int y = 0; y < 100; y ++) {
      _delay_ms(2); // wait some arbitrary time
      // get tx status and see if it worked
      status = readReg(STATUS);
    55f0:	87 e0       	ldi	r24, 0x07	; 7
    55f2:	0e 94 9e 28 	call	0x513c	; 0x513c <readReg>
    55f6:	68 2f       	mov	r22, r24
      if ((status & (1 << TX_DS)) == (1 << TX_DS)) { // it worked
    55f8:	85 ff       	sbrs	r24, 5
    55fa:	0d c0       	rjmp	.+26     	; 0x5616 <transmit+0xc6>
         writeReg(STATUS, status); // clear the status
    55fc:	87 e0       	ldi	r24, 0x07	; 7
    55fe:	0e 94 b8 28 	call	0x5170	; 0x5170 <writeReg>
         powerDown();
    5602:	0e 94 9c 28 	call	0x5138	; 0x5138 <powerDown>
    5606:	ef e3       	ldi	r30, 0x3F	; 63
    5608:	ff e1       	ldi	r31, 0x1F	; 31
    560a:	31 97       	sbiw	r30, 0x01	; 1
    560c:	f1 f7       	brne	.-4      	; 0x560a <transmit+0xba>
    560e:	00 c0       	rjmp	.+0      	; 0x5610 <transmit+0xc0>
    5610:	00 00       	nop
         _delay_ms(2); // let receiver keep up
         return 1;
    5612:	81 e0       	ldi	r24, 0x01	; 1
    5614:	14 c0       	rjmp	.+40     	; 0x563e <transmit+0xee>
      } else if ((status & (1 << MAX_RT)) == (1 << MAX_RT)) { // radio time out
    5616:	84 ff       	sbrs	r24, 4
    5618:	04 c0       	rjmp	.+8      	; 0x5622 <transmit+0xd2>
         writeReg(STATUS, status);
    561a:	87 e0       	ldi	r24, 0x07	; 7
    561c:	0e 94 b8 28 	call	0x5170	; 0x5170 <writeReg>
    5620:	03 c0       	rjmp	.+6      	; 0x5628 <transmit+0xd8>
    5622:	01 50       	subi	r16, 0x01	; 1
    5624:	11 09       	sbc	r17, r1
   }
   // fill the tx buffer
   spi_transaction(dataout, datain, (datasize +1));
   powerUp();
   // self induced time out loop incase it doesn't respond
   for (int y = 0; y < 100; y ++) {
    5626:	f1 f6       	brne	.-68     	; 0x55e4 <transmit+0x94>
         powerDown();
         return 0;
      }
   }
   // if we are here we timed out
   spi_transaction(flush,dontcare,1);
    5628:	41 e0       	ldi	r20, 0x01	; 1
    562a:	be 01       	movw	r22, r28
    562c:	6f 5f       	subi	r22, 0xFF	; 255
    562e:	7f 4f       	sbci	r23, 0xFF	; 255
    5630:	ce 01       	movw	r24, r28
    5632:	02 96       	adiw	r24, 0x02	; 2
    5634:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
   powerDown();
    5638:	0e 94 9c 28 	call	0x5138	; 0x5138 <powerDown>
   return 0;
    563c:	80 e0       	ldi	r24, 0x00	; 0
}
    563e:	0f b6       	in	r0, 0x3f	; 63
    5640:	f8 94       	cli
    5642:	fe be       	out	0x3e, r15	; 62
    5644:	0f be       	out	0x3f, r0	; 63
    5646:	ed be       	out	0x3d, r14	; 61
    5648:	0f 90       	pop	r0
    564a:	0f 90       	pop	r0
    564c:	df 91       	pop	r29
    564e:	cf 91       	pop	r28
    5650:	1f 91       	pop	r17
    5652:	0f 91       	pop	r16
    5654:	ff 90       	pop	r15
    5656:	ef 90       	pop	r14
    5658:	df 90       	pop	r13
    565a:	cf 90       	pop	r12
    565c:	08 95       	ret

0000565e <flushme>:

// flush the buffers
void flushme(void) {
    565e:	cf 93       	push	r28
    5660:	df 93       	push	r29
    5662:	00 d0       	rcall	.+0      	; 0x5664 <flushme+0x6>
    5664:	cd b7       	in	r28, 0x3d	; 61
    5666:	de b7       	in	r29, 0x3e	; 62
   char flush[] = {FLUSH_TX};
    5668:	81 ee       	ldi	r24, 0xE1	; 225
    566a:	8a 83       	std	Y+2, r24	; 0x02
   char dontcare[1];
   spi_transaction(flush, dontcare, 1);
    566c:	41 e0       	ldi	r20, 0x01	; 1
    566e:	be 01       	movw	r22, r28
    5670:	6f 5f       	subi	r22, 0xFF	; 255
    5672:	7f 4f       	sbci	r23, 0xFF	; 255
    5674:	ce 01       	movw	r24, r28
    5676:	02 96       	adiw	r24, 0x02	; 2
    5678:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
   flush[0] = FLUSH_RX;
    567c:	82 ee       	ldi	r24, 0xE2	; 226
    567e:	8a 83       	std	Y+2, r24	; 0x02
   spi_transaction(flush, dontcare, 1);
    5680:	41 e0       	ldi	r20, 0x01	; 1
    5682:	be 01       	movw	r22, r28
    5684:	6f 5f       	subi	r22, 0xFF	; 255
    5686:	7f 4f       	sbci	r23, 0xFF	; 255
    5688:	ce 01       	movw	r24, r28
    568a:	02 96       	adiw	r24, 0x02	; 2
    568c:	0e 94 7f 28 	call	0x50fe	; 0x50fe <spi_transaction>
}
    5690:	0f 90       	pop	r0
    5692:	0f 90       	pop	r0
    5694:	df 91       	pop	r29
    5696:	cf 91       	pop	r28
    5698:	08 95       	ret

0000569a <nrfInit>:
#include <util/delay.h>

// connect to the radio and get the party started
void nrfInit(void) 
{
   spi_init();
    569a:	0e 94 77 28 	call	0x50ee	; 0x50ee <spi_init>

   // Set up the CSN and CE as outputs
   CE_DDR |= (1<<CE_PIN);
    569e:	21 9a       	sbi	0x04, 1	; 4
   CSN_DDR |= (1<<CSN_PIN);
    56a0:	22 9a       	sbi	0x04, 2	; 4
   flushme(); // start with clean buffers
    56a2:	0c 94 2f 2b 	jmp	0x565e	; 0x565e <flushme>

000056a6 <main>:


// send receive addresses
static uint64_t rx_addr_p0, rx_addr_p1, rx_addr_p2, rx_addr_p3, rx_addr_p4, rx_addr_p5, tx_addr;

int main(void) {
    56a6:	cf 93       	push	r28
    56a8:	df 93       	push	r29
    56aa:	cd b7       	in	r28, 0x3d	; 61
    56ac:	de b7       	in	r29, 0x3e	; 62
    56ae:	a7 97       	sbiw	r28, 0x27	; 39
    56b0:	0f b6       	in	r0, 0x3f	; 63
    56b2:	f8 94       	cli
    56b4:	de bf       	out	0x3e, r29	; 62
    56b6:	0f be       	out	0x3f, r0	; 63
    56b8:	cd bf       	out	0x3d, r28	; 61
    receiveBuffer[0] = 0;
    56ba:	10 92 a4 02 	sts	0x02A4, r1
    radioReceiveBuffer[0] = 0;
    56be:	10 92 c2 02 	sts	0x02C2, r1
    int x = 0;

    INDICATOR_DDR |= INDICATOR_PIN;
    56c2:	52 9a       	sbi	0x0a, 2	; 10
    56c4:	84 e0       	ldi	r24, 0x04	; 4
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    for (x = 0; x < 4; x++) {
        INDICATOR_PORT |= INDICATOR_PIN;
    56c8:	5a 9a       	sbi	0x0b, 2	; 11
    56ca:	2f ef       	ldi	r18, 0xFF	; 255
    56cc:	30 e7       	ldi	r19, 0x70	; 112
    56ce:	42 e0       	ldi	r20, 0x02	; 2
    56d0:	21 50       	subi	r18, 0x01	; 1
    56d2:	30 40       	sbci	r19, 0x00	; 0
    56d4:	40 40       	sbci	r20, 0x00	; 0
    56d6:	e1 f7       	brne	.-8      	; 0x56d0 <main+0x2a>
    56d8:	00 c0       	rjmp	.+0      	; 0x56da <main+0x34>
    56da:	00 00       	nop
        _delay_ms(50);
        INDICATOR_PORT &= ~(INDICATOR_PIN);
    56dc:	5a 98       	cbi	0x0b, 2	; 11
    56de:	5f ef       	ldi	r21, 0xFF	; 255
    56e0:	a1 ee       	ldi	r26, 0xE1	; 225
    56e2:	b4 e0       	ldi	r27, 0x04	; 4
    56e4:	51 50       	subi	r21, 0x01	; 1
    56e6:	a0 40       	sbci	r26, 0x00	; 0
    56e8:	b0 40       	sbci	r27, 0x00	; 0
    56ea:	e1 f7       	brne	.-8      	; 0x56e4 <main+0x3e>
    56ec:	00 c0       	rjmp	.+0      	; 0x56ee <main+0x48>
    56ee:	00 00       	nop
    56f0:	01 97       	sbiw	r24, 0x01	; 1
    receiveBuffer[0] = 0;
    radioReceiveBuffer[0] = 0;
    int x = 0;

    INDICATOR_DDR |= INDICATOR_PIN;
    for (x = 0; x < 4; x++) {
    56f2:	51 f7       	brne	.-44     	; 0x56c8 <main+0x22>
        INDICATOR_PORT |= INDICATOR_PIN;
        _delay_ms(50);
        INDICATOR_PORT &= ~(INDICATOR_PIN);
        _delay_ms(100);
    }
    INDICATOR_PORT |= INDICATOR_PIN;
    56f4:	5a 9a       	sbi	0x0b, 2	; 11
    56f6:	e2 ee       	ldi	r30, 0xE2	; 226
    56f8:	f2 e0       	ldi	r31, 0x02	; 2


    // set color changes to blank
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        colorChanges[x][0] = 0;
        colorChanges[x][1] = 1;
    56fa:	81 e0       	ldi	r24, 0x01	; 1


// send receive addresses
static uint64_t rx_addr_p0, rx_addr_p1, rx_addr_p2, rx_addr_p3, rx_addr_p4, rx_addr_p5, tx_addr;

int main(void) {
    56fc:	df 01       	movw	r26, r30
    56fe:	12 97       	sbiw	r26, 0x02	; 2
    INDICATOR_PORT |= INDICATOR_PIN;


    // set color changes to blank
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        colorChanges[x][0] = 0;
    5700:	1c 92       	st	X, r1


// send receive addresses
static uint64_t rx_addr_p0, rx_addr_p1, rx_addr_p2, rx_addr_p3, rx_addr_p4, rx_addr_p5, tx_addr;

int main(void) {
    5702:	df 01       	movw	r26, r30
    5704:	11 97       	sbiw	r26, 0x01	; 1


    // set color changes to blank
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
        colorChanges[x][0] = 0;
        colorChanges[x][1] = 1;
    5706:	8c 93       	st	X, r24
        colorChanges[x][2] = 0;
    5708:	10 82       	st	Z, r1
    570a:	33 96       	adiw	r30, 0x03	; 3
    }
    INDICATOR_PORT |= INDICATOR_PIN;


    // set color changes to blank
    for (x = 0; x < NUM_COLOR_CHANGES; x++) {
    570c:	22 e0       	ldi	r18, 0x02	; 2
    570e:	e4 3f       	cpi	r30, 0xF4	; 244
    5710:	f2 07       	cpc	r31, r18
    5712:	a1 f7       	brne	.-24     	; 0x56fc <main+0x56>
        colorChanges[x][1] = 1;
        colorChanges[x][2] = 0;
    }

    // just initializing memory
    globalYear = globalMonth = globalDay = globalHour = globalMinute = globalSecond = dow = 0;
    5714:	10 92 f3 02 	sts	0x02F3, r1
    5718:	10 92 f2 02 	sts	0x02F2, r1
    571c:	10 92 f5 02 	sts	0x02F5, r1
    5720:	10 92 f4 02 	sts	0x02F4, r1
    5724:	10 92 f7 02 	sts	0x02F7, r1
    5728:	10 92 f6 02 	sts	0x02F6, r1
    572c:	10 92 f9 02 	sts	0x02F9, r1
    5730:	10 92 f8 02 	sts	0x02F8, r1
    5734:	10 92 fb 02 	sts	0x02FB, r1
    5738:	10 92 fa 02 	sts	0x02FA, r1
    573c:	10 92 fd 02 	sts	0x02FD, r1
    5740:	10 92 fc 02 	sts	0x02FC, r1
    5744:	10 92 ff 02 	sts	0x02FF, r1
    5748:	10 92 fe 02 	sts	0x02FE, r1
    574c:	e0 e0       	ldi	r30, 0x00	; 0
    574e:	f3 e0       	ldi	r31, 0x03	; 3
    5750:	80 e4       	ldi	r24, 0x40	; 64
    5752:	93 e0       	ldi	r25, 0x03	; 3
    5754:	60 e5       	ldi	r22, 0x50	; 80
    5756:	73 e0       	ldi	r23, 0x03	; 3
    for (x = 0; x < NUM_SWITCHES; x++) {
        switchStatus[x] = 0;
        switchStuff[x] = 255;
    5758:	4f ef       	ldi	r20, 0xFF	; 255
        switchBright[x] = 16;
    575a:	30 e1       	ldi	r19, 0x10	; 16
    }

    // just initializing memory
    globalYear = globalMonth = globalDay = globalHour = globalMinute = globalSecond = dow = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
        switchStatus[x] = 0;
    575c:	11 92       	st	Z+, r1
    575e:	11 92       	st	Z+, r1
    5760:	11 92       	st	Z+, r1
    5762:	11 92       	st	Z+, r1
        switchStuff[x] = 255;
    5764:	2f ef       	ldi	r18, 0xFF	; 255
    5766:	dc 01       	movw	r26, r24
    5768:	4d 93       	st	X+, r20
    576a:	cd 01       	movw	r24, r26
        switchBright[x] = 16;
    576c:	db 01       	movw	r26, r22
    576e:	3d 93       	st	X+, r19
    5770:	bd 01       	movw	r22, r26
        colorChanges[x][2] = 0;
    }

    // just initializing memory
    globalYear = globalMonth = globalDay = globalHour = globalMinute = globalSecond = dow = 0;
    for (x = 0; x < NUM_SWITCHES; x++) {
    5772:	b3 e0       	ldi	r27, 0x03	; 3
    5774:	e0 34       	cpi	r30, 0x40	; 64
    5776:	fb 07       	cpc	r31, r27
    5778:	89 f7       	brne	.-30     	; 0x575c <main+0xb6>
        switchStatus[x] = 0;
        switchStuff[x] = 255;
        switchBright[x] = 16;
    }
    for (x = 0; x < NUM_INPUTS; x++) {
        inputs[x][0] = 255;
    577a:	20 93 60 03 	sts	0x0360, r18
    577e:	20 93 68 03 	sts	0x0368, r18
    5782:	20 93 70 03 	sts	0x0370, r18
    5786:	20 93 78 03 	sts	0x0378, r18
    }
    sei();
    578a:	78 94       	sei

    // initialize programs
    for (x = 0; x < MAX_PROGRAM; x++) {
    578c:	00 e0       	ldi	r16, 0x00	; 0
    578e:	10 e0       	ldi	r17, 0x00	; 0
        clearTheProgram(x);
    5790:	c8 01       	movw	r24, r16
    5792:	0e 94 a2 02 	call	0x544	; 0x544 <clearTheProgram>
        inputs[x][0] = 255;
    }
    sei();

    // initialize programs
    for (x = 0; x < MAX_PROGRAM; x++) {
    5796:	0f 5f       	subi	r16, 0xFF	; 255
    5798:	1f 4f       	sbci	r17, 0xFF	; 255
    579a:	0a 30       	cpi	r16, 0x0A	; 10
    579c:	11 05       	cpc	r17, r1
    579e:	c1 f7       	brne	.-16     	; 0x5790 <main+0xea>
        clearTheProgram(x);
    }



    clockInit();
    57a0:	0e 94 c2 03 	call	0x784	; 0x784 <clockInit>
    radioInit();
    57a4:	0e 94 24 25 	call	0x4a48	; 0x4a48 <radioInit>
    startRx();
    57a8:	0e 94 db 28 	call	0x51b6	; 0x51b6 <startRx>
    // make sure general init is after radioinit
    generalInit();
    57ac:	0e 94 01 08 	call	0x1002	; 0x1002 <generalInit>
    startClock();
    57b0:	0e 94 cf 03 	call	0x79e	; 0x79e <startClock>



    // radio related
    char radioCommand[32];
    radioCommand[0] = 0;
    57b4:	19 82       	std	Y+1, r1	; 0x01
    char tempRadioSerialIn[] = "000000";
    57b6:	87 e0       	ldi	r24, 0x07	; 7
    57b8:	ec e7       	ldi	r30, 0x7C	; 124
    57ba:	f2 e0       	ldi	r31, 0x02	; 2
    57bc:	de 01       	movw	r26, r28
    57be:	91 96       	adiw	r26, 0x21	; 33
    57c0:	01 90       	ld	r0, Z+
    57c2:	0d 92       	st	X+, r0
    57c4:	8a 95       	dec	r24
    57c6:	e1 f7       	brne	.-8      	; 0x57c0 <main+0x11a>

    

    while (1) {
        // what to run every second
        if (newSecond == 1) {
    57c8:	80 91 80 03 	lds	r24, 0x0380
    57cc:	81 30       	cpi	r24, 0x01	; 1
    57ce:	31 f4       	brne	.+12     	; 0x57dc <main+0x136>
            newSecond = 0;
    57d0:	10 92 80 03 	sts	0x0380, r1
            timerCheck();
    57d4:	0e 94 46 05 	call	0xa8c	; 0xa8c <timerCheck>
            inputCheck();
    57d8:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <inputCheck>
        }
        // runs only if a switch changed
        if (switchChanged == 1) {
    57dc:	80 91 81 03 	lds	r24, 0x0381
    57e0:	81 30       	cpi	r24, 0x01	; 1
    57e2:	21 f4       	brne	.+8      	; 0x57ec <main+0x146>
            switchChanged = 0;
    57e4:	10 92 81 03 	sts	0x0381, r1
            switchOnOff();
    57e8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <switchOnOff>
        }
        if (runHue == 1) {
    57ec:	80 91 82 03 	lds	r24, 0x0382
    57f0:	81 30       	cpi	r24, 0x01	; 1
    57f2:	11 f4       	brne	.+4      	; 0x57f8 <main+0x152>
            runHueFunction();
    57f4:	0e 94 b0 01 	call	0x360	; 0x360 <runHueFunction>
        }
        if (runColorChanges == 1) {
    57f8:	10 91 83 03 	lds	r17, 0x0383
    57fc:	11 30       	cpi	r17, 0x01	; 1
    57fe:	11 f4       	brne	.+4      	; 0x5804 <main+0x15e>
            runColorFunction();
    5800:	0e 94 38 01 	call	0x270	; 0x270 <runColorFunction>
        }
        if (tenthFlag == 1) {
    5804:	80 91 84 03 	lds	r24, 0x0384
    5808:	81 30       	cpi	r24, 0x01	; 1
    580a:	69 f4       	brne	.+26     	; 0x5826 <main+0x180>
            tenthFlag = 0;
    580c:	10 92 84 03 	sts	0x0384, r1
            inputTenthCheck();
    5810:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <inputTenthCheck>
            if (failCondition > 0) {
    5814:	80 91 00 01 	lds	r24, 0x0100
    5818:	81 11       	cpse	r24, r1
                flashFail();
    581a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <flashFail>
            }
            if (runColorChanges == 1) {
    581e:	11 30       	cpi	r17, 0x01	; 1
    5820:	11 f4       	brne	.+4      	; 0x5826 <main+0x180>
                runColorFunction();
    5822:	0e 94 38 01 	call	0x270	; 0x270 <runColorFunction>
            }
        }
        if (newMinute == 1) {
    5826:	80 91 85 03 	lds	r24, 0x0385
    582a:	81 30       	cpi	r24, 0x01	; 1
    582c:	61 f4       	brne	.+24     	; 0x5846 <main+0x1a0>
            newMinute = 0;
    582e:	10 92 85 03 	sts	0x0385, r1
            if (panicMyClockIsNotSet == 1) {
    5832:	80 91 01 01 	lds	r24, 0x0101
    5836:	81 30       	cpi	r24, 0x01	; 1
    5838:	21 f4       	brne	.+8      	; 0x5842 <main+0x19c>
                generalStatus("gsq");
    583a:	8a e9       	ldi	r24, 0x9A	; 154
    583c:	92 e0       	ldi	r25, 0x02	; 2
    583e:	0e 94 26 13 	call	0x264c	; 0x264c <generalStatus>
            }
            radioTest();
    5842:	0e 94 ed 24 	call	0x49da	; 0x49da <radioTest>
        }
        // check for radio instructions
        payloadLength = dynReceive(radioReceiveBuffer);
    5846:	82 ec       	ldi	r24, 0xC2	; 194
    5848:	92 e0       	ldi	r25, 0x02	; 2
    584a:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <dynReceive>
    584e:	08 2f       	mov	r16, r24
    5850:	10 e0       	ldi	r17, 0x00	; 0
        if (payloadLength > 2) {
    5852:	03 30       	cpi	r16, 0x03	; 3
    5854:	11 05       	cpc	r17, r1
    5856:	0c f4       	brge	.+2      	; 0x585a <main+0x1b4>
    5858:	b7 cf       	rjmp	.-146    	; 0x57c8 <main+0x122>
    585a:	2f ef       	ldi	r18, 0xFF	; 255
    585c:	34 e6       	ldi	r19, 0x64	; 100
    585e:	44 e0       	ldi	r20, 0x04	; 4
    5860:	21 50       	subi	r18, 0x01	; 1
    5862:	30 40       	sbci	r19, 0x00	; 0
    5864:	40 40       	sbci	r20, 0x00	; 0
    5866:	e1 f7       	brne	.-8      	; 0x5860 <main+0x1ba>
    5868:	00 c0       	rjmp	.+0      	; 0x586a <main+0x1c4>
    586a:	00 00       	nop
            // wait so the receiver won't miss our response
            _delay_ms(90);
            // just a command to preceed the serial number
            if (radioReceiveBuffer[0] == 'z') {
    586c:	80 91 c2 02 	lds	r24, 0x02C2
    5870:	8a 37       	cpi	r24, 0x7A	; 122
    5872:	59 f5       	brne	.+86     	; 0x58ca <main+0x224>
    5874:	e3 ec       	ldi	r30, 0xC3	; 195
    5876:	f2 e0       	ldi	r31, 0x02	; 2
    5878:	de 01       	movw	r26, r28
    587a:	91 96       	adiw	r26, 0x21	; 33
                // radio is sending a serial number to compare to
                for (x = 0; x < 6; x++) {
                    tempRadioSerialIn[x] = radioReceiveBuffer[(x + 1)];
    587c:	81 91       	ld	r24, Z+
    587e:	8d 93       	st	X+, r24
            // wait so the receiver won't miss our response
            _delay_ms(90);
            // just a command to preceed the serial number
            if (radioReceiveBuffer[0] == 'z') {
                // radio is sending a serial number to compare to
                for (x = 0; x < 6; x++) {
    5880:	52 e0       	ldi	r21, 0x02	; 2
    5882:	e9 3c       	cpi	r30, 0xC9	; 201
    5884:	f5 07       	cpc	r31, r21
    5886:	d1 f7       	brne	.-12     	; 0x587c <main+0x1d6>
                    tempRadioSerialIn[x] = radioReceiveBuffer[(x + 1)];
                }
                // compare the strings
                if (strcmp(tempRadioSerialIn, stringSerial) == 0) {
    5888:	62 e0       	ldi	r22, 0x02	; 2
    588a:	71 e0       	ldi	r23, 0x01	; 1
    588c:	ce 01       	movw	r24, r28
    588e:	81 96       	adiw	r24, 0x21	; 33
    5890:	0e 94 e5 30 	call	0x61ca	; 0x61ca <strcmp>
    5894:	00 97       	sbiw	r24, 0x00	; 0
    5896:	89 f4       	brne	.+34     	; 0x58ba <main+0x214>
    5898:	e9 ec       	ldi	r30, 0xC9	; 201
    589a:	f2 e0       	ldi	r31, 0x02	; 2
    589c:	de 01       	movw	r26, r28
    589e:	11 96       	adiw	r26, 0x01	; 1
    58a0:	02 c0       	rjmp	.+4      	; 0x58a6 <main+0x200>
                    for (x = 7; x < payloadLength; x++) {
                        radioCommand[(x - 7)] = radioReceiveBuffer[x];
    58a2:	81 91       	ld	r24, Z+
    58a4:	8d 93       	st	X+, r24


// send receive addresses
static uint64_t rx_addr_p0, rx_addr_p1, rx_addr_p2, rx_addr_p3, rx_addr_p4, rx_addr_p5, tx_addr;

int main(void) {
    58a6:	cf 01       	movw	r24, r30
    58a8:	82 5c       	subi	r24, 0xC2	; 194
    58aa:	92 40       	sbci	r25, 0x02	; 2
                for (x = 0; x < 6; x++) {
                    tempRadioSerialIn[x] = radioReceiveBuffer[(x + 1)];
                }
                // compare the strings
                if (strcmp(tempRadioSerialIn, stringSerial) == 0) {
                    for (x = 7; x < payloadLength; x++) {
    58ac:	80 17       	cp	r24, r16
    58ae:	91 07       	cpc	r25, r17
    58b0:	c4 f3       	brlt	.-16     	; 0x58a2 <main+0x1fc>
                        radioCommand[(x - 7)] = radioReceiveBuffer[x];
                    }
                    // command is from the radio
                    checkCommand(radioCommand);
    58b2:	ce 01       	movw	r24, r28
    58b4:	01 96       	adiw	r24, 0x01	; 1
    58b6:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <checkCommand>
    58ba:	e2 ec       	ldi	r30, 0xC2	; 194
    58bc:	f2 e0       	ldi	r31, 0x02	; 2
    58be:	84 ea       	ldi	r24, 0xA4	; 164
    58c0:	92 e0       	ldi	r25, 0x02	; 2
    58c2:	ae 01       	movw	r20, r28
    58c4:	4f 5f       	subi	r20, 0xFF	; 255
    58c6:	5f 4f       	sbci	r21, 0xFF	; 255
    58c8:	2f c0       	rjmp	.+94     	; 0x5928 <main+0x282>
                } // endif - serial doesn't match so ignore it
            } else if (radioReceiveBuffer[0] == 'b') { // radio isn't sending a serial number b=broadcast
    58ca:	82 36       	cpi	r24, 0x62	; 98
    58cc:	b1 f7       	brne	.-20     	; 0x58ba <main+0x214>
    58ce:	e3 ec       	ldi	r30, 0xC3	; 195
    58d0:	f2 e0       	ldi	r31, 0x02	; 2
    58d2:	de 01       	movw	r26, r28
    58d4:	11 96       	adiw	r26, 0x01	; 1
                for (x = 1; x < payloadLength; x++) {
                    radioCommand[(x - 1)] = radioReceiveBuffer[x];
    58d6:	81 91       	ld	r24, Z+
    58d8:	8d 93       	st	X+, r24


// send receive addresses
static uint64_t rx_addr_p0, rx_addr_p1, rx_addr_p2, rx_addr_p3, rx_addr_p4, rx_addr_p5, tx_addr;

int main(void) {
    58da:	cf 01       	movw	r24, r30
    58dc:	82 5c       	subi	r24, 0xC2	; 194
    58de:	92 40       	sbci	r25, 0x02	; 2
                    }
                    // command is from the radio
                    checkCommand(radioCommand);
                } // endif - serial doesn't match so ignore it
            } else if (radioReceiveBuffer[0] == 'b') { // radio isn't sending a serial number b=broadcast
                for (x = 1; x < payloadLength; x++) {
    58e0:	80 17       	cp	r24, r16
    58e2:	91 07       	cpc	r25, r17
    58e4:	c4 f3       	brlt	.-16     	; 0x58d6 <main+0x230>
                    radioCommand[(x - 1)] = radioReceiveBuffer[x];
                }
                // we are only going to set the serial number in a broadcast if we don't have one
                if (strncmp(radioCommand, "SE", 2) == 0 || strncmp(radioCommand, "se", 2) == 0) {
    58e6:	42 e0       	ldi	r20, 0x02	; 2
    58e8:	50 e0       	ldi	r21, 0x00	; 0
    58ea:	6e e9       	ldi	r22, 0x9E	; 158
    58ec:	72 e0       	ldi	r23, 0x02	; 2
    58ee:	ce 01       	movw	r24, r28
    58f0:	01 96       	adiw	r24, 0x01	; 1
    58f2:	0e 94 ee 30 	call	0x61dc	; 0x61dc <strncmp>
    58f6:	00 97       	sbiw	r24, 0x00	; 0
    58f8:	51 f0       	breq	.+20     	; 0x590e <main+0x268>
    58fa:	42 e0       	ldi	r20, 0x02	; 2
    58fc:	50 e0       	ldi	r21, 0x00	; 0
    58fe:	61 ea       	ldi	r22, 0xA1	; 161
    5900:	72 e0       	ldi	r23, 0x02	; 2
    5902:	ce 01       	movw	r24, r28
    5904:	01 96       	adiw	r24, 0x01	; 1
    5906:	0e 94 ee 30 	call	0x61dc	; 0x61dc <strncmp>
    590a:	00 97       	sbiw	r24, 0x00	; 0
    590c:	91 f6       	brne	.-92     	; 0x58b2 <main+0x20c>
                    if (serial == 0) {
    590e:	80 91 86 03 	lds	r24, 0x0386
    5912:	90 91 87 03 	lds	r25, 0x0387
    5916:	a0 91 88 03 	lds	r26, 0x0388
    591a:	b0 91 89 03 	lds	r27, 0x0389
    591e:	89 2b       	or	r24, r25
    5920:	8a 2b       	or	r24, r26
    5922:	8b 2b       	or	r24, r27
    5924:	51 f6       	brne	.-108    	; 0x58ba <main+0x214>
    5926:	c5 cf       	rjmp	.-118    	; 0x58b2 <main+0x20c>
                    checkCommand(radioCommand);
                }
            }
            // nothing we care about so do nothing
            for (x = 0; x < 30; x++) {
                radioReceiveBuffer[x] = 0;
    5928:	11 92       	st	Z+, r1
                receiveBuffer[x] = 0;
    592a:	dc 01       	movw	r26, r24
    592c:	1d 92       	st	X+, r1
    592e:	cd 01       	movw	r24, r26
                radioCommand[x] = 0;
    5930:	da 01       	movw	r26, r20
    5932:	1d 92       	st	X+, r1
    5934:	ad 01       	movw	r20, r26
                } else {
                    checkCommand(radioCommand);
                }
            }
            // nothing we care about so do nothing
            for (x = 0; x < 30; x++) {
    5936:	b2 e0       	ldi	r27, 0x02	; 2
    5938:	e0 3e       	cpi	r30, 0xE0	; 224
    593a:	fb 07       	cpc	r31, r27
    593c:	a9 f7       	brne	.-22     	; 0x5928 <main+0x282>
    593e:	44 cf       	rjmp	.-376    	; 0x57c8 <main+0x122>

00005940 <putval>:
    5940:	20 fd       	sbrc	r18, 0
    5942:	09 c0       	rjmp	.+18     	; 0x5956 <putval+0x16>
    5944:	fc 01       	movw	r30, r24
    5946:	23 fd       	sbrc	r18, 3
    5948:	05 c0       	rjmp	.+10     	; 0x5954 <putval+0x14>
    594a:	22 ff       	sbrs	r18, 2
    594c:	02 c0       	rjmp	.+4      	; 0x5952 <putval+0x12>
    594e:	73 83       	std	Z+3, r23	; 0x03
    5950:	62 83       	std	Z+2, r22	; 0x02
    5952:	51 83       	std	Z+1, r21	; 0x01
    5954:	40 83       	st	Z, r20
    5956:	08 95       	ret

00005958 <mulacc>:
    5958:	cf 92       	push	r12
    595a:	df 92       	push	r13
    595c:	ef 92       	push	r14
    595e:	ff 92       	push	r15
    5960:	0f 93       	push	r16
    5962:	1f 93       	push	r17
    5964:	44 fd       	sbrc	r20, 4
    5966:	10 c0       	rjmp	.+32     	; 0x5988 <mulacc+0x30>
    5968:	46 fd       	sbrc	r20, 6
    596a:	10 c0       	rjmp	.+32     	; 0x598c <mulacc+0x34>
    596c:	db 01       	movw	r26, r22
    596e:	fc 01       	movw	r30, r24
    5970:	aa 0f       	add	r26, r26
    5972:	bb 1f       	adc	r27, r27
    5974:	ee 1f       	adc	r30, r30
    5976:	ff 1f       	adc	r31, r31
    5978:	10 94       	com	r1
    597a:	d1 f7       	brne	.-12     	; 0x5970 <mulacc+0x18>
    597c:	6a 0f       	add	r22, r26
    597e:	7b 1f       	adc	r23, r27
    5980:	8e 1f       	adc	r24, r30
    5982:	9f 1f       	adc	r25, r31
    5984:	31 e0       	ldi	r19, 0x01	; 1
    5986:	03 c0       	rjmp	.+6      	; 0x598e <mulacc+0x36>
    5988:	33 e0       	ldi	r19, 0x03	; 3
    598a:	01 c0       	rjmp	.+2      	; 0x598e <mulacc+0x36>
    598c:	34 e0       	ldi	r19, 0x04	; 4
    598e:	66 0f       	add	r22, r22
    5990:	77 1f       	adc	r23, r23
    5992:	88 1f       	adc	r24, r24
    5994:	99 1f       	adc	r25, r25
    5996:	31 50       	subi	r19, 0x01	; 1
    5998:	d1 f7       	brne	.-12     	; 0x598e <mulacc+0x36>
    599a:	6b 01       	movw	r12, r22
    599c:	7c 01       	movw	r14, r24
    599e:	c2 0e       	add	r12, r18
    59a0:	d1 1c       	adc	r13, r1
    59a2:	e1 1c       	adc	r14, r1
    59a4:	f1 1c       	adc	r15, r1
    59a6:	97 01       	movw	r18, r14
    59a8:	86 01       	movw	r16, r12
    59aa:	b6 01       	movw	r22, r12
    59ac:	c9 01       	movw	r24, r18
    59ae:	1f 91       	pop	r17
    59b0:	0f 91       	pop	r16
    59b2:	ff 90       	pop	r15
    59b4:	ef 90       	pop	r14
    59b6:	df 90       	pop	r13
    59b8:	cf 90       	pop	r12
    59ba:	08 95       	ret

000059bc <skip_spaces>:
    59bc:	0f 93       	push	r16
    59be:	1f 93       	push	r17
    59c0:	cf 93       	push	r28
    59c2:	df 93       	push	r29
    59c4:	8c 01       	movw	r16, r24
    59c6:	c8 01       	movw	r24, r16
    59c8:	0e 94 6e 31 	call	0x62dc	; 0x62dc <fgetc>
    59cc:	ec 01       	movw	r28, r24
    59ce:	97 fd       	sbrc	r25, 7
    59d0:	08 c0       	rjmp	.+16     	; 0x59e2 <skip_spaces+0x26>
    59d2:	0e 94 c7 30 	call	0x618e	; 0x618e <isspace>
    59d6:	89 2b       	or	r24, r25
    59d8:	b1 f7       	brne	.-20     	; 0x59c6 <skip_spaces+0xa>
    59da:	b8 01       	movw	r22, r16
    59dc:	ce 01       	movw	r24, r28
    59de:	0e 94 ae 31 	call	0x635c	; 0x635c <ungetc>
    59e2:	ce 01       	movw	r24, r28
    59e4:	df 91       	pop	r29
    59e6:	cf 91       	pop	r28
    59e8:	1f 91       	pop	r17
    59ea:	0f 91       	pop	r16
    59ec:	08 95       	ret

000059ee <conv_int>:
    59ee:	8f 92       	push	r8
    59f0:	9f 92       	push	r9
    59f2:	af 92       	push	r10
    59f4:	cf 92       	push	r12
    59f6:	df 92       	push	r13
    59f8:	ef 92       	push	r14
    59fa:	ff 92       	push	r15
    59fc:	0f 93       	push	r16
    59fe:	1f 93       	push	r17
    5a00:	cf 93       	push	r28
    5a02:	df 93       	push	r29
    5a04:	ec 01       	movw	r28, r24
    5a06:	a6 2e       	mov	r10, r22
    5a08:	4a 01       	movw	r8, r20
    5a0a:	02 2f       	mov	r16, r18
    5a0c:	0e 94 6e 31 	call	0x62dc	; 0x62dc <fgetc>
    5a10:	fc 01       	movw	r30, r24
    5a12:	ff 27       	eor	r31, r31
    5a14:	eb 32       	cpi	r30, 0x2B	; 43
    5a16:	f1 05       	cpc	r31, r1
    5a18:	19 f0       	breq	.+6      	; 0x5a20 <conv_int+0x32>
    5a1a:	bd 97       	sbiw	r30, 0x2d	; 45
    5a1c:	51 f4       	brne	.+20     	; 0x5a32 <conv_int+0x44>
    5a1e:	00 68       	ori	r16, 0x80	; 128
    5a20:	aa 94       	dec	r10
    5a22:	11 f4       	brne	.+4      	; 0x5a28 <conv_int+0x3a>
    5a24:	80 e0       	ldi	r24, 0x00	; 0
    5a26:	63 c0       	rjmp	.+198    	; 0x5aee <conv_int+0x100>
    5a28:	ce 01       	movw	r24, r28
    5a2a:	0e 94 6e 31 	call	0x62dc	; 0x62dc <fgetc>
    5a2e:	97 fd       	sbrc	r25, 7
    5a30:	f9 cf       	rjmp	.-14     	; 0x5a24 <conv_int+0x36>
    5a32:	10 2f       	mov	r17, r16
    5a34:	1d 7f       	andi	r17, 0xFD	; 253
    5a36:	30 2f       	mov	r19, r16
    5a38:	30 73       	andi	r19, 0x30	; 48
    5a3a:	e1 f4       	brne	.+56     	; 0x5a74 <conv_int+0x86>
    5a3c:	80 33       	cpi	r24, 0x30	; 48
    5a3e:	d1 f4       	brne	.+52     	; 0x5a74 <conv_int+0x86>
    5a40:	aa 94       	dec	r10
    5a42:	09 f4       	brne	.+2      	; 0x5a46 <conv_int+0x58>
    5a44:	40 c0       	rjmp	.+128    	; 0x5ac6 <conv_int+0xd8>
    5a46:	ce 01       	movw	r24, r28
    5a48:	0e 94 6e 31 	call	0x62dc	; 0x62dc <fgetc>
    5a4c:	97 fd       	sbrc	r25, 7
    5a4e:	3b c0       	rjmp	.+118    	; 0x5ac6 <conv_int+0xd8>
    5a50:	88 37       	cpi	r24, 0x78	; 120
    5a52:	11 f0       	breq	.+4      	; 0x5a58 <conv_int+0x6a>
    5a54:	88 35       	cpi	r24, 0x58	; 88
    5a56:	49 f4       	brne	.+18     	; 0x5a6a <conv_int+0x7c>
    5a58:	12 64       	ori	r17, 0x42	; 66
    5a5a:	aa 94       	dec	r10
    5a5c:	a1 f1       	breq	.+104    	; 0x5ac6 <conv_int+0xd8>
    5a5e:	ce 01       	movw	r24, r28
    5a60:	0e 94 6e 31 	call	0x62dc	; 0x62dc <fgetc>
    5a64:	97 ff       	sbrs	r25, 7
    5a66:	06 c0       	rjmp	.+12     	; 0x5a74 <conv_int+0x86>
    5a68:	2e c0       	rjmp	.+92     	; 0x5ac6 <conv_int+0xd8>
    5a6a:	06 ff       	sbrs	r16, 6
    5a6c:	02 c0       	rjmp	.+4      	; 0x5a72 <conv_int+0x84>
    5a6e:	12 60       	ori	r17, 0x02	; 2
    5a70:	01 c0       	rjmp	.+2      	; 0x5a74 <conv_int+0x86>
    5a72:	12 61       	ori	r17, 0x12	; 18
    5a74:	c1 2c       	mov	r12, r1
    5a76:	d1 2c       	mov	r13, r1
    5a78:	76 01       	movw	r14, r12
    5a7a:	28 2f       	mov	r18, r24
    5a7c:	20 53       	subi	r18, 0x30	; 48
    5a7e:	28 30       	cpi	r18, 0x08	; 8
    5a80:	80 f0       	brcs	.+32     	; 0x5aa2 <conv_int+0xb4>
    5a82:	14 ff       	sbrs	r17, 4
    5a84:	04 c0       	rjmp	.+8      	; 0x5a8e <conv_int+0xa0>
    5a86:	be 01       	movw	r22, r28
    5a88:	0e 94 ae 31 	call	0x635c	; 0x635c <ungetc>
    5a8c:	19 c0       	rjmp	.+50     	; 0x5ac0 <conv_int+0xd2>
    5a8e:	2a 30       	cpi	r18, 0x0A	; 10
    5a90:	40 f0       	brcs	.+16     	; 0x5aa2 <conv_int+0xb4>
    5a92:	16 ff       	sbrs	r17, 6
    5a94:	f8 cf       	rjmp	.-16     	; 0x5a86 <conv_int+0x98>
    5a96:	2f 7d       	andi	r18, 0xDF	; 223
    5a98:	32 2f       	mov	r19, r18
    5a9a:	31 51       	subi	r19, 0x11	; 17
    5a9c:	36 30       	cpi	r19, 0x06	; 6
    5a9e:	98 f7       	brcc	.-26     	; 0x5a86 <conv_int+0x98>
    5aa0:	27 50       	subi	r18, 0x07	; 7
    5aa2:	41 2f       	mov	r20, r17
    5aa4:	c7 01       	movw	r24, r14
    5aa6:	b6 01       	movw	r22, r12
    5aa8:	0e 94 ac 2c 	call	0x5958	; 0x5958 <mulacc>
    5aac:	6b 01       	movw	r12, r22
    5aae:	7c 01       	movw	r14, r24
    5ab0:	12 60       	ori	r17, 0x02	; 2
    5ab2:	aa 94       	dec	r10
    5ab4:	59 f0       	breq	.+22     	; 0x5acc <conv_int+0xde>
    5ab6:	ce 01       	movw	r24, r28
    5ab8:	0e 94 6e 31 	call	0x62dc	; 0x62dc <fgetc>
    5abc:	97 ff       	sbrs	r25, 7
    5abe:	dd cf       	rjmp	.-70     	; 0x5a7a <conv_int+0x8c>
    5ac0:	11 fd       	sbrc	r17, 1
    5ac2:	04 c0       	rjmp	.+8      	; 0x5acc <conv_int+0xde>
    5ac4:	af cf       	rjmp	.-162    	; 0x5a24 <conv_int+0x36>
    5ac6:	c1 2c       	mov	r12, r1
    5ac8:	d1 2c       	mov	r13, r1
    5aca:	76 01       	movw	r14, r12
    5acc:	17 ff       	sbrs	r17, 7
    5ace:	08 c0       	rjmp	.+16     	; 0x5ae0 <conv_int+0xf2>
    5ad0:	f0 94       	com	r15
    5ad2:	e0 94       	com	r14
    5ad4:	d0 94       	com	r13
    5ad6:	c0 94       	com	r12
    5ad8:	c1 1c       	adc	r12, r1
    5ada:	d1 1c       	adc	r13, r1
    5adc:	e1 1c       	adc	r14, r1
    5ade:	f1 1c       	adc	r15, r1
    5ae0:	21 2f       	mov	r18, r17
    5ae2:	b7 01       	movw	r22, r14
    5ae4:	a6 01       	movw	r20, r12
    5ae6:	c4 01       	movw	r24, r8
    5ae8:	0e 94 a0 2c 	call	0x5940	; 0x5940 <putval>
    5aec:	81 e0       	ldi	r24, 0x01	; 1
    5aee:	df 91       	pop	r29
    5af0:	cf 91       	pop	r28
    5af2:	1f 91       	pop	r17
    5af4:	0f 91       	pop	r16
    5af6:	ff 90       	pop	r15
    5af8:	ef 90       	pop	r14
    5afa:	df 90       	pop	r13
    5afc:	cf 90       	pop	r12
    5afe:	af 90       	pop	r10
    5b00:	9f 90       	pop	r9
    5b02:	8f 90       	pop	r8
    5b04:	08 95       	ret

00005b06 <vfscanf>:
    5b06:	4f 92       	push	r4
    5b08:	5f 92       	push	r5
    5b0a:	7f 92       	push	r7
    5b0c:	8f 92       	push	r8
    5b0e:	9f 92       	push	r9
    5b10:	af 92       	push	r10
    5b12:	bf 92       	push	r11
    5b14:	cf 92       	push	r12
    5b16:	df 92       	push	r13
    5b18:	ef 92       	push	r14
    5b1a:	ff 92       	push	r15
    5b1c:	0f 93       	push	r16
    5b1e:	1f 93       	push	r17
    5b20:	cf 93       	push	r28
    5b22:	df 93       	push	r29
    5b24:	1f 92       	push	r1
    5b26:	cd b7       	in	r28, 0x3d	; 61
    5b28:	de b7       	in	r29, 0x3e	; 62
    5b2a:	8c 01       	movw	r16, r24
    5b2c:	2b 01       	movw	r4, r22
    5b2e:	5a 01       	movw	r10, r20
    5b30:	fc 01       	movw	r30, r24
    5b32:	17 82       	std	Z+7, r1	; 0x07
    5b34:	16 82       	std	Z+6, r1	; 0x06
    5b36:	81 2c       	mov	r8, r1
    5b38:	e3 c0       	rjmp	.+454    	; 0x5d00 <vfscanf+0x1fa>
    5b3a:	8e 2d       	mov	r24, r14
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	0e 94 c7 30 	call	0x618e	; 0x618e <isspace>
    5b42:	89 2b       	or	r24, r25
    5b44:	21 f0       	breq	.+8      	; 0x5b4e <vfscanf+0x48>
    5b46:	c8 01       	movw	r24, r16
    5b48:	0e 94 de 2c 	call	0x59bc	; 0x59bc <skip_spaces>
    5b4c:	d9 c0       	rjmp	.+434    	; 0x5d00 <vfscanf+0x1fa>
    5b4e:	f5 e2       	ldi	r31, 0x25	; 37
    5b50:	ef 12       	cpse	r14, r31
    5b52:	0a c0       	rjmp	.+20     	; 0x5b68 <vfscanf+0x62>
    5b54:	f2 01       	movw	r30, r4
    5b56:	f3 fc       	sbrc	r15, 3
    5b58:	35 91       	lpm	r19, Z+
    5b5a:	f3 fe       	sbrs	r15, 3
    5b5c:	31 91       	ld	r19, Z+
    5b5e:	2f 01       	movw	r4, r30
    5b60:	35 32       	cpi	r19, 0x25	; 37
    5b62:	71 f4       	brne	.+28     	; 0x5b80 <vfscanf+0x7a>
    5b64:	55 e2       	ldi	r21, 0x25	; 37
    5b66:	e5 2e       	mov	r14, r21
    5b68:	c8 01       	movw	r24, r16
    5b6a:	0e 94 6e 31 	call	0x62dc	; 0x62dc <fgetc>
    5b6e:	97 fd       	sbrc	r25, 7
    5b70:	d2 c0       	rjmp	.+420    	; 0x5d16 <vfscanf+0x210>
    5b72:	e8 16       	cp	r14, r24
    5b74:	09 f4       	brne	.+2      	; 0x5b78 <vfscanf+0x72>
    5b76:	c4 c0       	rjmp	.+392    	; 0x5d00 <vfscanf+0x1fa>
    5b78:	b8 01       	movw	r22, r16
    5b7a:	0e 94 ae 31 	call	0x635c	; 0x635c <ungetc>
    5b7e:	cd c0       	rjmp	.+410    	; 0x5d1a <vfscanf+0x214>
    5b80:	3a 32       	cpi	r19, 0x2A	; 42
    5b82:	41 f4       	brne	.+16     	; 0x5b94 <vfscanf+0x8e>
    5b84:	f3 fc       	sbrc	r15, 3
    5b86:	35 91       	lpm	r19, Z+
    5b88:	f3 fe       	sbrs	r15, 3
    5b8a:	31 91       	ld	r19, Z+
    5b8c:	2f 01       	movw	r4, r30
    5b8e:	99 24       	eor	r9, r9
    5b90:	93 94       	inc	r9
    5b92:	01 c0       	rjmp	.+2      	; 0x5b96 <vfscanf+0x90>
    5b94:	91 2c       	mov	r9, r1
    5b96:	71 2c       	mov	r7, r1
    5b98:	10 c0       	rjmp	.+32     	; 0x5bba <vfscanf+0xb4>
    5b9a:	f2 e0       	ldi	r31, 0x02	; 2
    5b9c:	9f 2a       	or	r9, r31
    5b9e:	67 2d       	mov	r22, r7
    5ba0:	70 e0       	ldi	r23, 0x00	; 0
    5ba2:	80 e0       	ldi	r24, 0x00	; 0
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	40 e2       	ldi	r20, 0x20	; 32
    5ba8:	0e 94 ac 2c 	call	0x5958	; 0x5958 <mulacc>
    5bac:	76 2e       	mov	r7, r22
    5bae:	f2 01       	movw	r30, r4
    5bb0:	f3 fc       	sbrc	r15, 3
    5bb2:	35 91       	lpm	r19, Z+
    5bb4:	f3 fe       	sbrs	r15, 3
    5bb6:	31 91       	ld	r19, Z+
    5bb8:	2f 01       	movw	r4, r30
    5bba:	23 2f       	mov	r18, r19
    5bbc:	20 53       	subi	r18, 0x30	; 48
    5bbe:	2a 30       	cpi	r18, 0x0A	; 10
    5bc0:	60 f3       	brcs	.-40     	; 0x5b9a <vfscanf+0x94>
    5bc2:	91 fe       	sbrs	r9, 1
    5bc4:	03 c0       	rjmp	.+6      	; 0x5bcc <vfscanf+0xc6>
    5bc6:	71 10       	cpse	r7, r1
    5bc8:	03 c0       	rjmp	.+6      	; 0x5bd0 <vfscanf+0xca>
    5bca:	a7 c0       	rjmp	.+334    	; 0x5d1a <vfscanf+0x214>
    5bcc:	77 24       	eor	r7, r7
    5bce:	7a 94       	dec	r7
    5bd0:	38 36       	cpi	r19, 0x68	; 104
    5bd2:	19 f0       	breq	.+6      	; 0x5bda <vfscanf+0xd4>
    5bd4:	3c 36       	cpi	r19, 0x6C	; 108
    5bd6:	99 f4       	brne	.+38     	; 0x5bfe <vfscanf+0xf8>
    5bd8:	0a c0       	rjmp	.+20     	; 0x5bee <vfscanf+0xe8>
    5bda:	f2 01       	movw	r30, r4
    5bdc:	f3 fc       	sbrc	r15, 3
    5bde:	35 91       	lpm	r19, Z+
    5be0:	f3 fe       	sbrs	r15, 3
    5be2:	31 91       	ld	r19, Z+
    5be4:	2f 01       	movw	r4, r30
    5be6:	38 36       	cpi	r19, 0x68	; 104
    5be8:	51 f4       	brne	.+20     	; 0x5bfe <vfscanf+0xf8>
    5bea:	f8 e0       	ldi	r31, 0x08	; 8
    5bec:	9f 2a       	or	r9, r31
    5bee:	84 e0       	ldi	r24, 0x04	; 4
    5bf0:	98 2a       	or	r9, r24
    5bf2:	f2 01       	movw	r30, r4
    5bf4:	f3 fc       	sbrc	r15, 3
    5bf6:	35 91       	lpm	r19, Z+
    5bf8:	f3 fe       	sbrs	r15, 3
    5bfa:	31 91       	ld	r19, Z+
    5bfc:	2f 01       	movw	r4, r30
    5bfe:	33 23       	and	r19, r19
    5c00:	09 f4       	brne	.+2      	; 0x5c04 <vfscanf+0xfe>
    5c02:	8b c0       	rjmp	.+278    	; 0x5d1a <vfscanf+0x214>
    5c04:	63 2f       	mov	r22, r19
    5c06:	70 e0       	ldi	r23, 0x00	; 0
    5c08:	88 e6       	ldi	r24, 0x68	; 104
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	39 83       	std	Y+1, r19	; 0x01
    5c0e:	0e 94 cf 30 	call	0x619e	; 0x619e <strchr_P>
    5c12:	39 81       	ldd	r19, Y+1	; 0x01
    5c14:	89 2b       	or	r24, r25
    5c16:	09 f4       	brne	.+2      	; 0x5c1a <vfscanf+0x114>
    5c18:	80 c0       	rjmp	.+256    	; 0x5d1a <vfscanf+0x214>
    5c1a:	90 fc       	sbrc	r9, 0
    5c1c:	07 c0       	rjmp	.+14     	; 0x5c2c <vfscanf+0x126>
    5c1e:	f5 01       	movw	r30, r10
    5c20:	e0 80       	ld	r14, Z
    5c22:	f1 80       	ldd	r15, Z+1	; 0x01
    5c24:	82 e0       	ldi	r24, 0x02	; 2
    5c26:	a8 0e       	add	r10, r24
    5c28:	b1 1c       	adc	r11, r1
    5c2a:	02 c0       	rjmp	.+4      	; 0x5c30 <vfscanf+0x12a>
    5c2c:	e1 2c       	mov	r14, r1
    5c2e:	f1 2c       	mov	r15, r1
    5c30:	3e 36       	cpi	r19, 0x6E	; 110
    5c32:	51 f4       	brne	.+20     	; 0x5c48 <vfscanf+0x142>
    5c34:	f8 01       	movw	r30, r16
    5c36:	46 81       	ldd	r20, Z+6	; 0x06
    5c38:	57 81       	ldd	r21, Z+7	; 0x07
    5c3a:	60 e0       	ldi	r22, 0x00	; 0
    5c3c:	70 e0       	ldi	r23, 0x00	; 0
    5c3e:	29 2d       	mov	r18, r9
    5c40:	c7 01       	movw	r24, r14
    5c42:	0e 94 a0 2c 	call	0x5940	; 0x5940 <putval>
    5c46:	5c c0       	rjmp	.+184    	; 0x5d00 <vfscanf+0x1fa>
    5c48:	33 36       	cpi	r19, 0x63	; 99
    5c4a:	91 f4       	brne	.+36     	; 0x5c70 <vfscanf+0x16a>
    5c4c:	91 fc       	sbrc	r9, 1
    5c4e:	02 c0       	rjmp	.+4      	; 0x5c54 <vfscanf+0x14e>
    5c50:	77 24       	eor	r7, r7
    5c52:	73 94       	inc	r7
    5c54:	c8 01       	movw	r24, r16
    5c56:	0e 94 6e 31 	call	0x62dc	; 0x62dc <fgetc>
    5c5a:	97 fd       	sbrc	r25, 7
    5c5c:	5c c0       	rjmp	.+184    	; 0x5d16 <vfscanf+0x210>
    5c5e:	e1 14       	cp	r14, r1
    5c60:	f1 04       	cpc	r15, r1
    5c62:	19 f0       	breq	.+6      	; 0x5c6a <vfscanf+0x164>
    5c64:	f7 01       	movw	r30, r14
    5c66:	81 93       	st	Z+, r24
    5c68:	7f 01       	movw	r14, r30
    5c6a:	7a 94       	dec	r7
    5c6c:	99 f7       	brne	.-26     	; 0x5c54 <vfscanf+0x14e>
    5c6e:	46 c0       	rjmp	.+140    	; 0x5cfc <vfscanf+0x1f6>
    5c70:	c8 01       	movw	r24, r16
    5c72:	39 83       	std	Y+1, r19	; 0x01
    5c74:	0e 94 de 2c 	call	0x59bc	; 0x59bc <skip_spaces>
    5c78:	39 81       	ldd	r19, Y+1	; 0x01
    5c7a:	97 fd       	sbrc	r25, 7
    5c7c:	4c c0       	rjmp	.+152    	; 0x5d16 <vfscanf+0x210>
    5c7e:	3f 36       	cpi	r19, 0x6F	; 111
    5c80:	59 f1       	breq	.+86     	; 0x5cd8 <vfscanf+0x1d2>
    5c82:	28 f4       	brcc	.+10     	; 0x5c8e <vfscanf+0x188>
    5c84:	34 36       	cpi	r19, 0x64	; 100
    5c86:	29 f1       	breq	.+74     	; 0x5cd2 <vfscanf+0x1cc>
    5c88:	39 36       	cpi	r19, 0x69	; 105
    5c8a:	49 f5       	brne	.+82     	; 0x5cde <vfscanf+0x1d8>
    5c8c:	2a c0       	rjmp	.+84     	; 0x5ce2 <vfscanf+0x1dc>
    5c8e:	33 37       	cpi	r19, 0x73	; 115
    5c90:	19 f0       	breq	.+6      	; 0x5c98 <vfscanf+0x192>
    5c92:	35 37       	cpi	r19, 0x75	; 117
    5c94:	21 f5       	brne	.+72     	; 0x5cde <vfscanf+0x1d8>
    5c96:	1d c0       	rjmp	.+58     	; 0x5cd2 <vfscanf+0x1cc>
    5c98:	c8 01       	movw	r24, r16
    5c9a:	0e 94 6e 31 	call	0x62dc	; 0x62dc <fgetc>
    5c9e:	6c 01       	movw	r12, r24
    5ca0:	97 fd       	sbrc	r25, 7
    5ca2:	11 c0       	rjmp	.+34     	; 0x5cc6 <vfscanf+0x1c0>
    5ca4:	0e 94 c7 30 	call	0x618e	; 0x618e <isspace>
    5ca8:	89 2b       	or	r24, r25
    5caa:	29 f0       	breq	.+10     	; 0x5cb6 <vfscanf+0x1b0>
    5cac:	b8 01       	movw	r22, r16
    5cae:	c6 01       	movw	r24, r12
    5cb0:	0e 94 ae 31 	call	0x635c	; 0x635c <ungetc>
    5cb4:	08 c0       	rjmp	.+16     	; 0x5cc6 <vfscanf+0x1c0>
    5cb6:	e1 14       	cp	r14, r1
    5cb8:	f1 04       	cpc	r15, r1
    5cba:	19 f0       	breq	.+6      	; 0x5cc2 <vfscanf+0x1bc>
    5cbc:	f7 01       	movw	r30, r14
    5cbe:	c1 92       	st	Z+, r12
    5cc0:	7f 01       	movw	r14, r30
    5cc2:	7a 94       	dec	r7
    5cc4:	49 f7       	brne	.-46     	; 0x5c98 <vfscanf+0x192>
    5cc6:	e1 14       	cp	r14, r1
    5cc8:	f1 04       	cpc	r15, r1
    5cca:	c1 f0       	breq	.+48     	; 0x5cfc <vfscanf+0x1f6>
    5ccc:	f7 01       	movw	r30, r14
    5cce:	10 82       	st	Z, r1
    5cd0:	15 c0       	rjmp	.+42     	; 0x5cfc <vfscanf+0x1f6>
    5cd2:	f0 e2       	ldi	r31, 0x20	; 32
    5cd4:	9f 2a       	or	r9, r31
    5cd6:	05 c0       	rjmp	.+10     	; 0x5ce2 <vfscanf+0x1dc>
    5cd8:	80 e1       	ldi	r24, 0x10	; 16
    5cda:	98 2a       	or	r9, r24
    5cdc:	02 c0       	rjmp	.+4      	; 0x5ce2 <vfscanf+0x1dc>
    5cde:	90 e4       	ldi	r25, 0x40	; 64
    5ce0:	99 2a       	or	r9, r25
    5ce2:	29 2d       	mov	r18, r9
    5ce4:	a7 01       	movw	r20, r14
    5ce6:	67 2d       	mov	r22, r7
    5ce8:	c8 01       	movw	r24, r16
    5cea:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <conv_int>
    5cee:	81 11       	cpse	r24, r1
    5cf0:	05 c0       	rjmp	.+10     	; 0x5cfc <vfscanf+0x1f6>
    5cf2:	f8 01       	movw	r30, r16
    5cf4:	83 81       	ldd	r24, Z+3	; 0x03
    5cf6:	80 73       	andi	r24, 0x30	; 48
    5cf8:	71 f4       	brne	.+28     	; 0x5d16 <vfscanf+0x210>
    5cfa:	0f c0       	rjmp	.+30     	; 0x5d1a <vfscanf+0x214>
    5cfc:	90 fe       	sbrs	r9, 0
    5cfe:	83 94       	inc	r8
    5d00:	f8 01       	movw	r30, r16
    5d02:	f3 80       	ldd	r15, Z+3	; 0x03
    5d04:	f2 01       	movw	r30, r4
    5d06:	f3 fc       	sbrc	r15, 3
    5d08:	e5 90       	lpm	r14, Z+
    5d0a:	f3 fe       	sbrs	r15, 3
    5d0c:	e1 90       	ld	r14, Z+
    5d0e:	2f 01       	movw	r4, r30
    5d10:	e1 10       	cpse	r14, r1
    5d12:	13 cf       	rjmp	.-474    	; 0x5b3a <vfscanf+0x34>
    5d14:	02 c0       	rjmp	.+4      	; 0x5d1a <vfscanf+0x214>
    5d16:	88 20       	and	r8, r8
    5d18:	19 f0       	breq	.+6      	; 0x5d20 <vfscanf+0x21a>
    5d1a:	28 2d       	mov	r18, r8
    5d1c:	30 e0       	ldi	r19, 0x00	; 0
    5d1e:	02 c0       	rjmp	.+4      	; 0x5d24 <vfscanf+0x21e>
    5d20:	2f ef       	ldi	r18, 0xFF	; 255
    5d22:	3f ef       	ldi	r19, 0xFF	; 255
    5d24:	c9 01       	movw	r24, r18
    5d26:	0f 90       	pop	r0
    5d28:	df 91       	pop	r29
    5d2a:	cf 91       	pop	r28
    5d2c:	1f 91       	pop	r17
    5d2e:	0f 91       	pop	r16
    5d30:	ff 90       	pop	r15
    5d32:	ef 90       	pop	r14
    5d34:	df 90       	pop	r13
    5d36:	cf 90       	pop	r12
    5d38:	bf 90       	pop	r11
    5d3a:	af 90       	pop	r10
    5d3c:	9f 90       	pop	r9
    5d3e:	8f 90       	pop	r8
    5d40:	7f 90       	pop	r7
    5d42:	5f 90       	pop	r5
    5d44:	4f 90       	pop	r4
    5d46:	08 95       	ret

00005d48 <__umulhisi3>:
    5d48:	a2 9f       	mul	r26, r18
    5d4a:	b0 01       	movw	r22, r0
    5d4c:	b3 9f       	mul	r27, r19
    5d4e:	c0 01       	movw	r24, r0
    5d50:	a3 9f       	mul	r26, r19
    5d52:	01 d0       	rcall	.+2      	; 0x5d56 <__umulhisi3+0xe>
    5d54:	b2 9f       	mul	r27, r18
    5d56:	70 0d       	add	r23, r0
    5d58:	81 1d       	adc	r24, r1
    5d5a:	11 24       	eor	r1, r1
    5d5c:	91 1d       	adc	r25, r1
    5d5e:	08 95       	ret

00005d60 <__usmulhisi3>:
    5d60:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__umulhisi3>

00005d64 <__usmulhisi3_tail>:
    5d64:	b7 ff       	sbrs	r27, 7
    5d66:	08 95       	ret
    5d68:	82 1b       	sub	r24, r18
    5d6a:	93 0b       	sbc	r25, r19
    5d6c:	08 95       	ret

00005d6e <__muluhisi3>:
    5d6e:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__umulhisi3>
    5d72:	a5 9f       	mul	r26, r21
    5d74:	90 0d       	add	r25, r0
    5d76:	b4 9f       	mul	r27, r20
    5d78:	90 0d       	add	r25, r0
    5d7a:	a4 9f       	mul	r26, r20
    5d7c:	80 0d       	add	r24, r0
    5d7e:	91 1d       	adc	r25, r1
    5d80:	11 24       	eor	r1, r1
    5d82:	08 95       	ret

00005d84 <__mulsi3>:
    5d84:	db 01       	movw	r26, r22
    5d86:	8f 93       	push	r24
    5d88:	9f 93       	push	r25
    5d8a:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <__muluhisi3>
    5d8e:	bf 91       	pop	r27
    5d90:	af 91       	pop	r26
    5d92:	a2 9f       	mul	r26, r18
    5d94:	80 0d       	add	r24, r0
    5d96:	91 1d       	adc	r25, r1
    5d98:	a3 9f       	mul	r26, r19
    5d9a:	90 0d       	add	r25, r0
    5d9c:	b2 9f       	mul	r27, r18
    5d9e:	90 0d       	add	r25, r0
    5da0:	11 24       	eor	r1, r1
    5da2:	08 95       	ret

00005da4 <__udivmodhi4>:
    5da4:	aa 1b       	sub	r26, r26
    5da6:	bb 1b       	sub	r27, r27
    5da8:	51 e1       	ldi	r21, 0x11	; 17
    5daa:	07 c0       	rjmp	.+14     	; 0x5dba <__udivmodhi4_ep>

00005dac <__udivmodhi4_loop>:
    5dac:	aa 1f       	adc	r26, r26
    5dae:	bb 1f       	adc	r27, r27
    5db0:	a6 17       	cp	r26, r22
    5db2:	b7 07       	cpc	r27, r23
    5db4:	10 f0       	brcs	.+4      	; 0x5dba <__udivmodhi4_ep>
    5db6:	a6 1b       	sub	r26, r22
    5db8:	b7 0b       	sbc	r27, r23

00005dba <__udivmodhi4_ep>:
    5dba:	88 1f       	adc	r24, r24
    5dbc:	99 1f       	adc	r25, r25
    5dbe:	5a 95       	dec	r21
    5dc0:	a9 f7       	brne	.-22     	; 0x5dac <__udivmodhi4_loop>
    5dc2:	80 95       	com	r24
    5dc4:	90 95       	com	r25
    5dc6:	bc 01       	movw	r22, r24
    5dc8:	cd 01       	movw	r24, r26
    5dca:	08 95       	ret

00005dcc <__divmodhi4>:
    5dcc:	97 fb       	bst	r25, 7
    5dce:	07 2e       	mov	r0, r23
    5dd0:	16 f4       	brtc	.+4      	; 0x5dd6 <__divmodhi4+0xa>
    5dd2:	00 94       	com	r0
    5dd4:	07 d0       	rcall	.+14     	; 0x5de4 <__divmodhi4_neg1>
    5dd6:	77 fd       	sbrc	r23, 7
    5dd8:	09 d0       	rcall	.+18     	; 0x5dec <__divmodhi4_neg2>
    5dda:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <__udivmodhi4>
    5dde:	07 fc       	sbrc	r0, 7
    5de0:	05 d0       	rcall	.+10     	; 0x5dec <__divmodhi4_neg2>
    5de2:	3e f4       	brtc	.+14     	; 0x5df2 <__divmodhi4_exit>

00005de4 <__divmodhi4_neg1>:
    5de4:	90 95       	com	r25
    5de6:	81 95       	neg	r24
    5de8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dea:	08 95       	ret

00005dec <__divmodhi4_neg2>:
    5dec:	70 95       	com	r23
    5dee:	61 95       	neg	r22
    5df0:	7f 4f       	sbci	r23, 0xFF	; 255

00005df2 <__divmodhi4_exit>:
    5df2:	08 95       	ret

00005df4 <__udivmodsi4>:
    5df4:	a1 e2       	ldi	r26, 0x21	; 33
    5df6:	1a 2e       	mov	r1, r26
    5df8:	aa 1b       	sub	r26, r26
    5dfa:	bb 1b       	sub	r27, r27
    5dfc:	fd 01       	movw	r30, r26
    5dfe:	0d c0       	rjmp	.+26     	; 0x5e1a <__udivmodsi4_ep>

00005e00 <__udivmodsi4_loop>:
    5e00:	aa 1f       	adc	r26, r26
    5e02:	bb 1f       	adc	r27, r27
    5e04:	ee 1f       	adc	r30, r30
    5e06:	ff 1f       	adc	r31, r31
    5e08:	a2 17       	cp	r26, r18
    5e0a:	b3 07       	cpc	r27, r19
    5e0c:	e4 07       	cpc	r30, r20
    5e0e:	f5 07       	cpc	r31, r21
    5e10:	20 f0       	brcs	.+8      	; 0x5e1a <__udivmodsi4_ep>
    5e12:	a2 1b       	sub	r26, r18
    5e14:	b3 0b       	sbc	r27, r19
    5e16:	e4 0b       	sbc	r30, r20
    5e18:	f5 0b       	sbc	r31, r21

00005e1a <__udivmodsi4_ep>:
    5e1a:	66 1f       	adc	r22, r22
    5e1c:	77 1f       	adc	r23, r23
    5e1e:	88 1f       	adc	r24, r24
    5e20:	99 1f       	adc	r25, r25
    5e22:	1a 94       	dec	r1
    5e24:	69 f7       	brne	.-38     	; 0x5e00 <__udivmodsi4_loop>
    5e26:	60 95       	com	r22
    5e28:	70 95       	com	r23
    5e2a:	80 95       	com	r24
    5e2c:	90 95       	com	r25
    5e2e:	9b 01       	movw	r18, r22
    5e30:	ac 01       	movw	r20, r24
    5e32:	bd 01       	movw	r22, r26
    5e34:	cf 01       	movw	r24, r30
    5e36:	08 95       	ret

00005e38 <__divmodsi4>:
    5e38:	05 2e       	mov	r0, r21
    5e3a:	97 fb       	bst	r25, 7
    5e3c:	16 f4       	brtc	.+4      	; 0x5e42 <__divmodsi4+0xa>
    5e3e:	00 94       	com	r0
    5e40:	07 d0       	rcall	.+14     	; 0x5e50 <__divmodsi4_neg1>
    5e42:	57 fd       	sbrc	r21, 7
    5e44:	0d d0       	rcall	.+26     	; 0x5e60 <__divmodsi4_neg2>
    5e46:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__udivmodsi4>
    5e4a:	07 fc       	sbrc	r0, 7
    5e4c:	09 d0       	rcall	.+18     	; 0x5e60 <__divmodsi4_neg2>
    5e4e:	7e f4       	brtc	.+30     	; 0x5e6e <__divmodsi4_exit>

00005e50 <__divmodsi4_neg1>:
    5e50:	90 95       	com	r25
    5e52:	80 95       	com	r24
    5e54:	70 95       	com	r23
    5e56:	61 95       	neg	r22
    5e58:	7f 4f       	sbci	r23, 0xFF	; 255
    5e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    5e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e5e:	08 95       	ret

00005e60 <__divmodsi4_neg2>:
    5e60:	50 95       	com	r21
    5e62:	40 95       	com	r20
    5e64:	30 95       	com	r19
    5e66:	21 95       	neg	r18
    5e68:	3f 4f       	sbci	r19, 0xFF	; 255
    5e6a:	4f 4f       	sbci	r20, 0xFF	; 255
    5e6c:	5f 4f       	sbci	r21, 0xFF	; 255

00005e6e <__divmodsi4_exit>:
    5e6e:	08 95       	ret

00005e70 <__ashldi3>:
    5e70:	0f 93       	push	r16
    5e72:	0f 73       	andi	r16, 0x3F	; 63
    5e74:	51 f0       	breq	.+20     	; 0x5e8a <__ashldi3+0x1a>
    5e76:	22 0f       	add	r18, r18
    5e78:	33 1f       	adc	r19, r19
    5e7a:	44 1f       	adc	r20, r20
    5e7c:	55 1f       	adc	r21, r21
    5e7e:	66 1f       	adc	r22, r22
    5e80:	77 1f       	adc	r23, r23
    5e82:	88 1f       	adc	r24, r24
    5e84:	99 1f       	adc	r25, r25
    5e86:	0a 95       	dec	r16
    5e88:	b1 f7       	brne	.-20     	; 0x5e76 <__ashldi3+0x6>
    5e8a:	0f 91       	pop	r16
    5e8c:	08 95       	ret

00005e8e <__lshrdi3>:
    5e8e:	0f 93       	push	r16
    5e90:	0f 73       	andi	r16, 0x3F	; 63
    5e92:	51 f0       	breq	.+20     	; 0x5ea8 <__lshrdi3+0x1a>
    5e94:	96 95       	lsr	r25
    5e96:	87 95       	ror	r24
    5e98:	77 95       	ror	r23
    5e9a:	67 95       	ror	r22
    5e9c:	57 95       	ror	r21
    5e9e:	47 95       	ror	r20
    5ea0:	37 95       	ror	r19
    5ea2:	27 95       	ror	r18
    5ea4:	0a 95       	dec	r16
    5ea6:	b1 f7       	brne	.-20     	; 0x5e94 <__lshrdi3+0x6>
    5ea8:	0f 91       	pop	r16
    5eaa:	08 95       	ret

00005eac <__cmpdi2>:
    5eac:	2a 15       	cp	r18, r10
    5eae:	3b 05       	cpc	r19, r11
    5eb0:	4c 05       	cpc	r20, r12
    5eb2:	5d 05       	cpc	r21, r13
    5eb4:	6e 05       	cpc	r22, r14
    5eb6:	7f 05       	cpc	r23, r15
    5eb8:	80 07       	cpc	r24, r16
    5eba:	91 07       	cpc	r25, r17
    5ebc:	08 95       	ret

00005ebe <__cmpdi2_s8>:
    5ebe:	00 24       	eor	r0, r0
    5ec0:	a7 fd       	sbrc	r26, 7
    5ec2:	00 94       	com	r0
    5ec4:	2a 17       	cp	r18, r26
    5ec6:	30 05       	cpc	r19, r0
    5ec8:	40 05       	cpc	r20, r0
    5eca:	50 05       	cpc	r21, r0
    5ecc:	60 05       	cpc	r22, r0
    5ece:	70 05       	cpc	r23, r0
    5ed0:	80 05       	cpc	r24, r0
    5ed2:	90 05       	cpc	r25, r0
    5ed4:	08 95       	ret

00005ed6 <strtol>:
    5ed6:	a0 e0       	ldi	r26, 0x00	; 0
    5ed8:	b0 e0       	ldi	r27, 0x00	; 0
    5eda:	e1 e7       	ldi	r30, 0x71	; 113
    5edc:	ff e2       	ldi	r31, 0x2F	; 47
    5ede:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__prologue_saves__+0x4>
    5ee2:	2b 01       	movw	r4, r22
    5ee4:	8a 01       	movw	r16, r20
    5ee6:	61 15       	cp	r22, r1
    5ee8:	71 05       	cpc	r23, r1
    5eea:	19 f0       	breq	.+6      	; 0x5ef2 <strtol+0x1c>
    5eec:	fb 01       	movw	r30, r22
    5eee:	80 83       	st	Z, r24
    5ef0:	91 83       	std	Z+1, r25	; 0x01
    5ef2:	01 15       	cp	r16, r1
    5ef4:	11 05       	cpc	r17, r1
    5ef6:	39 f0       	breq	.+14     	; 0x5f06 <strtol+0x30>
    5ef8:	98 01       	movw	r18, r16
    5efa:	22 50       	subi	r18, 0x02	; 2
    5efc:	31 09       	sbc	r19, r1
    5efe:	23 32       	cpi	r18, 0x23	; 35
    5f00:	31 05       	cpc	r19, r1
    5f02:	08 f0       	brcs	.+2      	; 0x5f06 <strtol+0x30>
    5f04:	e6 c0       	rjmp	.+460    	; 0x60d2 <strtol+0x1fc>
    5f06:	7c 01       	movw	r14, r24
    5f08:	f7 01       	movw	r30, r14
    5f0a:	c1 91       	ld	r28, Z+
    5f0c:	7f 01       	movw	r14, r30
    5f0e:	3f 01       	movw	r6, r30
    5f10:	8c 2f       	mov	r24, r28
    5f12:	90 e0       	ldi	r25, 0x00	; 0
    5f14:	0e 94 c7 30 	call	0x618e	; 0x618e <isspace>
    5f18:	89 2b       	or	r24, r25
    5f1a:	b1 f7       	brne	.-20     	; 0x5f08 <strtol+0x32>
    5f1c:	cd 32       	cpi	r28, 0x2D	; 45
    5f1e:	29 f4       	brne	.+10     	; 0x5f2a <strtol+0x54>
    5f20:	f7 01       	movw	r30, r14
    5f22:	c1 91       	ld	r28, Z+
    5f24:	3f 01       	movw	r6, r30
    5f26:	d1 e0       	ldi	r29, 0x01	; 1
    5f28:	06 c0       	rjmp	.+12     	; 0x5f36 <strtol+0x60>
    5f2a:	cb 32       	cpi	r28, 0x2B	; 43
    5f2c:	19 f4       	brne	.+6      	; 0x5f34 <strtol+0x5e>
    5f2e:	f7 01       	movw	r30, r14
    5f30:	c1 91       	ld	r28, Z+
    5f32:	3f 01       	movw	r6, r30
    5f34:	d0 e0       	ldi	r29, 0x00	; 0
    5f36:	01 15       	cp	r16, r1
    5f38:	11 05       	cpc	r17, r1
    5f3a:	09 f4       	brne	.+2      	; 0x5f3e <strtol+0x68>
    5f3c:	d8 c0       	rjmp	.+432    	; 0x60ee <strtol+0x218>
    5f3e:	00 31       	cpi	r16, 0x10	; 16
    5f40:	11 05       	cpc	r17, r1
    5f42:	81 f4       	brne	.+32     	; 0x5f64 <strtol+0x8e>
    5f44:	d0 c0       	rjmp	.+416    	; 0x60e6 <strtol+0x210>
    5f46:	f3 01       	movw	r30, r6
    5f48:	80 81       	ld	r24, Z
    5f4a:	88 37       	cpi	r24, 0x78	; 120
    5f4c:	19 f0       	breq	.+6      	; 0x5f54 <strtol+0x7e>
    5f4e:	88 35       	cpi	r24, 0x58	; 88
    5f50:	09 f0       	breq	.+2      	; 0x5f54 <strtol+0x7e>
    5f52:	c3 c0       	rjmp	.+390    	; 0x60da <strtol+0x204>
    5f54:	f3 01       	movw	r30, r6
    5f56:	c1 81       	ldd	r28, Z+1	; 0x01
    5f58:	f2 e0       	ldi	r31, 0x02	; 2
    5f5a:	6f 0e       	add	r6, r31
    5f5c:	71 1c       	adc	r7, r1
    5f5e:	d2 60       	ori	r29, 0x02	; 2
    5f60:	00 e1       	ldi	r16, 0x10	; 16
    5f62:	10 e0       	ldi	r17, 0x00	; 0
    5f64:	08 30       	cpi	r16, 0x08	; 8
    5f66:	11 05       	cpc	r17, r1
    5f68:	d9 f0       	breq	.+54     	; 0x5fa0 <strtol+0xca>
    5f6a:	24 f4       	brge	.+8      	; 0x5f74 <strtol+0x9e>
    5f6c:	02 30       	cpi	r16, 0x02	; 2
    5f6e:	11 05       	cpc	r17, r1
    5f70:	f9 f4       	brne	.+62     	; 0x5fb0 <strtol+0xda>
    5f72:	07 c0       	rjmp	.+14     	; 0x5f82 <strtol+0xac>
    5f74:	0a 30       	cpi	r16, 0x0A	; 10
    5f76:	11 05       	cpc	r17, r1
    5f78:	51 f0       	breq	.+20     	; 0x5f8e <strtol+0xb8>
    5f7a:	00 31       	cpi	r16, 0x10	; 16
    5f7c:	11 05       	cpc	r17, r1
    5f7e:	c1 f4       	brne	.+48     	; 0x5fb0 <strtol+0xda>
    5f80:	25 c0       	rjmp	.+74     	; 0x5fcc <strtol+0xf6>
    5f82:	c1 2c       	mov	r12, r1
    5f84:	d1 2c       	mov	r13, r1
    5f86:	e1 2c       	mov	r14, r1
    5f88:	30 e4       	ldi	r19, 0x40	; 64
    5f8a:	f3 2e       	mov	r15, r19
    5f8c:	24 c0       	rjmp	.+72     	; 0x5fd6 <strtol+0x100>
    5f8e:	0a e0       	ldi	r16, 0x0A	; 10
    5f90:	10 e0       	ldi	r17, 0x00	; 0
    5f92:	2c ec       	ldi	r18, 0xCC	; 204
    5f94:	c2 2e       	mov	r12, r18
    5f96:	dc 2c       	mov	r13, r12
    5f98:	ec 2c       	mov	r14, r12
    5f9a:	2c e0       	ldi	r18, 0x0C	; 12
    5f9c:	f2 2e       	mov	r15, r18
    5f9e:	1b c0       	rjmp	.+54     	; 0x5fd6 <strtol+0x100>
    5fa0:	08 e0       	ldi	r16, 0x08	; 8
    5fa2:	10 e0       	ldi	r17, 0x00	; 0
    5fa4:	c1 2c       	mov	r12, r1
    5fa6:	d1 2c       	mov	r13, r1
    5fa8:	e1 2c       	mov	r14, r1
    5faa:	90 e1       	ldi	r25, 0x10	; 16
    5fac:	f9 2e       	mov	r15, r25
    5fae:	13 c0       	rjmp	.+38     	; 0x5fd6 <strtol+0x100>
    5fb0:	98 01       	movw	r18, r16
    5fb2:	44 27       	eor	r20, r20
    5fb4:	37 fd       	sbrc	r19, 7
    5fb6:	40 95       	com	r20
    5fb8:	54 2f       	mov	r21, r20
    5fba:	60 e0       	ldi	r22, 0x00	; 0
    5fbc:	70 e0       	ldi	r23, 0x00	; 0
    5fbe:	80 e0       	ldi	r24, 0x00	; 0
    5fc0:	90 e8       	ldi	r25, 0x80	; 128
    5fc2:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__udivmodsi4>
    5fc6:	69 01       	movw	r12, r18
    5fc8:	7a 01       	movw	r14, r20
    5fca:	05 c0       	rjmp	.+10     	; 0x5fd6 <strtol+0x100>
    5fcc:	c1 2c       	mov	r12, r1
    5fce:	d1 2c       	mov	r13, r1
    5fd0:	e1 2c       	mov	r14, r1
    5fd2:	88 e0       	ldi	r24, 0x08	; 8
    5fd4:	f8 2e       	mov	r15, r24
    5fd6:	40 e0       	ldi	r20, 0x00	; 0
    5fd8:	60 e0       	ldi	r22, 0x00	; 0
    5fda:	70 e0       	ldi	r23, 0x00	; 0
    5fdc:	cb 01       	movw	r24, r22
    5fde:	48 01       	movw	r8, r16
    5fe0:	aa 24       	eor	r10, r10
    5fe2:	97 fc       	sbrc	r9, 7
    5fe4:	a0 94       	com	r10
    5fe6:	ba 2c       	mov	r11, r10
    5fe8:	ec 2f       	mov	r30, r28
    5fea:	e0 53       	subi	r30, 0x30	; 48
    5fec:	ea 30       	cpi	r30, 0x0A	; 10
    5fee:	60 f0       	brcs	.+24     	; 0x6008 <strtol+0x132>
    5ff0:	2c 2f       	mov	r18, r28
    5ff2:	21 54       	subi	r18, 0x41	; 65
    5ff4:	2a 31       	cpi	r18, 0x1A	; 26
    5ff6:	10 f4       	brcc	.+4      	; 0x5ffc <strtol+0x126>
    5ff8:	e7 50       	subi	r30, 0x07	; 7
    5ffa:	06 c0       	rjmp	.+12     	; 0x6008 <strtol+0x132>
    5ffc:	2c 2f       	mov	r18, r28
    5ffe:	21 56       	subi	r18, 0x61	; 97
    6000:	2a 31       	cpi	r18, 0x1A	; 26
    6002:	28 f5       	brcc	.+74     	; 0x604e <strtol+0x178>
    6004:	ec 2f       	mov	r30, r28
    6006:	e7 55       	subi	r30, 0x57	; 87
    6008:	2e 2f       	mov	r18, r30
    600a:	30 e0       	ldi	r19, 0x00	; 0
    600c:	20 17       	cp	r18, r16
    600e:	31 07       	cpc	r19, r17
    6010:	f4 f4       	brge	.+60     	; 0x604e <strtol+0x178>
    6012:	47 fd       	sbrc	r20, 7
    6014:	18 c0       	rjmp	.+48     	; 0x6046 <strtol+0x170>
    6016:	c6 16       	cp	r12, r22
    6018:	d7 06       	cpc	r13, r23
    601a:	e8 06       	cpc	r14, r24
    601c:	f9 06       	cpc	r15, r25
    601e:	80 f0       	brcs	.+32     	; 0x6040 <strtol+0x16a>
    6020:	9b 01       	movw	r18, r22
    6022:	ac 01       	movw	r20, r24
    6024:	c5 01       	movw	r24, r10
    6026:	b4 01       	movw	r22, r8
    6028:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <__mulsi3>
    602c:	6e 0f       	add	r22, r30
    602e:	71 1d       	adc	r23, r1
    6030:	81 1d       	adc	r24, r1
    6032:	91 1d       	adc	r25, r1
    6034:	61 30       	cpi	r22, 0x01	; 1
    6036:	71 05       	cpc	r23, r1
    6038:	81 05       	cpc	r24, r1
    603a:	20 e8       	ldi	r18, 0x80	; 128
    603c:	92 07       	cpc	r25, r18
    603e:	10 f0       	brcs	.+4      	; 0x6044 <strtol+0x16e>
    6040:	4f ef       	ldi	r20, 0xFF	; 255
    6042:	01 c0       	rjmp	.+2      	; 0x6046 <strtol+0x170>
    6044:	41 e0       	ldi	r20, 0x01	; 1
    6046:	f3 01       	movw	r30, r6
    6048:	c1 91       	ld	r28, Z+
    604a:	3f 01       	movw	r6, r30
    604c:	cd cf       	rjmp	.-102    	; 0x5fe8 <strtol+0x112>
    604e:	41 14       	cp	r4, r1
    6050:	51 04       	cpc	r5, r1
    6052:	91 f0       	breq	.+36     	; 0x6078 <strtol+0x1a2>
    6054:	44 23       	and	r20, r20
    6056:	39 f0       	breq	.+14     	; 0x6066 <strtol+0x190>
    6058:	f1 e0       	ldi	r31, 0x01	; 1
    605a:	6f 1a       	sub	r6, r31
    605c:	71 08       	sbc	r7, r1
    605e:	f2 01       	movw	r30, r4
    6060:	71 82       	std	Z+1, r7	; 0x01
    6062:	60 82       	st	Z, r6
    6064:	09 c0       	rjmp	.+18     	; 0x6078 <strtol+0x1a2>
    6066:	d1 ff       	sbrs	r29, 1
    6068:	1b c0       	rjmp	.+54     	; 0x60a0 <strtol+0x1ca>
    606a:	f2 e0       	ldi	r31, 0x02	; 2
    606c:	6f 1a       	sub	r6, r31
    606e:	71 08       	sbc	r7, r1
    6070:	f2 01       	movw	r30, r4
    6072:	71 82       	std	Z+1, r7	; 0x01
    6074:	60 82       	st	Z, r6
    6076:	14 c0       	rjmp	.+40     	; 0x60a0 <strtol+0x1ca>
    6078:	47 ff       	sbrs	r20, 7
    607a:	12 c0       	rjmp	.+36     	; 0x60a0 <strtol+0x1ca>
    607c:	d0 ff       	sbrs	r29, 0
    607e:	05 c0       	rjmp	.+10     	; 0x608a <strtol+0x1b4>
    6080:	60 e0       	ldi	r22, 0x00	; 0
    6082:	70 e0       	ldi	r23, 0x00	; 0
    6084:	80 e0       	ldi	r24, 0x00	; 0
    6086:	90 e8       	ldi	r25, 0x80	; 128
    6088:	04 c0       	rjmp	.+8      	; 0x6092 <strtol+0x1bc>
    608a:	6f ef       	ldi	r22, 0xFF	; 255
    608c:	7f ef       	ldi	r23, 0xFF	; 255
    608e:	8f ef       	ldi	r24, 0xFF	; 255
    6090:	9f e7       	ldi	r25, 0x7F	; 127
    6092:	22 e2       	ldi	r18, 0x22	; 34
    6094:	30 e0       	ldi	r19, 0x00	; 0
    6096:	30 93 99 04 	sts	0x0499, r19
    609a:	20 93 98 04 	sts	0x0498, r18
    609e:	16 c0       	rjmp	.+44     	; 0x60cc <strtol+0x1f6>
    60a0:	d0 ff       	sbrs	r29, 0
    60a2:	08 c0       	rjmp	.+16     	; 0x60b4 <strtol+0x1de>
    60a4:	90 95       	com	r25
    60a6:	80 95       	com	r24
    60a8:	70 95       	com	r23
    60aa:	61 95       	neg	r22
    60ac:	7f 4f       	sbci	r23, 0xFF	; 255
    60ae:	8f 4f       	sbci	r24, 0xFF	; 255
    60b0:	9f 4f       	sbci	r25, 0xFF	; 255
    60b2:	0c c0       	rjmp	.+24     	; 0x60cc <strtol+0x1f6>
    60b4:	97 ff       	sbrs	r25, 7
    60b6:	0a c0       	rjmp	.+20     	; 0x60cc <strtol+0x1f6>
    60b8:	82 e2       	ldi	r24, 0x22	; 34
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	90 93 99 04 	sts	0x0499, r25
    60c0:	80 93 98 04 	sts	0x0498, r24
    60c4:	6f ef       	ldi	r22, 0xFF	; 255
    60c6:	7f ef       	ldi	r23, 0xFF	; 255
    60c8:	8f ef       	ldi	r24, 0xFF	; 255
    60ca:	9f e7       	ldi	r25, 0x7F	; 127
    60cc:	6b 01       	movw	r12, r22
    60ce:	7c 01       	movw	r14, r24
    60d0:	12 c0       	rjmp	.+36     	; 0x60f6 <strtol+0x220>
    60d2:	c1 2c       	mov	r12, r1
    60d4:	d1 2c       	mov	r13, r1
    60d6:	76 01       	movw	r14, r12
    60d8:	0e c0       	rjmp	.+28     	; 0x60f6 <strtol+0x220>
    60da:	c0 e3       	ldi	r28, 0x30	; 48
    60dc:	01 15       	cp	r16, r1
    60de:	11 05       	cpc	r17, r1
    60e0:	09 f4       	brne	.+2      	; 0x60e4 <strtol+0x20e>
    60e2:	5e cf       	rjmp	.-324    	; 0x5fa0 <strtol+0xca>
    60e4:	3f cf       	rjmp	.-386    	; 0x5f64 <strtol+0x8e>
    60e6:	c0 33       	cpi	r28, 0x30	; 48
    60e8:	09 f0       	breq	.+2      	; 0x60ec <strtol+0x216>
    60ea:	3c cf       	rjmp	.-392    	; 0x5f64 <strtol+0x8e>
    60ec:	2c cf       	rjmp	.-424    	; 0x5f46 <strtol+0x70>
    60ee:	c0 33       	cpi	r28, 0x30	; 48
    60f0:	09 f0       	breq	.+2      	; 0x60f4 <strtol+0x21e>
    60f2:	4d cf       	rjmp	.-358    	; 0x5f8e <strtol+0xb8>
    60f4:	28 cf       	rjmp	.-432    	; 0x5f46 <strtol+0x70>
    60f6:	b6 01       	movw	r22, r12
    60f8:	c7 01       	movw	r24, r14
    60fa:	cd b7       	in	r28, 0x3d	; 61
    60fc:	de b7       	in	r29, 0x3e	; 62
    60fe:	e0 e1       	ldi	r30, 0x10	; 16
    6100:	0c 94 38 32 	jmp	0x6470	; 0x6470 <__epilogue_restores__+0x4>

00006104 <atoi>:
    6104:	fc 01       	movw	r30, r24
    6106:	88 27       	eor	r24, r24
    6108:	99 27       	eor	r25, r25
    610a:	e8 94       	clt
    610c:	21 91       	ld	r18, Z+
    610e:	20 32       	cpi	r18, 0x20	; 32
    6110:	e9 f3       	breq	.-6      	; 0x610c <atoi+0x8>
    6112:	29 30       	cpi	r18, 0x09	; 9
    6114:	10 f0       	brcs	.+4      	; 0x611a <atoi+0x16>
    6116:	2e 30       	cpi	r18, 0x0E	; 14
    6118:	c8 f3       	brcs	.-14     	; 0x610c <atoi+0x8>
    611a:	2b 32       	cpi	r18, 0x2B	; 43
    611c:	41 f0       	breq	.+16     	; 0x612e <atoi+0x2a>
    611e:	2d 32       	cpi	r18, 0x2D	; 45
    6120:	39 f4       	brne	.+14     	; 0x6130 <atoi+0x2c>
    6122:	68 94       	set
    6124:	04 c0       	rjmp	.+8      	; 0x612e <atoi+0x2a>
    6126:	0e 94 66 31 	call	0x62cc	; 0x62cc <__mulhi_const_10>
    612a:	82 0f       	add	r24, r18
    612c:	91 1d       	adc	r25, r1
    612e:	21 91       	ld	r18, Z+
    6130:	20 53       	subi	r18, 0x30	; 48
    6132:	2a 30       	cpi	r18, 0x0A	; 10
    6134:	c0 f3       	brcs	.-16     	; 0x6126 <atoi+0x22>
    6136:	1e f4       	brtc	.+6      	; 0x613e <atoi+0x3a>
    6138:	90 95       	com	r25
    613a:	81 95       	neg	r24
    613c:	9f 4f       	sbci	r25, 0xFF	; 255
    613e:	08 95       	ret

00006140 <atol>:
    6140:	1f 93       	push	r17
    6142:	fc 01       	movw	r30, r24
    6144:	99 27       	eor	r25, r25
    6146:	88 27       	eor	r24, r24
    6148:	bc 01       	movw	r22, r24
    614a:	e8 94       	clt
    614c:	11 91       	ld	r17, Z+
    614e:	10 32       	cpi	r17, 0x20	; 32
    6150:	e9 f3       	breq	.-6      	; 0x614c <atol+0xc>
    6152:	19 30       	cpi	r17, 0x09	; 9
    6154:	10 f0       	brcs	.+4      	; 0x615a <atol+0x1a>
    6156:	1e 30       	cpi	r17, 0x0E	; 14
    6158:	c8 f3       	brcs	.-14     	; 0x614c <atol+0xc>
    615a:	1b 32       	cpi	r17, 0x2B	; 43
    615c:	51 f0       	breq	.+20     	; 0x6172 <atol+0x32>
    615e:	1d 32       	cpi	r17, 0x2D	; 45
    6160:	49 f4       	brne	.+18     	; 0x6174 <atol+0x34>
    6162:	68 94       	set
    6164:	06 c0       	rjmp	.+12     	; 0x6172 <atol+0x32>
    6166:	0e 94 51 31 	call	0x62a2	; 0x62a2 <__mulsi_const_10>
    616a:	61 0f       	add	r22, r17
    616c:	71 1d       	adc	r23, r1
    616e:	81 1d       	adc	r24, r1
    6170:	91 1d       	adc	r25, r1
    6172:	11 91       	ld	r17, Z+
    6174:	10 53       	subi	r17, 0x30	; 48
    6176:	1a 30       	cpi	r17, 0x0A	; 10
    6178:	b0 f3       	brcs	.-20     	; 0x6166 <atol+0x26>
    617a:	3e f4       	brtc	.+14     	; 0x618a <atol+0x4a>
    617c:	90 95       	com	r25
    617e:	80 95       	com	r24
    6180:	70 95       	com	r23
    6182:	61 95       	neg	r22
    6184:	7f 4f       	sbci	r23, 0xFF	; 255
    6186:	8f 4f       	sbci	r24, 0xFF	; 255
    6188:	9f 4f       	sbci	r25, 0xFF	; 255
    618a:	1f 91       	pop	r17
    618c:	08 95       	ret

0000618e <isspace>:
    618e:	91 11       	cpse	r25, r1
    6190:	3e c1       	rjmp	.+636    	; 0x640e <__ctype_isfalse>
    6192:	80 32       	cpi	r24, 0x20	; 32
    6194:	19 f0       	breq	.+6      	; 0x619c <isspace+0xe>
    6196:	89 50       	subi	r24, 0x09	; 9
    6198:	85 50       	subi	r24, 0x05	; 5
    619a:	d0 f7       	brcc	.-12     	; 0x6190 <isspace+0x2>
    619c:	08 95       	ret

0000619e <strchr_P>:
    619e:	fc 01       	movw	r30, r24
    61a0:	05 90       	lpm	r0, Z+
    61a2:	06 16       	cp	r0, r22
    61a4:	21 f0       	breq	.+8      	; 0x61ae <strchr_P+0x10>
    61a6:	00 20       	and	r0, r0
    61a8:	d9 f7       	brne	.-10     	; 0x61a0 <strchr_P+0x2>
    61aa:	c0 01       	movw	r24, r0
    61ac:	08 95       	ret
    61ae:	31 97       	sbiw	r30, 0x01	; 1
    61b0:	cf 01       	movw	r24, r30
    61b2:	08 95       	ret

000061b4 <strcat>:
    61b4:	fb 01       	movw	r30, r22
    61b6:	dc 01       	movw	r26, r24
    61b8:	0d 90       	ld	r0, X+
    61ba:	00 20       	and	r0, r0
    61bc:	e9 f7       	brne	.-6      	; 0x61b8 <strcat+0x4>
    61be:	11 97       	sbiw	r26, 0x01	; 1
    61c0:	01 90       	ld	r0, Z+
    61c2:	0d 92       	st	X+, r0
    61c4:	00 20       	and	r0, r0
    61c6:	e1 f7       	brne	.-8      	; 0x61c0 <strcat+0xc>
    61c8:	08 95       	ret

000061ca <strcmp>:
    61ca:	fb 01       	movw	r30, r22
    61cc:	dc 01       	movw	r26, r24
    61ce:	8d 91       	ld	r24, X+
    61d0:	01 90       	ld	r0, Z+
    61d2:	80 19       	sub	r24, r0
    61d4:	01 10       	cpse	r0, r1
    61d6:	d9 f3       	breq	.-10     	; 0x61ce <strcmp+0x4>
    61d8:	99 0b       	sbc	r25, r25
    61da:	08 95       	ret

000061dc <strncmp>:
    61dc:	fb 01       	movw	r30, r22
    61de:	dc 01       	movw	r26, r24
    61e0:	41 50       	subi	r20, 0x01	; 1
    61e2:	50 40       	sbci	r21, 0x00	; 0
    61e4:	30 f0       	brcs	.+12     	; 0x61f2 <strncmp+0x16>
    61e6:	8d 91       	ld	r24, X+
    61e8:	01 90       	ld	r0, Z+
    61ea:	80 19       	sub	r24, r0
    61ec:	19 f4       	brne	.+6      	; 0x61f4 <strncmp+0x18>
    61ee:	00 20       	and	r0, r0
    61f0:	b9 f7       	brne	.-18     	; 0x61e0 <strncmp+0x4>
    61f2:	88 1b       	sub	r24, r24
    61f4:	99 0b       	sbc	r25, r25
    61f6:	08 95       	ret

000061f8 <itoa>:
    61f8:	fb 01       	movw	r30, r22
    61fa:	9f 01       	movw	r18, r30
    61fc:	e8 94       	clt
    61fe:	42 30       	cpi	r20, 0x02	; 2
    6200:	c4 f0       	brlt	.+48     	; 0x6232 <itoa+0x3a>
    6202:	45 32       	cpi	r20, 0x25	; 37
    6204:	b4 f4       	brge	.+44     	; 0x6232 <itoa+0x3a>
    6206:	4a 30       	cpi	r20, 0x0A	; 10
    6208:	29 f4       	brne	.+10     	; 0x6214 <itoa+0x1c>
    620a:	97 fb       	bst	r25, 7
    620c:	1e f4       	brtc	.+6      	; 0x6214 <itoa+0x1c>
    620e:	90 95       	com	r25
    6210:	81 95       	neg	r24
    6212:	9f 4f       	sbci	r25, 0xFF	; 255
    6214:	64 2f       	mov	r22, r20
    6216:	77 27       	eor	r23, r23
    6218:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <__udivmodhi4>
    621c:	80 5d       	subi	r24, 0xD0	; 208
    621e:	8a 33       	cpi	r24, 0x3A	; 58
    6220:	0c f0       	brlt	.+2      	; 0x6224 <itoa+0x2c>
    6222:	89 5d       	subi	r24, 0xD9	; 217
    6224:	81 93       	st	Z+, r24
    6226:	cb 01       	movw	r24, r22
    6228:	00 97       	sbiw	r24, 0x00	; 0
    622a:	a1 f7       	brne	.-24     	; 0x6214 <itoa+0x1c>
    622c:	16 f4       	brtc	.+4      	; 0x6232 <itoa+0x3a>
    622e:	5d e2       	ldi	r21, 0x2D	; 45
    6230:	51 93       	st	Z+, r21
    6232:	10 82       	st	Z, r1
    6234:	c9 01       	movw	r24, r18
    6236:	0c 94 0a 32 	jmp	0x6414	; 0x6414 <strrev>

0000623a <ltoa>:
    623a:	fa 01       	movw	r30, r20
    623c:	cf 93       	push	r28
    623e:	ff 93       	push	r31
    6240:	ef 93       	push	r30
    6242:	22 30       	cpi	r18, 0x02	; 2
    6244:	44 f1       	brlt	.+80     	; 0x6296 <ltoa+0x5c>
    6246:	25 32       	cpi	r18, 0x25	; 37
    6248:	34 f5       	brge	.+76     	; 0x6296 <ltoa+0x5c>
    624a:	c2 2f       	mov	r28, r18
    624c:	e8 94       	clt
    624e:	ca 30       	cpi	r28, 0x0A	; 10
    6250:	49 f4       	brne	.+18     	; 0x6264 <ltoa+0x2a>
    6252:	97 fb       	bst	r25, 7
    6254:	3e f4       	brtc	.+14     	; 0x6264 <ltoa+0x2a>
    6256:	90 95       	com	r25
    6258:	80 95       	com	r24
    625a:	70 95       	com	r23
    625c:	61 95       	neg	r22
    625e:	7f 4f       	sbci	r23, 0xFF	; 255
    6260:	8f 4f       	sbci	r24, 0xFF	; 255
    6262:	9f 4f       	sbci	r25, 0xFF	; 255
    6264:	2c 2f       	mov	r18, r28
    6266:	33 27       	eor	r19, r19
    6268:	44 27       	eor	r20, r20
    626a:	55 27       	eor	r21, r21
    626c:	ff 93       	push	r31
    626e:	ef 93       	push	r30
    6270:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__udivmodsi4>
    6274:	ef 91       	pop	r30
    6276:	ff 91       	pop	r31
    6278:	60 5d       	subi	r22, 0xD0	; 208
    627a:	6a 33       	cpi	r22, 0x3A	; 58
    627c:	0c f0       	brlt	.+2      	; 0x6280 <ltoa+0x46>
    627e:	69 5d       	subi	r22, 0xD9	; 217
    6280:	61 93       	st	Z+, r22
    6282:	b9 01       	movw	r22, r18
    6284:	ca 01       	movw	r24, r20
    6286:	60 50       	subi	r22, 0x00	; 0
    6288:	70 40       	sbci	r23, 0x00	; 0
    628a:	80 40       	sbci	r24, 0x00	; 0
    628c:	90 40       	sbci	r25, 0x00	; 0
    628e:	51 f7       	brne	.-44     	; 0x6264 <ltoa+0x2a>
    6290:	16 f4       	brtc	.+4      	; 0x6296 <ltoa+0x5c>
    6292:	cd e2       	ldi	r28, 0x2D	; 45
    6294:	c1 93       	st	Z+, r28
    6296:	10 82       	st	Z, r1
    6298:	8f 91       	pop	r24
    629a:	9f 91       	pop	r25
    629c:	cf 91       	pop	r28
    629e:	0c 94 0a 32 	jmp	0x6414	; 0x6414 <strrev>

000062a2 <__mulsi_const_10>:
    62a2:	59 2f       	mov	r21, r25
    62a4:	48 2f       	mov	r20, r24
    62a6:	37 2f       	mov	r19, r23
    62a8:	26 2f       	mov	r18, r22
    62aa:	66 0f       	add	r22, r22
    62ac:	77 1f       	adc	r23, r23
    62ae:	88 1f       	adc	r24, r24
    62b0:	99 1f       	adc	r25, r25
    62b2:	66 0f       	add	r22, r22
    62b4:	77 1f       	adc	r23, r23
    62b6:	88 1f       	adc	r24, r24
    62b8:	99 1f       	adc	r25, r25
    62ba:	62 0f       	add	r22, r18
    62bc:	73 1f       	adc	r23, r19
    62be:	84 1f       	adc	r24, r20
    62c0:	95 1f       	adc	r25, r21
    62c2:	66 0f       	add	r22, r22
    62c4:	77 1f       	adc	r23, r23
    62c6:	88 1f       	adc	r24, r24
    62c8:	99 1f       	adc	r25, r25
    62ca:	08 95       	ret

000062cc <__mulhi_const_10>:
    62cc:	7a e0       	ldi	r23, 0x0A	; 10
    62ce:	97 9f       	mul	r25, r23
    62d0:	90 2d       	mov	r25, r0
    62d2:	87 9f       	mul	r24, r23
    62d4:	80 2d       	mov	r24, r0
    62d6:	91 0d       	add	r25, r1
    62d8:	11 24       	eor	r1, r1
    62da:	08 95       	ret

000062dc <fgetc>:
    62dc:	cf 93       	push	r28
    62de:	df 93       	push	r29
    62e0:	ec 01       	movw	r28, r24
    62e2:	3b 81       	ldd	r19, Y+3	; 0x03
    62e4:	30 ff       	sbrs	r19, 0
    62e6:	34 c0       	rjmp	.+104    	; 0x6350 <fgetc+0x74>
    62e8:	36 ff       	sbrs	r19, 6
    62ea:	0a c0       	rjmp	.+20     	; 0x6300 <fgetc+0x24>
    62ec:	3f 7b       	andi	r19, 0xBF	; 191
    62ee:	3b 83       	std	Y+3, r19	; 0x03
    62f0:	8e 81       	ldd	r24, Y+6	; 0x06
    62f2:	9f 81       	ldd	r25, Y+7	; 0x07
    62f4:	01 96       	adiw	r24, 0x01	; 1
    62f6:	9f 83       	std	Y+7, r25	; 0x07
    62f8:	8e 83       	std	Y+6, r24	; 0x06
    62fa:	2a 81       	ldd	r18, Y+2	; 0x02
    62fc:	30 e0       	ldi	r19, 0x00	; 0
    62fe:	2a c0       	rjmp	.+84     	; 0x6354 <fgetc+0x78>
    6300:	32 ff       	sbrs	r19, 2
    6302:	0f c0       	rjmp	.+30     	; 0x6322 <fgetc+0x46>
    6304:	e8 81       	ld	r30, Y
    6306:	f9 81       	ldd	r31, Y+1	; 0x01
    6308:	80 81       	ld	r24, Z
    630a:	99 27       	eor	r25, r25
    630c:	87 fd       	sbrc	r24, 7
    630e:	90 95       	com	r25
    6310:	00 97       	sbiw	r24, 0x00	; 0
    6312:	19 f4       	brne	.+6      	; 0x631a <fgetc+0x3e>
    6314:	30 62       	ori	r19, 0x20	; 32
    6316:	3b 83       	std	Y+3, r19	; 0x03
    6318:	1b c0       	rjmp	.+54     	; 0x6350 <fgetc+0x74>
    631a:	31 96       	adiw	r30, 0x01	; 1
    631c:	f9 83       	std	Y+1, r31	; 0x01
    631e:	e8 83       	st	Y, r30
    6320:	0e c0       	rjmp	.+28     	; 0x633e <fgetc+0x62>
    6322:	ea 85       	ldd	r30, Y+10	; 0x0a
    6324:	fb 85       	ldd	r31, Y+11	; 0x0b
    6326:	09 95       	icall
    6328:	97 ff       	sbrs	r25, 7
    632a:	09 c0       	rjmp	.+18     	; 0x633e <fgetc+0x62>
    632c:	2b 81       	ldd	r18, Y+3	; 0x03
    632e:	01 96       	adiw	r24, 0x01	; 1
    6330:	11 f4       	brne	.+4      	; 0x6336 <fgetc+0x5a>
    6332:	80 e1       	ldi	r24, 0x10	; 16
    6334:	01 c0       	rjmp	.+2      	; 0x6338 <fgetc+0x5c>
    6336:	80 e2       	ldi	r24, 0x20	; 32
    6338:	82 2b       	or	r24, r18
    633a:	8b 83       	std	Y+3, r24	; 0x03
    633c:	09 c0       	rjmp	.+18     	; 0x6350 <fgetc+0x74>
    633e:	2e 81       	ldd	r18, Y+6	; 0x06
    6340:	3f 81       	ldd	r19, Y+7	; 0x07
    6342:	2f 5f       	subi	r18, 0xFF	; 255
    6344:	3f 4f       	sbci	r19, 0xFF	; 255
    6346:	3f 83       	std	Y+7, r19	; 0x07
    6348:	2e 83       	std	Y+6, r18	; 0x06
    634a:	9c 01       	movw	r18, r24
    634c:	33 27       	eor	r19, r19
    634e:	02 c0       	rjmp	.+4      	; 0x6354 <fgetc+0x78>
    6350:	2f ef       	ldi	r18, 0xFF	; 255
    6352:	3f ef       	ldi	r19, 0xFF	; 255
    6354:	c9 01       	movw	r24, r18
    6356:	df 91       	pop	r29
    6358:	cf 91       	pop	r28
    635a:	08 95       	ret

0000635c <ungetc>:
    635c:	fb 01       	movw	r30, r22
    635e:	23 81       	ldd	r18, Z+3	; 0x03
    6360:	20 ff       	sbrs	r18, 0
    6362:	13 c0       	rjmp	.+38     	; 0x638a <ungetc+0x2e>
    6364:	26 fd       	sbrc	r18, 6
    6366:	11 c0       	rjmp	.+34     	; 0x638a <ungetc+0x2e>
    6368:	8f 3f       	cpi	r24, 0xFF	; 255
    636a:	3f ef       	ldi	r19, 0xFF	; 255
    636c:	93 07       	cpc	r25, r19
    636e:	69 f0       	breq	.+26     	; 0x638a <ungetc+0x2e>
    6370:	82 83       	std	Z+2, r24	; 0x02
    6372:	2f 7d       	andi	r18, 0xDF	; 223
    6374:	20 64       	ori	r18, 0x40	; 64
    6376:	23 83       	std	Z+3, r18	; 0x03
    6378:	26 81       	ldd	r18, Z+6	; 0x06
    637a:	37 81       	ldd	r19, Z+7	; 0x07
    637c:	21 50       	subi	r18, 0x01	; 1
    637e:	31 09       	sbc	r19, r1
    6380:	37 83       	std	Z+7, r19	; 0x07
    6382:	26 83       	std	Z+6, r18	; 0x06
    6384:	9c 01       	movw	r18, r24
    6386:	33 27       	eor	r19, r19
    6388:	02 c0       	rjmp	.+4      	; 0x638e <ungetc+0x32>
    638a:	2f ef       	ldi	r18, 0xFF	; 255
    638c:	3f ef       	ldi	r19, 0xFF	; 255
    638e:	c9 01       	movw	r24, r18
    6390:	08 95       	ret

00006392 <__eerd_block_m328>:
    6392:	dc 01       	movw	r26, r24
    6394:	cb 01       	movw	r24, r22

00006396 <__eerd_blraw_m328>:
    6396:	fc 01       	movw	r30, r24
    6398:	f9 99       	sbic	0x1f, 1	; 31
    639a:	fe cf       	rjmp	.-4      	; 0x6398 <__eerd_blraw_m328+0x2>
    639c:	06 c0       	rjmp	.+12     	; 0x63aa <__eerd_blraw_m328+0x14>
    639e:	f2 bd       	out	0x22, r31	; 34
    63a0:	e1 bd       	out	0x21, r30	; 33
    63a2:	f8 9a       	sbi	0x1f, 0	; 31
    63a4:	31 96       	adiw	r30, 0x01	; 1
    63a6:	00 b4       	in	r0, 0x20	; 32
    63a8:	0d 92       	st	X+, r0
    63aa:	41 50       	subi	r20, 0x01	; 1
    63ac:	50 40       	sbci	r21, 0x00	; 0
    63ae:	b8 f7       	brcc	.-18     	; 0x639e <__eerd_blraw_m328+0x8>
    63b0:	08 95       	ret

000063b2 <__eerd_word_m328>:
    63b2:	a8 e1       	ldi	r26, 0x18	; 24
    63b4:	b0 e0       	ldi	r27, 0x00	; 0
    63b6:	42 e0       	ldi	r20, 0x02	; 2
    63b8:	50 e0       	ldi	r21, 0x00	; 0
    63ba:	0c 94 cb 31 	jmp	0x6396	; 0x6396 <__eerd_blraw_m328>

000063be <__eeupd_block_m328>:
    63be:	dc 01       	movw	r26, r24
    63c0:	a4 0f       	add	r26, r20
    63c2:	b5 1f       	adc	r27, r21
    63c4:	41 50       	subi	r20, 0x01	; 1
    63c6:	50 40       	sbci	r21, 0x00	; 0
    63c8:	48 f0       	brcs	.+18     	; 0x63dc <__eeupd_block_m328+0x1e>
    63ca:	cb 01       	movw	r24, r22
    63cc:	84 0f       	add	r24, r20
    63ce:	95 1f       	adc	r25, r21
    63d0:	2e 91       	ld	r18, -X
    63d2:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <__eeupd_r18_m328>
    63d6:	41 50       	subi	r20, 0x01	; 1
    63d8:	50 40       	sbci	r21, 0x00	; 0
    63da:	d0 f7       	brcc	.-12     	; 0x63d0 <__eeupd_block_m328+0x12>
    63dc:	08 95       	ret

000063de <__eeupd_byte_m328>:
    63de:	26 2f       	mov	r18, r22

000063e0 <__eeupd_r18_m328>:
    63e0:	f9 99       	sbic	0x1f, 1	; 31
    63e2:	fe cf       	rjmp	.-4      	; 0x63e0 <__eeupd_r18_m328>
    63e4:	92 bd       	out	0x22, r25	; 34
    63e6:	81 bd       	out	0x21, r24	; 33
    63e8:	f8 9a       	sbi	0x1f, 0	; 31
    63ea:	01 97       	sbiw	r24, 0x01	; 1
    63ec:	00 b4       	in	r0, 0x20	; 32
    63ee:	02 16       	cp	r0, r18
    63f0:	39 f0       	breq	.+14     	; 0x6400 <__eeupd_r18_m328+0x20>
    63f2:	1f ba       	out	0x1f, r1	; 31
    63f4:	20 bd       	out	0x20, r18	; 32
    63f6:	0f b6       	in	r0, 0x3f	; 63
    63f8:	f8 94       	cli
    63fa:	fa 9a       	sbi	0x1f, 2	; 31
    63fc:	f9 9a       	sbi	0x1f, 1	; 31
    63fe:	0f be       	out	0x3f, r0	; 63
    6400:	08 95       	ret

00006402 <__eeupd_word_m328>:
    6402:	01 96       	adiw	r24, 0x01	; 1
    6404:	27 2f       	mov	r18, r23
    6406:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <__eeupd_r18_m328>
    640a:	0c 94 ef 31 	jmp	0x63de	; 0x63de <__eeupd_byte_m328>

0000640e <__ctype_isfalse>:
    640e:	99 27       	eor	r25, r25
    6410:	88 27       	eor	r24, r24

00006412 <__ctype_istrue>:
    6412:	08 95       	ret

00006414 <strrev>:
    6414:	dc 01       	movw	r26, r24
    6416:	fc 01       	movw	r30, r24
    6418:	67 2f       	mov	r22, r23
    641a:	71 91       	ld	r23, Z+
    641c:	77 23       	and	r23, r23
    641e:	e1 f7       	brne	.-8      	; 0x6418 <strrev+0x4>
    6420:	32 97       	sbiw	r30, 0x02	; 2
    6422:	04 c0       	rjmp	.+8      	; 0x642c <strrev+0x18>
    6424:	7c 91       	ld	r23, X
    6426:	6d 93       	st	X+, r22
    6428:	70 83       	st	Z, r23
    642a:	62 91       	ld	r22, -Z
    642c:	ae 17       	cp	r26, r30
    642e:	bf 07       	cpc	r27, r31
    6430:	c8 f3       	brcs	.-14     	; 0x6424 <strrev+0x10>
    6432:	08 95       	ret

00006434 <__prologue_saves__>:
    6434:	2f 92       	push	r2
    6436:	3f 92       	push	r3
    6438:	4f 92       	push	r4
    643a:	5f 92       	push	r5
    643c:	6f 92       	push	r6
    643e:	7f 92       	push	r7
    6440:	8f 92       	push	r8
    6442:	9f 92       	push	r9
    6444:	af 92       	push	r10
    6446:	bf 92       	push	r11
    6448:	cf 92       	push	r12
    644a:	df 92       	push	r13
    644c:	ef 92       	push	r14
    644e:	ff 92       	push	r15
    6450:	0f 93       	push	r16
    6452:	1f 93       	push	r17
    6454:	cf 93       	push	r28
    6456:	df 93       	push	r29
    6458:	cd b7       	in	r28, 0x3d	; 61
    645a:	de b7       	in	r29, 0x3e	; 62
    645c:	ca 1b       	sub	r28, r26
    645e:	db 0b       	sbc	r29, r27
    6460:	0f b6       	in	r0, 0x3f	; 63
    6462:	f8 94       	cli
    6464:	de bf       	out	0x3e, r29	; 62
    6466:	0f be       	out	0x3f, r0	; 63
    6468:	cd bf       	out	0x3d, r28	; 61
    646a:	09 94       	ijmp

0000646c <__epilogue_restores__>:
    646c:	2a 88       	ldd	r2, Y+18	; 0x12
    646e:	39 88       	ldd	r3, Y+17	; 0x11
    6470:	48 88       	ldd	r4, Y+16	; 0x10
    6472:	5f 84       	ldd	r5, Y+15	; 0x0f
    6474:	6e 84       	ldd	r6, Y+14	; 0x0e
    6476:	7d 84       	ldd	r7, Y+13	; 0x0d
    6478:	8c 84       	ldd	r8, Y+12	; 0x0c
    647a:	9b 84       	ldd	r9, Y+11	; 0x0b
    647c:	aa 84       	ldd	r10, Y+10	; 0x0a
    647e:	b9 84       	ldd	r11, Y+9	; 0x09
    6480:	c8 84       	ldd	r12, Y+8	; 0x08
    6482:	df 80       	ldd	r13, Y+7	; 0x07
    6484:	ee 80       	ldd	r14, Y+6	; 0x06
    6486:	fd 80       	ldd	r15, Y+5	; 0x05
    6488:	0c 81       	ldd	r16, Y+4	; 0x04
    648a:	1b 81       	ldd	r17, Y+3	; 0x03
    648c:	aa 81       	ldd	r26, Y+2	; 0x02
    648e:	b9 81       	ldd	r27, Y+1	; 0x01
    6490:	ce 0f       	add	r28, r30
    6492:	d1 1d       	adc	r29, r1
    6494:	0f b6       	in	r0, 0x3f	; 63
    6496:	f8 94       	cli
    6498:	de bf       	out	0x3e, r29	; 62
    649a:	0f be       	out	0x3f, r0	; 63
    649c:	cd bf       	out	0x3d, r28	; 61
    649e:	ed 01       	movw	r28, r26
    64a0:	08 95       	ret

000064a2 <_exit>:
    64a2:	f8 94       	cli

000064a4 <__stop_program>:
    64a4:	ff cf       	rjmp	.-2      	; 0x64a4 <__stop_program>
